☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
CC: Tweaked is a mod for Minecraft which adds programmable computers, turtles and more to the game. A
fork of the much-beloved ComputerCraft, it continues its legacy with improved performance and stability,
along with a wealth of new features.
CC: Tweaked can be installed from Modrinth. It runs on both Minecraft Forge and Fabric.
Features
Controlled using the Lua programming language, CC: Tweaked's computers provides all the tools you need
to start writing code and automating your Minecraft world.

While computers are incredibly powerful, they're rather limited by their inability to move about. Turtles are
the solution here. They can move about the world, placing and breaking blocks, swinging a sword to protect
you from zombies, or whatever else you program them to!

Not all problems can be solved with a pickaxe though, and so CC: Tweaked also provides a bunch of
additional peripherals for your computers. You can play a tune with speakers, display text or images on a
monitor, connect all your computers together with modems, and much more.
Computers can now also interact with inventories such as chests, allowing you to build complex inventory
and item management systems.

Getting Started
While ComputerCraft is lovely for both experienced programmers and for people who have never coded
before, it can be a little daunting getting started. Thankfully, there's several fantastic tutorials out there:
•
Direwolf20's ComputerCraft tutorials
•
Sethbling's ComputerCraft series
•
Lyqyd's Computer Basics 1
Once you're a little more familiar with the mod, the sidebar and links below provide more detailed
documentation on the various APIs and peripherals provided by the mod.
Community
If you need help getting started with CC: Tweaked, want to show off your latest project, or just want to chat
about ComputerCraft, do check out our GitHub discussions page! There's also a fairly populated, albeit quiet
IRC channel on EsperNet, if that's more your cup of tea. You can join #computercraft through your
desktop client, or online using KiwiIRC.
Get Involved
CC: Tweaked lives on GitHub. If you've got any ideas, feedback or bugs please do create an issue.

Globals
_G
Functions in the global environment, defined in bios.lua.
colors
Constants and functions for colour values, suitable for working with term and redstone.
colours
An alternative version of colors for lovers of British spelling.
commands Execute Minecraft commands and gather data from the results from a command computer.
disk
Interact with disk drives.
fs
Interact with the computer's files and filesystem, allowing you to manipulate files, directories
and paths.
gps
Use modems to locate the position of the current turtle or computers.
help
Find help files on the current computer.
http
Make HTTP requests, sending and receiving data to a remote web server.
io
Emulates Lua's standard io library.
keys
Constants for all keyboard "key codes", as queued by the key event.
multishell
Multishell allows multiple programs to be run at the same time.
os
The os API allows interacting with the current computer.
paintutils
Utilities for drawing more complex graphics, such as pixels, lines and images.
parallel
A simple way to run several functions at once.
peripheral Find and control peripherals attached to this computer.
pocket
Control the current pocket computer, adding or removing upgrades.
rednet
Communicate with other computers by using modems.
redstone
Get and set redstone signals adjacent to this computer.
settings
Read and write configuration options for CraftOS and your programs.
shell
The shell API provides access to CraftOS's command line interface.
term
Interact with a computer's terminal or monitors, writing text and drawing ASCII graphics.
textutils
Helpful utilities for formatting and manipulating strings.
turtle
Turtles are a robotic device, which can break and place blocks, attack mobs, and move about
the world.
vector
A basic 3D vector type and some common vector operations.
window
A terminal redirect occupying a smaller area of an existing terminal.
Modules
cc.audio.dfpwm
Convert between streams of DFPWM audio data and a list of amplitudes.
cc.completion
A collection of helper methods for working with input completion, such as that
require by _G.read.
cc.expect
The cc.expect library provides helper functions for verifying that function
arguments are well-formed and of the correct type.
cc.image.nft
Read and draw nft ("Nitrogen Fingers Text") images.
cc.pretty
A pretty printer for rendering data structures in an aesthetically pleasing manner.
cc.require
A pure Lua implementation of the builtin require function and package library.
cc.shell.completion
A collection of helper methods for working with shell completion.
cc.strings
Various utilities for working with strings and text.

Peripherals
command
This peripheral allows you to interact with command blocks.
computer
A computer or turtle wrapped as a peripheral.
drive
Disk drives are a peripheral which allow you to read and write to floppy disks and other
"mountable media" (such as computers or turtles).
modem
Modems allow you to send messages between computers over long distances.
monitor
Monitors are a block which act as a terminal, displaying information on one side.
printer
The printer peripheral allows printing text onto pages.
redstone_relay The redstone relay is a peripheral that allows reading and outputting redstone signals.
speaker
The speaker peripheral allows your computer to play notes and other sounds.
Generic Peripherals
energy_storage Methods for interacting with blocks which store energy.
fluid_storage
Methods for interacting with tanks and other fluid storage blocks.
inventory
Methods for interacting with inventories.
Events
alarm
The alarm event is fired when an alarm started with os.setAlarm completes.
char
The char event is fired when a character is typed on the keyboard.
computer_command
The computer_command event is fired when the /computercraft queue
command is run for the current computer.
disk
The disk event is fired when a disk is inserted into an adjacent or networked disk
drive.
disk_eject
The disk_eject event is fired when a disk is removed from an adjacent or
networked disk drive.
file_transfer
The file_transfer event is queued when a user drags-and-drops a file on an
open computer.
http_check
The http_check event is fired when a URL check finishes.
http_failure
The http_failure event is fired when an HTTP request fails.
http_success
The http_success event is fired when an HTTP request returns successfully.
key
This event is fired when any key is pressed while the terminal is focused.
key_up
Fired whenever a key is released (or the terminal is closed while a key was being
pressed).
modem_message
The modem_message event is fired when a message is received on an open
channel on any modem.
monitor_resize
The monitor_resize event is fired when an adjacent or networked monitor's
size is changed.
monitor_touch
The monitor_touch event is fired when an adjacent or networked Advanced
Monitor is right-clicked.
mouse_click
This event is fired when the terminal is clicked with a mouse.
mouse_drag
This event is fired every time the mouse is moved while a mouse button is being
held.
mouse_scroll
This event is fired when a mouse wheel is scrolled in the terminal.
mouse_up
This event is fired when a mouse button is released or a held mouse leaves the

computer's terminal.
paste
The paste event is fired when text is pasted into the computer through Ctrl-V (or
V on Mac).
⌘
peripheral
The peripheral event is fired when a peripheral is attached on a side or to a
modem.
peripheral_detach
The peripheral_detach event is fired when a peripheral is detached from a
side or from a modem.
rednet_message
The rednet_message event is fired when a message is sent over Rednet.
redstone
The redstone event is fired whenever any redstone inputs on the computer or
relay change.
speaker_audio_empty Return Values
task_complete
The task_complete event is fired when an asynchronous task completes.
term_resize
The term_resize event is fired when the main terminal is resized.
terminate
The terminate event is fired when Ctrl-T is held down.
timer
The timer event is fired when a timer started with os.startTimer completes.
turtle_inventory
The turtle_inventory event is fired when a turtle's inventory is changed.
websocket_closed
The websocket_closed event is fired when an open WebSocket connection is
closed.
websocket_failure
The websocket_failure event is fired when a WebSocket connection request
fails.
websocket_message
The websocket_message event is fired when a message is received on an open
WebSocket connection.
websocket_success
The websocket_success event is fired when a WebSocket connection request
returns successfully.
Guides
Setting up GPS
The gps API allows computers and turtles to find their current position using
wireless modems.
Allowing access to
local IPs
By default, ComputerCraft blocks access to local IP addresses for security.
Playing audio with
speakers
CC: Tweaked's speaker peripheral provides a powerful way to play any audio you
like with the speaker.playAudio method.
Reusing code with
require
A library is a collection of useful functions and other definitions which is stored
separately to your main program.
Reference
Incompatibilities between
versions
CC: Tweaked tries to remain as compatible between versions as possible,
meaning most programs written for older version
The /computercraft
command
CC: Tweaked provides a /computercraft command for server owners to
manage running computers on a server.
Lua 5.2/5.3 features in CC:
Tweaked
CC: Tweaked is based off of the Cobalt Lua runtime, which uses Lua 5.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
websocket_message
The websocket_message event is fired when a message is received on an open WebSocket connection.
This event is normally handled by http.Websocket.receive, but it can also be pulled manually.
Return Values
1. string
: The event name.
2. string
: The URL of the WebSocket.
3. string
: The contents of the message.
4. boolean: Whether this is a binary message.
Example
Prints a message sent by a WebSocket:
local myURL = "wss://example.tweaked.cc/echo"
local ws = http.websocket(myURL)
ws.send("Hello!")
local event, url, message
repeat
event, url, message = os.pullEvent("websocket_message")
until url == myURL
print("Received message from " .. url .. " with contents " .. message)
ws.close()

Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
websocket_failure
The websocket_failure event is fired when a WebSocket connection request fails.
This event is normally handled inside http.websocket, but it can still be seen when using
http.websocketAsync.
Return Values
1. string
: The event name.
2. string
: The URL of the site requested.
3. string
: An error describing the failure.
Example
Prints an error why the website cannot be contacted:
local myURL = "wss://example.tweaked.cc/not-a-websocket"
http.websocketAsync(myURL)
local event, url, err
repeat
event, url, err = os.pullEvent("websocket_failure")
until url == myURL
print("The URL " .. url .. " could not be reached: " .. err)

See also
•
http.websocketAsync
To send an HTTP request.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
websocket_closed
The websocket_closed event is fired when an open WebSocket connection is closed.
Return Values
1. string
: The event name.
2. string
: The URL of the WebSocket that was closed.
3. string
|nil: The server-provided reason the websocket was closed. This will be nil if the
connection was closed abnormally.
4. number|nil: The connection close code, indicating why the socket was closed. This will be nil if
the connection was closed abnormally.
Example
Prints a message when a WebSocket is closed (this may take a minute):
local myURL = "wss://example.tweaked.cc/echo"
local ws = http.websocket(myURL)
local event, url
repeat
event, url = os.pullEvent("websocket_closed")
until url == myURL
print("The WebSocket at " .. url .. " was closed.")
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
turtle_inventory
The turtle_inventory event is fired when a turtle's inventory is changed.
Return values
1. string
: The event name.
Example
Prints a message when the inventory is changed:
while true do
os.pullEvent("turtle_inventory")
print("The inventory was changed.")
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
timer
The timer event is fired when a timer started with os.startTimer completes.
Return Values
1. string
: The event name.
2. number: The ID of the timer that finished.
Example
Start and wait for a timer to finish.
local timer_id = os.startTimer(2)
local event, id
repeat
event, id = os.pullEvent("timer")
until id == timer_id
print("Timer with ID " .. id .. " was fired")
See also
•
os.startTimer
To start a timer.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
terminate
The terminate event is fired when Ctrl-T is held down.
This event is normally handled by os.pullEvent, and will not be returned. However, os.pullEventRaw
will return this event when fired.
terminate will be sent even when a filter is provided to os.pullEventRaw. When using
os.pullEventRaw with a filter, make sure to check that the event is not terminate.
Return values
1. string
: The event name.
Example
Prints a message when Ctrl-T is held:
while true do
local event = os.pullEventRaw("terminate")
if event == "terminate" then print("Terminate requested!") end
end
Exits when Ctrl-T is held:
while true do
os.pullEvent()

end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
term_resize
The term_resize event is fired when the main terminal is resized. For instance:
•
When a the tab bar is shown or hidden in multishell.
•
When the terminal is redirected to a monitor via the "monitor" program and the monitor is resized.
When this event fires, some parts of the terminal may have been moved or deleted. Simple terminal programs
(those not using term.setCursorPos) can ignore this event, but more complex GUI programs should
redraw the entire screen.
Return values
1. string
: The event name.
Example
Print a message each time the terminal is resized.
while true do
os.pullEvent("term_resize")
local w, h = term.getSize()
print("The term was resized to (" .. w .. ", " .. h .. ")")
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
task_complete
The task_complete event is fired when an asynchronous task completes. This is usually handled inside the
function call that queued the task; however, functions such as commands.execAsync return immediately so
the user can wait for completion.
Return Values
1. string
: The event name.
2. number: The ID of the task that completed.
3. boolean: Whether the command succeeded.
4. string
: If the command failed, an error message explaining the failure. (This is not present if the
command succeeded.)
5. …: Any parameters returned from the command.
Example
Prints the results of an asynchronous command:
local taskID = commands.execAsync("say Hello")
local event
repeat
event = {os.pullEvent("task_complete")}
until event[2] == taskID
if event[3] == true then

 print("Task " .. event[2] .. " succeeded:", table.unpack(event, 4))
else
print("Task " .. event[2] .. " failed: " .. event[4])
end
See also
•
commands.execAsync
To run a command which fires a task_complete event.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
speaker_audio_empty
Return Values
1. string
: The event name.
2. string
: The name of the speaker which is available to play more audio.
Example
This uses io.lines to read audio data in blocks of 16KiB from "example_song.dfpwm", and then attempts
to play it using speaker.playAudio. If the speaker's buffer is full, it waits for an event and tries again.
local dfpwm = require("cc.audio.dfpwm")
local speaker = peripheral.find("speaker")
local decoder = dfpwm.make_decoder()
for chunk in io.lines("data/example.dfpwm", 16 * 1024) do
local buffer = decoder(chunk)
while not speaker.playAudio(buffer) do
os.pullEvent("speaker_audio_empty")
end
end

See also
•
speaker.playAudio
To play audio using the speaker
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
redstone
The redstone event is fired whenever any redstone inputs on the computer or relay change.
Return values
1. string
: The event name.
Example
Prints a message when a redstone input changes:
while true do
os.pullEvent("redstone")
print("A redstone input has changed!")
end
See also
•
The
redstone
API on computers
•
The
redstone_relay
peripheral
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
rednet_message
The rednet_message event is fired when a message is sent over Rednet.
This event is usually handled by rednet.receive, but it can also be pulled manually.
rednet_message events are sent by rednet.run in the top-level coroutine in response to
modem_message events. A rednet_message event is always preceded by a modem_message event. They
are generated inside CraftOS rather than being sent by the ComputerCraft machine.
Return Values
1. string
: The event name.
2. number: The ID of the sending computer.
3. any: The message sent.
4. string
|nil: The protocol of the message, if provided.
Example
Prints a message when one is sent:
while true do
local event, sender, message, protocol = os.pullEvent("rednet_message")
if protocol ~= nil then
print("Received message from " .. sender .. " with protocol " .. protocol .. " and message
" .. tostring(message))

 else
print("Received message from " .. sender .. " with message " .. tostring(message))
end
end
See also
•
modem_message
For raw modem messages sent outside of Rednet.
•
rednet.receive
To wait for a Rednet message with an optional timeout and protocol filter.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
peripheral_detach
The peripheral_detach event is fired when a peripheral is detached from a side or from a modem.
Return Values
1. string
: The event name.
2. string
: The side the peripheral was detached from.
Example
Prints a message when a peripheral is detached:
while true do
local event, side = os.pullEvent("peripheral_detach")
print("A peripheral was detached on side " .. side)
end
See also
•
peripheral
For the event fired when a peripheral is attached.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
peripheral
The peripheral event is fired when a peripheral is attached on a side or to a modem.
Return Values
1. string
: The event name.
2. string
: The side the peripheral was attached to.
Example
Prints a message when a peripheral is attached:
while true do
local event, side = os.pullEvent("peripheral")
print("A peripheral was attached on side " .. side)
end
See also
•
peripheral_detach
For the event fired when a peripheral is detached.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
paste
The paste event is fired when text is pasted into the computer through Ctrl-V (or
V on Mac).
⌘
Return values
1. string
: The event name.
2. string
The text that was pasted.
Example
Prints pasted text:
while true do
local event, text = os.pullEvent("paste")
print('"' .. text .. '" was pasted')
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
mouse_up
This event is fired when a mouse button is released or a held mouse leaves the computer's terminal.
Return values
1. string
: The event name.
2. number: The mouse button that was released.
3. number: The X-coordinate of the mouse.
4. number: The Y-coordinate of the mouse.
Example
Prints the coordinates and button number whenever the mouse is released.
while true do
local event, button, x, y = os.pullEvent("mouse_up")
print(("The mouse button %s was released at %d, %d"):format(button, x, y))
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
mouse_scroll
This event is fired when a mouse wheel is scrolled in the terminal.
Return values
1. string
: The event name.
2. number: The direction of the scroll. (-1 = up, 1 = down)
3. number: The X-coordinate of the mouse when scrolling.
4. number: The Y-coordinate of the mouse when scrolling.
Example
Prints the direction of each scroll, and the position of the mouse at the time.
while true do
local event, dir, x, y = os.pullEvent("mouse_scroll")
print(("The mouse was scrolled in direction %s at %d, %d"):format(dir, x, y))
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
mouse_drag
This event is fired every time the mouse is moved while a mouse button is being held.
Return values
1. string
: The event name.
2. number: The mouse button that is being pressed.
3. number: The X-coordinate of the mouse.
4. number: The Y-coordinate of the mouse.
Example
Print the button and the coordinates whenever the mouse is dragged.
while true do
local event, button, x, y = os.pullEvent("mouse_drag")
print(("The mouse button %s was dragged at %d, %d"):format(button, x, y))
end
See also
•
mouse_click
For when a mouse button is initially pressed.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
mouse_click
This event is fired when the terminal is clicked with a mouse. This event is only fired on advanced computers
(including advanced turtles and pocket computers).
Return values
1. string
: The event name.
2. number: The mouse button that was clicked.
3. number: The X-coordinate of the click.
4. number: The Y-coordinate of the click.
Mouse buttons
Several mouse events (mouse_click, mouse_up, mouse_scroll) contain a "mouse button" code. This
takes a numerical value depending on which button on your mouse was last pressed when this event
occurred.
Button Code
Mouse Button
1
Left button
2
Right button
3
Middle button

Example
Print the button and the coordinates whenever the mouse is clicked.
while true do
local event, button, x, y = os.pullEvent("mouse_click")
print(("The mouse button %s was pressed at %d, %d"):format(button, x, y))
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
monitor_touch
The monitor_touch event is fired when an adjacent or networked Advanced Monitor is right-clicked.
Return Values
1. string
: The event name.
2. string
: The side or network ID of the monitor that was touched.
3. number: The X coordinate of the touch, in characters.
4. number: The Y coordinate of the touch, in characters.
Example
Prints a message when a monitor is touched:
while true do
local event, side, x, y = os.pullEvent("monitor_touch")
print("The monitor on side " .. side .. " was touched at (" .. x .. ", " .. y .. ")")
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
monitor_resize
The monitor_resize event is fired when an adjacent or networked monitor's size is changed.
Return Values
1. string
: The event name.
2. string
: The side or network ID of the monitor that was resized.
Example
Prints a message when a monitor is resized:
while true do
local event, side = os.pullEvent("monitor_resize")
print("The monitor on side " .. side .. " was resized.")
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
modem_message
The modem_message event is fired when a message is received on an open channel on any modem.
Return Values
1. string
: The event name.
2. string
: The side of the modem that received the message.
3. number: The channel that the message was sent on.
4. number: The reply channel set by the sender.
5. any: The message as sent by the sender.
6. number|nil: The distance between the sender and the receiver in blocks, or nil if the message was
sent between dimensions.
Example
Wraps a modem peripheral, opens channel 0 for listening, and prints all received messages.
local modem = peripheral.find("modem") or error("No modem attached", 0)
modem.open(0)
while true do
local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
print(("Message received on side %s on channel %d (reply to %d) from %f blocks away with
message %s"):format(
side, channel, replyChannel, distance, tostring(message)

 ))
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
key_up
Fired whenever a key is released (or the terminal is closed while a key was being pressed).
This event returns a numerical "key code" (for instance, F1 is 290). This value may vary between versions
and so it is recommended to use the constants in the keys API rather than hard coding numeric values.
Return values
1. string
: The event name.
2. number: The numerical key value of the key pressed.
Example
Prints each key released on the keyboard whenever a key_up event is fired.
while true do
local event, key = os.pullEvent("key_up")
local name = keys.getName(key) or "unknown key"
print(name .. " was released.")
end
See also
•
keys
For a lookup table of the given keys.

Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
key
This event is fired when any key is pressed while the terminal is focused.
This event returns a numerical "key code" (for instance, F1 is 290). This value may vary between versions
and so it is recommended to use the constants in the keys API rather than hard coding numeric values.
If the button pressed represented a printable character, then the key event will be followed immediately by a
char event. If you are consuming text input, use a char event instead!
Return values
1. string
: The event name.
2. number: The numerical key value of the key pressed.
3. boolean: Whether the key event was generated while holding the key (true), rather than pressing it
the first time (false).
Example
Prints each key when the user presses it, and if the key is being held.
while true do
local event, key, is_held = os.pullEvent("key")
print(("%s held=%s"):format(keys.getName(key), is_held))
end

Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
http_success
The http_success event is fired when an HTTP request returns successfully.
This event is normally handled inside http.get and http.post, but it can still be seen when using
http.request.
Return Values
1. string
: The event name.
2. string
: The URL of the site requested.
3. http.Response
: The successful HTTP response.
Example
Prints the content of a website (this may fail if the request fails):
local myURL = "https://tweaked.cc/"
http.request(myURL)
local event, url, handle
repeat
event, url, handle = os.pullEvent("http_success")
until url == myURL
print("Contents of " .. url .. ":")
print(handle.readAll())
handle.close()

See also
•
http.request
To make an HTTP request.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
http_failure
The http_failure event is fired when an HTTP request fails.
This event is normally handled inside http.get and http.post, but it can still be seen when using
http.request.
Return Values
1. string
: The event name.
2. string
: The URL of the site requested.
3. string
: An error describing the failure.
4. http.Response
|nil: A response handle if the connection succeeded, but the server's response
indicated failure.
Example
Prints an error why the website cannot be contacted:
local myURL = "https://does.not.exist.tweaked.cc"
http.request(myURL)
local event, url, err
repeat
event, url, err = os.pullEvent("http_failure")
until url == myURL
print("The URL " .. url .. " could not be reached: " .. err)

Prints the contents of a webpage that does not exist:
local myURL = "https://tweaked.cc/this/does/not/exist"
http.request(myURL)
local event, url, err, handle
repeat
event, url, err, handle = os.pullEvent("http_failure")
until url == myURL
print("The URL " .. url .. " could not be reached: " .. err)
print(handle.getResponseCode())
handle.close()
See also
•
http.request
To send an HTTP request.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
http_check
The http_check event is fired when a URL check finishes.
This event is normally handled inside http.checkURL, but it can still be seen when using
http.checkURLAsync.
Return Values
1. string
: The event name.
2. string
: The URL requested to be checked.
3. boolean: Whether the check succeeded.
4. string
|nil: If the check failed, a reason explaining why the check failed.
See also
•
http.checkURLAsync
To check a URL asynchronously.
Last updated on 2024-11-19

☰
Types
•
TransferredFiles
•
TransferredFile
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
file_transfer
The file_transfer event is queued when a user drags-and-drops a file on an open computer.
This event contains a single argument of type TransferredFiles, which can be used to get the files to be
transferred. Each file returned is a binary file handle with an additional getName method.
Return values
1. string
: The event name
2. TransferredFiles
: The list of transferred files.
Example
Waits for a user to drop files on top of the computer, then prints the list of files and the size of each file.
local _, files = os.pullEvent("file_transfer")
for _, file in ipairs(files.getFiles()) do
-- Seek to the end of the file to get its size, then go back to the beginning.
local size = file.seek("end")

 file.seek("set", 0)
print(file.getName() .. " " .. size)
end
Example
Save each transferred file to the computer's storage.
local _, files = os.pullEvent("file_transfer")
for _, file in ipairs(files.getFiles()) do
local handle = fs.open(file.getName(), "wb")
handle.write(file.readAll())
handle.close()
file.close()
end
Changes
•
New in version 1.101.0
Types
TransferredFiles
A list of files that have been transferred to this computer.
TransferredFiles.getFiles()Source
All the files that are being transferred to this computer.
Returns
1. { file_transfer.TransferredFile... } The list of files.
TransferredFile
A binary file handle that has been transferred to this computer.
This inherits all methods of binary file handles, meaning you can use the standard read functions to access
the contents of the file.
See also
•
fs.ReadHandle
TransferredFile.getName()Source
Get the name of this file being transferred.
Returns
1. string
The file's name.

Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
disk_eject
The disk_eject event is fired when a disk is removed from an adjacent or networked disk drive.
Return Values
1. string
: The event name.
2. string
: The side of the disk drive that had a disk removed.
Example
Prints a message when a disk is removed:
while true do
local event, side = os.pullEvent("disk_eject")
print("Removed a disk on side " .. side)
end
See also
•
disk
For the event sent when a disk is inserted.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
disk
The disk event is fired when a disk is inserted into an adjacent or networked disk drive.
Return Values
1. string
: The event name.
2. string
: The side of the disk drive that had a disk inserted.
Example
Prints a message when a disk is inserted:
while true do
local event, side = os.pullEvent("disk")
print("Inserted a disk on side " .. side)
end
See also
•
disk_eject
For the event sent when a disk is removed.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
computer_command
The computer_command event is fired when the /computercraft queue command is run for the current
computer.
Return Values
1. string
: The event name.
2. string
…: The arguments passed to the command.
Example
Prints the contents of messages sent:
while true do
local event = {os.pullEvent("computer_command")}
print("Received message:", table.unpack(event, 2))
end
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
char
The char event is fired when a character is typed on the keyboard.
The char event is different to a key press. Sometimes multiple key presses may result in one character being
typed (for instance, on some European keyboards). Similarly, some keys (e.g. Ctrl) do not have any
corresponding character. The key should be used if you want to listen to key presses themselves.
Return values
1. string
: The event name.
2. string
: The string representing the character that was pressed.
Example
Prints each character the user presses:
while true do
local event, character = os.pullEvent("char")
print(character .. " was pressed.")
end
See also
•
key
To listen to any key press.

Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
alarm
The alarm event is fired when an alarm started with os.setAlarm completes.
Return Values
1. string
: The event name.
2. number: The ID of the alarm that finished.
Example
Starts a timer and then waits for it to complete.
local alarm_id = os.setAlarm(os.time() + 0.05)
local event, id
repeat
event, id = os.pullEvent("alarm")
until id == alarm_id
print("Alarm with ID " .. id .. " was fired")
See also
•
os.setAlarm
To start an alarm.
Last updated on 2024-11-19

☰
Contents
•
size
•
list
•
getItemDetail
•
getItemLimit
•
pushItems
•
pullItems
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
inventory
Methods for interacting with inventories.
Changes
•
New in version 1.94.0
size()
Get the size of this inventory.
list()
List all items in this inventory.
getItemDetail(slot)
Get detailed information about an item.
getItemLimit(slot)
Get the maximum number of items which can be
stored in this slot.

pushItems(toName, fromSlot [, limit [,
toSlot]])
Push items from one inventory to another connected
one.
pullItems(fromName, fromSlot [, limit
[, toSlot]])
Pull items from a connected inventory into this one.
size()Source
Get the size of this inventory.
Returns
1. number The number of slots in this inventory.
list()Source
List all items in this inventory. This returns a table, with an entry for each slot.
Each item in the inventory is represented by a table containing some basic information, much like
turtle.getItemDetail includes. More information can be fetched with getItemDetail. The
table contains the item name, the count and an a (potentially nil) hash of the item's nbt. This NBT
data doesn't contain anything useful, but allows you to distinguish identical items.
The returned table is sparse, and so empty slots will be nil - it is recommended to loop over using
pairs rather than ipairs.
Returns
1. { table | nil... } All items in this inventory.
Usage
•
Find an adjacent chest and print all items in it.
local chest = peripheral.find("minecraft:chest")
for slot, item in pairs(chest.list()) do
print(("%d x %s in slot %d"):format(item.count, item.name, slot))
end
getItemDetail(slot)Source
Get detailed information about an item.
The returned information contains the same information as each item in list, as well as additional
details like the display name (displayName), and item and item durability (damage, maxDamage,
durability).
Some items include more information (such as enchantments) - it is recommended to print it out using
textutils.serialize or in the Lua REPL, to explore what is available.
🛈 Deprecated fields
Older versions of CC: Tweaked exposed an itemGroups field, listing the creative tabs an item was
available under. This information is no longer available on more recent versions of the game, and so
this field will always be empty. Do not use this field in new code!

Parameters
1. slot number The slot to get information about.
Returns
1. table
Information about the item in this slot, or nil if not present.
Throws
•
If the slot is out of range.
Usage
•
Print some information about the first in a chest.
local chest = peripheral.find("minecraft:chest")
local item = chest.getItemDetail(1)
if not item then print("No item") return end
print(("%s (%s)"):format(item.displayName, item.name))
print(("Count: %d/%d"):format(item.count, item.maxCount))
if item.damage then
print(("Damage: %d/%d"):format(item.damage, item.maxDamage))
end
getItemLimit(slot)Source
Get the maximum number of items which can be stored in this slot.
Typically this will be limited to 64 items. However, some inventories (such as barrels or caches) can
store hundreds or thousands of items in one slot.
Parameters
1. slot number The slot
Returns
1. number The maximum number of items in this slot.
Throws
•
If the slot is out of range.
Usage
•
Count the maximum number of items an adjacent chest can hold.
local chest = peripheral.find("minecraft:chest")
local total = 0
for i = 1, chest.size() do
total = total + chest.getItemLimit(i)

end
print(total)
Changes
•
New in version 1.96.0
pushItems(toName, fromSlot [, limit [, toSlot]])Source
Push items from one inventory to another connected one.
This allows you to push an item in an inventory to another inventory on the same wired network. Both
inventories must attached to wired modems which are connected via a cable.
Parameters
1. toName string The name of the peripheral/inventory to push to. This is the string given to
peripheral.wrap, and displayed by the wired modem.
2. fromSlot number The slot in the current inventory to move items to.
3. limit? number The maximum number of items to move. Defaults to the current stack limit.
4. toSlot? number The slot in the target inventory to move to. If not given, the item will be
inserted into any slot.
Returns
1. number The number of transferred items.
Throws
•
If the peripheral to transfer to doesn't exist or isn't an inventory.
•
If either source or destination slot is out of range.
Usage
•
Wrap two chests, and push an item from one to another.
local chest_a = peripheral.wrap("minecraft:chest_0")
local chest_b = peripheral.wrap("minecraft:chest_1")
chest_a.pushItems(peripheral.getName(chest_b), 1)
See also
•
peripheral.getName
Allows you to get the name of a wrapped peripheral.
pullItems(fromName, fromSlot [, limit [, toSlot]])Source
Pull items from a connected inventory into this one.
This allows you to transfer items between inventories on the same wired network. Both this and the
source inventory must attached to wired modems which are connected via a cable.

Parameters
1. fromName string The name of the peripheral/inventory to pull from. This is the string given
to peripheral.wrap, and displayed by the wired modem.
2. fromSlot number The slot in the source inventory to move items from.
3. limit? number The maximum number of items to move. Defaults to the current stack limit.
4. toSlot? number The slot in current inventory to move to. If not given, the item will be
inserted into any slot.
Returns
1. number The number of transferred items.
Throws
•
If the peripheral to transfer to doesn't exist or isn't an inventory.
•
If either source or destination slot is out of range.
Usage
•
Wrap two chests, and push an item from one to another.
local chest_a = peripheral.wrap("minecraft:chest_0")
local chest_b = peripheral.wrap("minecraft:chest_1")
chest_a.pullItems(peripheral.getName(chest_b), 1)
See also
•
peripheral.getName
Allows you to get the name of a wrapped peripheral.
Last updated on 2024-11-19

☰
Contents
•
tanks
•
pushFluid
•
pullFluid
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect

•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message

•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
fluid_storage
Methods for interacting with tanks and other fluid storage blocks.
Changes
•
New in version 1.94.0
tanks()
Get all "tanks" in this fluid storage.
pushFluid(toName [, limit [,
fluidName]])
Move a fluid from one fluid container to another
connected one.
pullFluid(fromName [, limit [,
fluidName]])
Move a fluid from a connected fluid container into this
one.
tanks()Source
Get all "tanks" in this fluid storage.
Each tank either contains some amount of fluid or is empty. Tanks with fluids inside will return some
basic information about the fluid, including its name and amount.

The returned table is sparse, and so empty tanks will be nil - it is recommended to loop over using
pairs rather than ipairs.
Returns
1. { table | nil... } All tanks in this fluid storage.
pushFluid(toName [, limit [, fluidName]])Source
Move a fluid from one fluid container to another connected one.
This allows you to pull fluid in the current fluid container to another container on the same wired
network. Both containers must attached to wired modems which are connected via a cable.
Parameters
1. toName string The name of the peripheral/container to push to. This is the string given to
peripheral.wrap, and displayed by the wired modem.
2. limit? number The maximum amount of fluid to move.
3. fluidName? string The fluid to move. If not given, an arbitrary fluid will be chosen.
Returns
1. number The amount of moved fluid.
Throws
•
If the peripheral to transfer to doesn't exist or isn't an fluid container.
See also
•
peripheral.getName
Allows you to get the name of a wrapped peripheral.
pullFluid(fromName [, limit [, fluidName]])Source
Move a fluid from a connected fluid container into this one.
This allows you to pull fluid in the current fluid container from another container on the same wired
network. Both containers must be attached to wired modems which are connected via a cable.
Parameters
1. fromName string The name of the peripheral/container to push to. This is the string given to
peripheral.wrap, and displayed by the wired modem.
2. limit? number The maximum amount of fluid to move.
3. fluidName? string The fluid to move. If not given, an arbitrary fluid will be chosen.
Returns
1. number The amount of moved fluid.

Throws
•
If the peripheral to transfer to doesn't exist or isn't an fluid container.
See also
•
peripheral.getName
Allows you to get the name of a wrapped peripheral.
Last updated on 2024-11-19

☰
Contents
•
getEnergy
•
getEnergyCapacity
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
energy_storage
Methods for interacting with blocks which store energy.
This works with energy storage blocks, as well as generators and machines which consume energy.
🛈 note
Due to limitations with Forge's energy API, it is not possible to measure throughput (i.e. FE used/generated
per tick).
Changes
•
New in version 1.94.0
getEnergy()
Get the energy of this block.
getEnergyCapacity() Get the maximum amount of energy this block can store.
getEnergy()Source
Get the energy of this block.

Returns
1. number The energy stored in this block, in FE.
getEnergyCapacity()Source
Get the maximum amount of energy this block can store.
Returns
1. number The energy capacity of this block.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Reusing code with require
A library is a collection of useful functions and other definitions which is stored separately to your main
program. You might want to create a library because you have some functions which are used in multiple
programs, or just to split your program into multiple more modular files.
Let's say we want to create a small library to make working with the terminal a little easier. We'll provide two
functions: reset, which clears the terminal and sets the cursor to (1, 1), and write_center, which prints
some text in the middle of the screen.
Start off by creating a file called more_term.lua:
local function reset()
term.clear()
term.setCursorPos(1, 1)
end
local function write_center(text)
local x, y = term.getCursorPos()
local width, height = term.getSize()
term.setCursorPos(math.floor((width - #text) / 2) + 1, y)
term.write(text)
end
return { reset = reset, write_center = write_center }

Now, what's going on here? We define our two functions as one might expect, and then at the bottom return a
table with the two functions. When we require this library, this table is what is returned. With that, we can
then call the original functions. Now create a new file, with the following:
local more_term = require("more_term")
more_term.reset()
more_term.write_center("Hello, world!")
When run, this'll clear the screen and print some text in the middle of the first line.
require in depth
While the previous section is a good introduction to how require operates, there are a couple of remaining
points which are worth mentioning for more advanced usage.
Libraries can return anything
In our above example, we return a table containing the functions we want to expose. However, it's worth
pointing out that you can return ''anything'' from your library - a table, a function or even just a string!
require treats them all the same, and just returns whatever your library provides.
Module resolution and the package path
In the above examples, we defined our library in a file, and require read from it. While this is what you'll
do most of the time, it is possible to make require look elsewhere for your library, such as downloading
from a website or loading from an in-memory library store.
As a result, the module name you pass to require doesn't correspond to a file path. One common mistake is
to load code from a sub-directory using require("folder/library") or even
require("folder/library.lua"), neither of which will do quite what you expect.
When loading libraries (also referred to as modules) from files, require searches along the module path. By
default, this looks something like:
•
?.lua
•
?/init.lua
•
/rom/modules/main/?.lua
•
etc...
When you call require("my_library"), require replaces the ? in each element of the path with your
module name, and checks if the file exists. In this case, we'd look for my_library.lua,
my_library/init.lua, /rom/modules/main/my_library.lua and so on. Note that this works
relative to the current program, so if your program is actually called folder/program, then we'll look for
folder/my_library.lua, etc...
One other caveat is loading libraries from sub-directories. For instance, say we have a file
my/fancy/library.lua. This can be loaded by using require("my.fancy.library") - the '.'s are
replaced with '/' before we start looking for the library.
External links
There are several external resources which go into require in a little more detail:

•
The Lua Module tutorial on the Lua wiki.
•
Lua's manual section on
require
.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Playing audio with speakers
CC: Tweaked's speaker peripheral provides a powerful way to play any audio you like with the
speaker.playAudio method. However, for people unfamiliar with digital audio, it's not the most intuitive
thing to use. This guide provides an introduction to digital audio, demonstrates how to play music with CC:
Tweaked's speakers, and then briefly discusses the more complex topic of audio processing.
A short introduction to digital audio
When sound is recorded it is captured as an analogue signal, effectively the electrical version of a sound
wave. However, this signal is continuous, and so can't be used directly by a computer. Instead, we measure
(or sample) the amplitude of the wave many times a second and then quantise that amplitude, rounding it to
the nearest representable value.
This representation of sound - a long, uniformally sampled list of amplitudes is referred to as Pulse-code
Modulation (PCM). PCM can be thought of as the "standard" audio format, as it's incredibly easy to work
with. For instance, to mix two pieces of audio together, you can just add samples from the two tracks together
and take the average.
CC: Tweaked's speakers also work with PCM audio. It plays back 48,000 samples a second, where each
sample is an integer between -128 and 127. This is more commonly referred to as 48kHz and an 8-bit
resolution.

Let's now look at a quick example. We're going to generate a Sine Wave at 220Hz, which sounds like a low
monotonous hum. First we wrap our speaker peripheral, and then we fill a table (also referred to as a buffer)
with 128×1024 samples - this is the maximum number of samples a speaker can accept in one go.
In order to fill this buffer, we need to do a little maths. We want to play 220 sine waves each second, where
each sine wave completes a full oscillation in 2π "units". This means one seconds worth of audio is 2×π×220
"units" long. We then need to split this into 48k samples, basically meaning for each sample we move
2×π×220/48k "along" the sine curve.
local speaker = peripheral.find("speaker")
local buffer = {}
local t, dt = 0, 2 * math.pi * 220 / 48000
for i = 1, 128 * 1024 do
buffer[i] = math.floor(math.sin(t) * 127)
t = (t + dt) % (math.pi * 2)
end
speaker.playAudio(buffer)
Streaming audio
You might notice that the above snippet only generates a short bit of audio - 2.7s seconds to be precise. While
we could try increasing the number of loop iterations, we'll get an error when we try to play it through the
speaker: the sound buffer is too large for it to handle.
Our 2.7 seconds of audio is stored in a table with over 130 thousand elements. If we wanted to play a full
minute of sine waves (and why wouldn't you?), you'd need a table with almost 3 million. Suddenly you find
these numbers adding up very quickly, and these tables take up more and more memory.
Instead of building our entire song (well, sine wave) in one go, we can produce it in small batches, each of
which get passed off to speaker.playAudio when the time is right. This allows us to build a stream of
audio, where we read chunks of audio one at a time (either from a file or a tone generator like above), do
some optional processing to each one, and then play them.
Let's adapt our example from above to do that instead.
local speaker = peripheral.find("speaker")
local t, dt = 0, 2 * math.pi * 220 / 48000
while true do
local buffer = {}
for i = 1, 16 * 1024 * 8 do
buffer[i] = math.floor(math.sin(t) * 127)
t = (t + dt) % (math.pi * 2)
end
while not speaker.playAudio(buffer) do
os.pullEvent("speaker_audio_empty")
end
end
It looks pretty similar to before, aside from we've wrapped the generation and playing code in a while loop,
and added a rather odd loop with speaker.playAudio and os.pullEvent.

Let's talk about this loop, why do we need to keep calling speaker.playAudio? Remember that what
we're trying to do here is avoid keeping too much audio in memory at once. However, if we're generating
audio quicker than the speakers can play it, we're not helping at all - all this audio is still hanging around
waiting to be played!
In order to avoid this, the speaker rejects any new chunks of audio if its backlog is too large. When this
happens, speaker.playAudio returns false. Once enough audio has played, and the backlog has been
reduced, a speaker_audio_empty event is queued, and we can try to play our chunk once more.
Storing audio
PCM is a fantastic way of representing audio when we want to manipulate it, but it's not very efficient when
we want to store it to disk. Compare the size of a WAV file (which uses PCM) to an equivalent MP3, it's
often 5 times the size. Instead, we store audio in special formats (or codecs) and then convert them to PCM
when we need to do processing on them.
Modern audio codecs use some incredibly impressive techniques to compress the audio as much as possible
while preserving sound quality. However, due to CC: Tweaked's limited processing power, it's not really
possible to use these from your computer. Instead, we need something much simpler.
DFPWM (Dynamic Filter Pulse Width Modulation) is the de facto standard audio format of the
ComputerCraft (and OpenComputers) world. Originally popularised by the addon mod Computronics, CC:T
now has built-in support for it with the cc.audio.dfpwm module. This allows you to read DFPWM files
from disk, decode them to PCM, and then play them using the speaker.
Let's dive in with an example, and we'll explain things afterwards:
local dfpwm = require("cc.audio.dfpwm")
local speaker = peripheral.find("speaker")
local decoder = dfpwm.make_decoder()
for chunk in io.lines("data/example.dfpwm", 16 * 1024) do
local buffer = decoder(chunk)
while not speaker.playAudio(buffer) do
os.pullEvent("speaker_audio_empty")
end
end
Once again, we see the speaker.playAudio/speaker_audio_empty loop. However, the rest of the
program is a little different.
First, we require the dfpwm module and call cc.audio.dfpwm.make_decoder to construct a new
decoder. This decoder accepts blocks of DFPWM data and converts it to a list of 8-bit amplitudes, which we
can then play with our speaker.
As mentioned above, speaker.playAudio accepts at most 128×1024 samples in one go. DFPWM uses a
single bit for each sample, which means we want to process our audio in chunks of 16×1024 bytes (16KiB).
In order to do this, we use io.lines, which provides a nice way to loop over chunks of a file. You can of
course just use fs.open and fs.ReadHandle.read if you prefer.

Processing audio
As mentioned near the beginning of this guide, PCM audio is pretty easy to work with as it's just a list of
amplitudes. You can mix together samples from different streams by adding their amplitudes, change the rate
of playback by removing samples, etc...
Let's put together a small demonstration here. We're going to add a small delay effect to the song above, so
that you hear a faint echo a second and a half later.
In order to do this, we'll follow a format similar to the previous example, decoding the audio and then
playing it. However, we'll also add some new logic between those two steps, which loops over every sample
in our chunk of audio, and adds the sample from 1.5 seconds ago to it.
For this, we'll need to keep track of the last 72k samples - exactly 1.5 seconds worth of audio. We can do this
using a Ring Buffer, which helps makes things a little more efficient.
local dfpwm = require("cc.audio.dfpwm")
local speaker = peripheral.find("speaker")
-- Speakers play at 48kHz, so 1.5 seconds is 72k samples. We first fill our buffer
-- with 0s, as there's nothing to echo at the start of the track!
local samples_i, samples_n = 1, 48000 * 1.5
local samples = {}
for i = 1, samples_n do samples[i] = 0 end
local decoder = dfpwm.make_decoder()
for chunk in io.lines("data/example.dfpwm", 16 * 1024) do
local buffer = decoder(chunk)
for i = 1, #buffer do
local original_value = buffer[i]
-- Replace this sample with its current amplitude plus the amplitude from 1.5 seconds
ago.
-- We scale both to ensure the resulting value is still between -128 and 127.
buffer[i] = original_value * 0.6 + samples[samples_i] * 0.4
-- Now store the current sample, and move the "head" of our ring buffer forward one
place.
samples[samples_i] = original_value
samples_i = samples_i + 1
if samples_i > samples_n then samples_i = 1 end
end
while not speaker.playAudio(buffer) do
os.pullEvent("speaker_audio_empty")
end
-- The audio processing above can be quite slow and preparing the first batch of audio
-- may timeout the computer. We sleep to avoid this.
-- There's definitely better ways of handling this - this is just an example!
sleep(0.05)
end
🛈 Confused?
Don't worry if you don't understand this example. It's quite advanced, and does use some ideas that this guide
doesn't cover. That said, don't be afraid to ask the community for help.

It's worth noting that the examples of audio processing we've mentioned here are about manipulating the
amplitude of the wave. If you wanted to modify the frequency (for instance, shifting the pitch), things get
rather more complex. For this, you'd need to use the Fast Fourier transform to convert the stream of
amplitudes to frequencies, process those, and then convert them back to amplitudes.
This is, I'm afraid, left as an exercise to the reader.
See also
•
speaker.playAudio
Play PCM audio using a speaker.
•
cc.audio.dfpwm
Provides utilities for encoding and decoding DFPWM files.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Allowing access to local IPs
By default, ComputerCraft blocks access to local IP addresses for security. This means you can't normally
access any HTTP server running on your computer. However, this may be useful for testing programs
without having a remote server. You can unblock these IPs in the ComputerCraft config.
•
Minecraft 1.13 and later, CC:T 1.87.0 and later
•
Minecraft 1.13 and later, CC:T 1.86.2 and earlier
•
Minecraft 1.12.2 and earlier
Minecraft 1.13 and later, CC:T 1.87.0 and later
The configuration file can be located at serverconfig/computercraft-server.toml inside the world
folder on either single-player or multiplayer. Look for lines that look like this:
#A list of rules which control behaviour of the "http" API for specific domains or IPs.
#Each rule is an item with a 'host' to match against, and a series of properties. The host may
be a domain name ("pastebin.com"),
#wildcard ("*.pastebin.com") or CIDR notation ("127.0.0.0/8"). If no rules, the domain is
blocked.
[[http.rules]]
host = "$private"
action = "deny"

On 1.95.0 and later, this will be a single entry with host = "$private". On earlier versions, this will be a
number of [[http.rules]] with various IP addresses. You will want to remove all of the
[[http.rules]] entries that have action = "deny". Then save the file and relaunch Minecraft
(Server).
Here's what it should look like after removing:
#A list of rules which control behaviour of the "http" API for specific domains or IPs.
#Each rule is an item with a 'host' to match against, and a series of properties. The host may
be a domain name ("pastebin.com"),
#wildcard ("*.pastebin.com") or CIDR notation ("127.0.0.0/8"). If no rules, the domain is
blocked.
[[http.rules]]
#The maximum size (in bytes) that a computer can send or receive in one websocket packet.
max_websocket_message = 131072
host = "*"
#The maximum size (in bytes) that a computer can upload in a single request. This includes
headers and POST text.
max_upload = 4194304
action = "allow"
#The maximum size (in bytes) that a computer can download in a single request. Note that
responses may receive more data than allowed, but this data will not be returned to the client.
max_download = 16777216
#The period of time (in milliseconds) to wait before a HTTP request times out. Set to 0 for
unlimited.
timeout = 30000
Minecraft 1.13 and later, CC:T 1.86.2 and earlier
The configuration file for singleplayer is at .minecraft/config/computercraft-common.toml. Look
for lines that look like this:
#A list of wildcards for domains or IP ranges that cannot be accessed through the "http" API on
Computers.
#If this is empty then all whitelisted domains will be accessible. Example: "*.github.com" will
block access to all subdomains of github.com.
#You can use domain names ("pastebin.com"), wildcards ("*.pastebin.com") or CIDR notation
("127.0.0.0/8").
blacklist = ["127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fd00::/8"]
Remove everything inside the array, leaving the last line as blacklist = []. Then save the file and
relaunch Minecraft.
Here's what it should look like after removing:
#A list of wildcards for domains or IP ranges that cannot be accessed through the "http" API on
Computers.
#If this is empty then all whitelisted domains will be accessible. Example: "*.github.com" will
block access to all subdomains of github.com.
#You can use domain names ("pastebin.com"), wildcards ("*.pastebin.com") or CIDR notation
("127.0.0.0/8").
blacklist = []

Minecraft 1.12.2 and earlier
On singleplayer, the configuration file is located at .minecraft\config\ComputerCraft.cfg. On
multiplayer, the configuration file is located at <server folder>\config\ComputerCraft.cfg. Look
for lines that look like this:
# A list of wildcards for domains or IP ranges that cannot be accessed through the "http" API
on Computers.
# If this is empty then all explicitly allowed domains will be accessible. Example:
"*.github.com" will block access to all subdomains of github.com.
# You can use domain names ("pastebin.com"), wildcards ("*.pastebin.com") or CIDR notation
("127.0.0.0/8").
S:blocked_domains <
127.0.0.0/8
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
fd00::/8
>
Delete everything between the <>, leaving the last line as S:blocked_domains = <>. Then save the file
and relaunch Minecraft (Server).
Here's what it should look like after removing:
# A list of wildcards for domains or IP ranges that cannot be accessed through the "http" API
on Computers.
# If this is empty then all explicitly allowed domains will be accessible. Example:
"*.github.com" will block access to all subdomains of github.com.
# You can use domain names ("pastebin.com"), wildcards ("*.pastebin.com") or CIDR notation
("127.0.0.0/8").
S:blocked_domains <>
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Setting up GPS
The gps API allows computers and turtles to find their current position using wireless modems.
In order to use GPS, you'll need to set up multiple GPS hosts. These are computers running the special gps
host program, which tell other computers the host's position. Several hosts running together are known as a
GPS constellation.
In order to give the best results, a GPS constellation needs at least four computers. More than four GPS hosts
per constellation is redundant, but it does not cause problems.

Building a GPS constellation
We are going to build our GPS constellation as shown in the image above. You will need 4 computers and
either 4 wireless modems or 4 ender modems. Try not to mix ender and wireless modems together as you
might get some odd behavior when your requesting computers are out of range.
Ender modems vs wireless modems
Ender modems have a very large range, which makes them very useful for setting up GPS hosts. If you do
this then you will likely only need one GPS constellation for the whole dimension (such as the Overworld or
Nether).
If you do use wireless modems then you may find that you need multiple GPS constellations to cover your
needs.
A computer needs a wireless or ender modem and to be in range of a GPS constellation that is in the same
dimension as it to use the GPS API. The reason for this is that ComputerCraft mimics real-life GPS by
making use of the distance parameter of modem messages and some maths.
Locate where you want to place your GPS constellation. You will need an area at least 6 blocks high, 6
blocks wide, and 6 blocks deep (6x6x6). If you are using wireless modems then you may want to build your
constellation as high as you can because high altitude boosts modem message range and thus the radius that
your constellation covers.

The GPS constellation will only work when it is in a loaded chunk. If you want your constellation to always
be accessible, you may want to permanently load the chunk using a vanilla or modded chunk loader. Make
sure that your 6x6x6 area fits in a single chunk to reduce the number of chunks that need to be kept loaded.
Let's get started building the constellation! Place your first computer in one of the corners of your 6x6x6.
Remember which computer this is as other computers need to be placed relative to it. Place the second
computer 4 blocks above the first. Go back to your first computer and place your third computer 5 blocks in
front of your first computer, leaving 4 blocks of air between them. Finally for the fourth computer, go back to
your first computer and place it 5 blocks right of your first computer, leaving 4 blocks of air between them.
With all four computers placed within the 6x6x6, place one modem on top of each computer. You should
have 4 modems and 4 computers all within your 6x6x6 where each modem is attached to a computer and
each computer has a modem.
Currently your GPS constellation will not work, that's because each host is not aware that it's a GPS host. We
will fix this in the next section.
Configuring the constellation
Now that the structure of your constellation is built, we need to configure each host in it.
Go back to the first computer that you placed and create a startup file, by running edit startup.
Type the following code into the file:
shell.run("gps", "host", x, y, z)
Escape from the computer GUI and then press F3 to open Minecraft's debug screen and then look at the
computer (without opening the GUI). On the right of the screen about halfway down you should see an entry
labeled Targeted Block, the numbers correspond to the position of the block that you are looking at.
Replace x with the first number, y with the second number, and z with the third number.
For example, if I had a computer at x = 59, y = 5, z = -150, then my F3 debug screen entry would be Target
Block: 59, 5, -150 and I would change my startup file to this shell.run("gps", "host", 59,
5, -150).
To hide Minecraft's debug screen, press F3 again.
Create similar startup files for the other computers in your constellation, making sure to input the each
computer's own coordinates.
⚠ Modem messages come from the computer's position, not the modem's
Wireless modems transmit from the block that they are attached to not the block space that they occupy, the
coordinates that you input into your GPS host should be the position of the computer and not the position of
the modem.
Congratulations, your constellation is now fully set up! You can test it by placing another computer close by,
placing a wireless modem on it, and running the gps locate program (or calling the gps.locate
function).

🛈 Why use Minecraft's coordinates?
CC doesn't care if you use Minecraft's coordinate system, so long as all of the GPS hosts with overlapping
ranges use the same reference point (requesting computers will get confused if hosts have different reference
points). However, using MC's coordinate system does provide a nice standard to adopt server-wide. It also is
consistent with how command computers get their location, they use MC's command system to get their
block which returns that in MC's coordinate system.
Last updated on 2024-11-19

☰
Contents
•
make_encoder
•
encode
•
make_decoder
•
decode
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion

•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach

•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.audio.dfpwm
Convert between streams of DFPWM audio data and a list of amplitudes.
DFPWM (Dynamic Filter Pulse Width Modulation) is an audio codec designed by GreaseMonkey. It's a
relatively compact format compared to raw PCM data, only using 1 bit per sample, but is simple enough to
encode and decode in real time.
Typically DFPWM audio is read from the filesystem or a a web request as a string, and converted a format
suitable for speaker.playAudio.
Encoding and decoding files
This module exposes two key functions, make_decoder and make_encoder, which construct a new
decoder or encoder. The returned encoder/decoder is itself a function, which converts between the two kinds
of data.

These encoders and decoders have lots of hidden state, so you should be careful to use the same encoder or
decoder for a specific audio stream. Typically you will want to create a decoder for each stream of audio you
read, and an encoder for each one you write.
Converting audio to DFPWM
DFPWM is not a popular file format and so standard audio processing tools may not have an option to export
to it. Instead, you can convert audio files online using music.madefor.cc, the LionRay Wav Converter Java
application or FFmpeg 5.1 or later.
Usage
•
Reads "data/example.dfpwm" in chunks, decodes them and then doubles the speed of the audio. The
resulting audio is then re-encoded and saved to "speedy.dfpwm". This processed audio can then be
played with the speaker program.
local dfpwm = require("cc.audio.dfpwm")
local encoder = dfpwm.make_encoder()
local decoder = dfpwm.make_decoder()
local out = fs.open("speedy.dfpwm", "wb")
for input in io.lines("data/example.dfpwm", 16 * 1024 * 2) do
local decoded = decoder(input)
local output = {}
-- Read two samples at once and take the average.
for i = 1, #decoded, 2 do
local value_1, value_2 = decoded[i], decoded[i + 1]
output[(i + 1) / 2] = (value_1 + value_2) / 2
end
out.write(encoder(output))
sleep(0) -- This program takes a while to run, so we need to make sure we yield.
end
out.close()
See also
•
Playing audio with speakers
Gives a more general introduction to audio processing and the
speaker.
•
speaker.playAudio
To play the decoded audio data.
Changes
•
New in version 1.100.0
make_encoder() Create a new encoder for converting PCM audio data into DFPWM.
encode(input) A convenience function for encoding a complete file of audio at once.
make_decoder() Create a new decoder for converting DFPWM into PCM audio data.
decode(input) A convenience function for decoding a complete file of audio at once.
make_encoder()Source

Create a new encoder for converting PCM audio data into DFPWM.
The returned encoder is itself a function. This function accepts a table of amplitude data between -128
and 127 and returns the encoded DFPWM data.
⚠ Reusing encoders
Encoders have lots of internal state which tracks the state of the current stream. If you reuse an encoder
for multiple streams, or use different encoders for the same stream, the resulting audio may not sound
correct.
Returns
1. function(pcm: { number... }):string The encoder function
See also
•
encode
A helper function for encoding an entire file of audio at once.
encode(input)Source
A convenience function for encoding a complete file of audio at once.
This should only be used for complete pieces of audio. If you are writing multiple chunks to the same
place, you should use an encoder returned by make_encoder instead.
Parameters
1. input { number... } The table of amplitude data.
Returns
1. string
The encoded DFPWM data.
See also
•
make_encoder
make_decoder()Source
Create a new decoder for converting DFPWM into PCM audio data.
The returned decoder is itself a function. This function accepts a string and returns a table of
amplitudes, each value between -128 and 127.
⚠ Reusing decoders
Decoders have lots of internal state which tracks the state of the current stream. If you reuse an decoder
for multiple streams, or use different decoders for the same stream, the resulting audio may not sound
correct.
Returns
1. function(dfpwm: string):{ number... } The encoder function

Usage
•
Reads "data/example.dfpwm" in blocks of 16KiB (the speaker can accept a maximum of
128×1024 samples), decodes them and then plays them through the speaker.
local dfpwm = require "cc.audio.dfpwm"
local speaker = peripheral.find("speaker")
local decoder = dfpwm.make_decoder()
for input in io.lines("data/example.dfpwm", 16 * 1024) do
local decoded = decoder(input)
while not speaker.playAudio(decoded) do
os.pullEvent("speaker_audio_empty")
end
end
See also
•
decode
A helper function for decoding an entire file of audio at once.
decode(input)Source
A convenience function for decoding a complete file of audio at once.
This should only be used for short files. For larger files, one should read the file in chunks and process
it using make_decoder.
Parameters
1. input string The DFPWM data to convert.
Returns
1. { number... } The produced amplitude data.
See also
•
make_decoder
Last updated on 2024-11-19

☰
Contents
•
wrap
•
ensure_width
•
split
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect

•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message

•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.strings
Various utilities for working with strings and text.
See also
•
textutils
For additional string related utilities.
Changes
•
New in version 1.95.0
wrap(text [, width])
Wraps a block of text, so that each line fits within the
given width.
ensure_width(line [, width])
Makes the input string a fixed width.
split(str, deliminator [, plain=false
[, limit]])
Split a string into parts, each separated by a
deliminator.
wrap(text [, width])Source

Wraps a block of text, so that each line fits within the given width.
This may be useful if you want to wrap text before displaying it to a monitor or printer without
using print.
Parameters
1. text string The string to wrap.
2. width? number The width to constrain to, defaults to the width of the terminal.
Returns
1. { string... } The wrapped input string as a list of lines.
Usage
•
Wrap a string and write it to the terminal.
term.clear()
local lines = require "cc.strings".wrap("This is a long piece of text", 10)
for i = 1, #lines do
term.setCursorPos(1, i)
term.write(lines[i])
end
ensure_width(line [, width])Source
Makes the input string a fixed width. This either truncates it, or pads it with spaces.
Parameters
1. line string The string to normalise.
2. width? number The width to constrain to, defaults to the width of the terminal.
Returns
1. string
The string with a specific width.
Usage
•
require "cc.strings".ensure_width
("a short string", 20)
•
require "cc.strings".ensure_width
("a rather long string which is truncated", 20)
split(str, deliminator [, plain=false [, limit]])Source
Split a string into parts, each separated by a deliminator.
For instance, splitting the string "a b c" with the deliminator " ", would return a table with three
strings: "a", "b", and "c".
By default, the deliminator is given as a Lua pattern. Passing true to the plain argument will cause
the deliminator to be treated as a litteral string.

Parameters
1. str string The string to split.
2. deliminator string The pattern to split this string on.
3. plain? boolean = false Treat the deliminator as a plain string, rather than a pattern.
4. limit? number The maximum number of elements in the returned list.
Returns
1. { string... } The list of split strings.
Usage
•
Split a string into words.
require "cc.strings".split("This is a sentence.", "%s+")
•
Split a string by "-" into at most 3 elements.
require "cc.strings".split("a-separated-string-of-sorts", "-", true, 3)
See also
•
table.concat
To join strings together.
Changes
•
New in version 1.112.0
Last updated on 2024-11-19

☰
Contents
•
file
•
dir
•
dirOrFile
•
program
•
programWithArgs
•
help
•
choice
•
peripheral
•
side
•
setting
•
command
•
build
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils

•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize

•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.shell.completion
A collection of helper methods for working with shell completion.
Most programs may be completed using the build helper method, rather than manually switching on the
argument index.

Note, the helper functions within this module do not accept an argument index, and so are not directly usable
with the shell.setCompletionFunction. Instead, wrap them using build, or your own custom
function.
Usage
•
Register a completion handler for example.lua which prompts for a choice of options, followed by a
directory, and then multiple files.
local completion = require "cc.shell.completion"
local complete = completion.build(
{ completion.choice, { "get", "put" } },
completion.dir,
) { completion.file, many = true }
shell.setCompletionFunction("example.lua", complete)
read(nil, nil, shell.complete, "example ")
See also
•
cc.completion
For more general helpers, suitable for use with _G.read.
•
shell.setCompletionFunction
Changes
•
New in version 1.85.0
file(shell, text)
Complete the name of a file relative to the current working
directory.
dir(shell, text)
Complete the name of a directory relative to the current
working directory.
dirOrFile(shell, text, previous
[, add_space])
Complete the name of a file or directory relative to the current
working directory.
program(shell, text)
Complete the name of a program.
programWithArgs(shell, text,
previous, starting)
Complete arguments of a program.
help
Wraps help.completeTopic as a build compatible
function.
choice
Wraps cc.completion.choice as a build compatible
function.
peripheral
Wraps cc.completion.peripheral as a build
compatible function.
side
Wraps cc.completion.side as a build compatible
function.
setting
Wraps cc.completion.setting as a build compatible
function.
command
Wraps cc.completion.command as a build compatible
function.
build(...)
A helper function for building shell completion arguments.
file(shell, text)Source

Complete the name of a file relative to the current working directory.
Parameters
1. shell table The shell we're completing in.
2. text string Current text to complete.
Returns
1. { string... } A list of suffixes of matching files.
dir(shell, text)Source
Complete the name of a directory relative to the current working directory.
Parameters
1. shell table The shell we're completing in.
2. text string Current text to complete.
Returns
1. { string... } A list of suffixes of matching directories.
dirOrFile(shell, text, previous [, add_space])Source
Complete the name of a file or directory relative to the current working directory.
Parameters
1. shell table The shell we're completing in.
2. text string Current text to complete.
3. previous { string... } The shell arguments before this one.
4. add_space? boolean Whether to add a space after the completed item.
Returns
1. { string... } A list of suffixes of matching files and directories.
program(shell, text)Source
Complete the name of a program.
Parameters
1. shell table The shell we're completing in.
2. text string Current text to complete.
Returns
1. { string... } A list of suffixes of matching programs.

See also
•
shell.completeProgram
programWithArgs(shell, text, previous, starting)Source
Complete arguments of a program.
Parameters
1. shell table The shell we're completing in.
2. text string Current text to complete.
3. previous { string... } The shell arguments before this one.
4. starting number Which argument index this program and args start at.
Returns
1. { string... } A list of suffixes of matching programs or arguments.
Changes
•
New in version 1.97.0
helpSource
Wraps help.completeTopic as a build compatible function.
choiceSource
Wraps cc.completion.choice as a build compatible function.
peripheralSource
Wraps cc.completion.peripheral as a build compatible function.
sideSource
Wraps cc.completion.side as a build compatible function.
settingSource
Wraps cc.completion.setting as a build compatible function.
commandSource
Wraps cc.completion.command as a build compatible function.
build(...)Source
A helper function for building shell completion arguments.
This accepts a series of single-argument completion functions, and combines them into a function
suitable for use with shell.setCompletionFunction.

Parameters
1. ... nil | table | function
Every argument to build represents an argument to the program you wish to complete. Each
argument can be one of three types:
•
nil: This argument will not be completed.
•
A function: This argument will be completed with the given function. It is called with
the shell object, the string to complete and the arguments before this one.
•
A table: This acts as a more powerful version of the function case. The table must have a
function as the first item - this will be called with the shell, string and preceding
arguments as above, but also followed by any additional items in the table. This provides
a more convenient interface to pass options to your completion functions.
If this table is the last argument, it may also set the many key to true, which states this
function should be used to complete any remaining arguments.
Last updated on 2024-11-19

☰
Contents
•
make
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty

•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty

•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.require
A pure Lua implementation of the builtin require function and package library.
Generally you do not need to use this module - it is injected into the every program's environment. However,
it may be useful when building a custom shell or when running programs yourself.
Usage
•
Construct the package and require function, and insert them into a custom environment.
local r = require "cc.require"
local env = setmetatable({}, { __index = _ENV })
env.require, env.package = r.make(env, "/")
-- Now we have our own require function, separate to the original.
local r2 = env.require "cc.require"
print(r, r2)
See also
•
Reusing code with require
For an introduction on how to use require.

Changes
•
New in version 1.88.0
make(env,
dir)
Build an implementation of Lua's package library, and a require function to load
modules within it.
make(env, dir)Source
Build an implementation of Lua's package library, and a require function to load modules within it.
Parameters
1. env table The environment to load packages into.
2. dir string The directory that relative packages are loaded from.
Returns
1. function The new require function.
2. table
The new package library.
Last updated on 2024-11-19

☰
Contents
•
empty
•
space
•
line
•
space_line
•
text
•
concat
•
nest
•
group
•
write
•
print
•
render
•
pretty
•
pretty_print
Types
•
Doc
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet

•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure

•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.pretty
A pretty printer for rendering data structures in an aesthetically pleasing manner.

In order to display something using cc.pretty, you build up a series of documents. These behave a little bit
like strings; you can concatenate them together and then print them to the screen.
However, documents also allow you to control how they should be printed. There are several functions (such
as nest and group) which allow you to control the "layout" of the document. When you come to display the
document, the 'best' (most compact) layout is used.
The structure of this module is based on A Prettier Printer.
Usage
•
Print a table to the terminal
local pretty = require "cc.pretty"
pretty.pretty_print({ 1, 2, 3 })
•
Build a custom document and display it
local pretty = require "cc.pretty"
pretty.print(pretty.group(pretty.text("hello") .. pretty.space_line ..
pretty.text("world")))
Changes
•
New in version 1.87.0
empty
An empty document.
space
A document with a single space in it.
line
A line break.
space_line
A line break.
text(text [, colour])
Create a new document from a string.
concat(...)
Concatenate several documents together.
nest(depth, doc)
Indent later lines of the given document with the given number
of spaces.
group(doc)
Builds a document which is displayed on a single line if there
is enough room, or as normal if not.
write(doc [, ribbon_frac=0.6])
Display a document on the terminal.
print(doc [, ribbon_frac=0.6])
Display a document on the terminal with a trailing new line.
render(doc [, width [,
ribbon_frac=0.6]])
Render a document, converting it into a string.
pretty(obj [, options])
Pretty-print an arbitrary object, converting it into a document.
pretty_print(obj [, options [,
ribbon_frac=0.6]])
A shortcut for calling pretty and print together.
emptySource
An empty document.
spaceSource
A document with a single space in it.
lineSource

A line break. When collapsed with group, this will be replaced with empty.
space_lineSource
A line break. When collapsed with group, this will be replaced with space.
text(text [, colour])Source
Create a new document from a string.
If your string contains multiple lines, group will flatten the string into a single line, with spaces
between each line.
Parameters
1. text string The string to construct a new document with.
2. colour? number The colour this text should be printed with. If not given, we default to the
current colour.
Returns
1. Doc
The document with the provided text.
Usage
•
Write some blue text.
local pretty = require "cc.pretty"
pretty.print(pretty.text("Hello!", colours.blue))
concat(...)Source
Concatenate several documents together. This behaves very similar to string concatenation.
Parameters
1. ... Doc | string The documents to concatenate.
Returns
1. Doc
The concatenated documents.
Usage
•
local pretty = require "cc.pretty"
local doc1, doc2 = pretty.text("doc1"), pretty.text("doc2")
print(pretty.concat(doc1, " - ", doc2))
print(doc1 .. " - " .. doc2) -- Also supports ..
nest(depth, doc)Source
Indent later lines of the given document with the given number of spaces.

For instance, nesting the document
foo
bar
by two spaces will produce
foo
bar
Parameters
1. depth number The number of spaces with which the document should be indented.
2. doc Doc The document to indent.
Returns
1. Doc
The nested document.
Usage
•
local pretty = require "cc.pretty"
print(pretty.nest(2, pretty.text("foo\nbar")))
group(doc)Source
Builds a document which is displayed on a single line if there is enough room, or as normal if not.
Parameters
1. doc Doc The document to group.
Returns
1. Doc
The grouped document.
Usage
•
Uses group to show things being displayed on one or multiple lines.
local pretty = require "cc.pretty"
local doc = pretty.group("Hello" .. pretty.space_line .. "World")
print(pretty.render(doc, 5)) -- On multiple lines
print(pretty.render(doc, 20)) -- Collapsed onto one.
write(doc [, ribbon_frac=0.6])Source
Display a document on the terminal.
Parameters
1. doc Doc The document to render
2. ribbon_frac? number = 0.6 The maximum fraction of the width that we should write in.

print(doc [, ribbon_frac=0.6])Source
Display a document on the terminal with a trailing new line.
Parameters
1. doc Doc The document to render.
2. ribbon_frac? number = 0.6 The maximum fraction of the width that we should write in.
render(doc [, width [, ribbon_frac=0.6]])Source
Render a document, converting it into a string.
Parameters
1. doc Doc The document to render.
2. width? number The maximum width of this document. Note that long strings will not be
wrapped to fit this width - it is only used for finding the best layout.
3. ribbon_frac? number = 0.6 The maximum fraction of the width that we should write in.
Returns
1. string
The rendered document as a string.
pretty(obj [, options])Source
Pretty-print an arbitrary object, converting it into a document.
This can then be rendered with write or print.
Parameters
1. obj The object to pretty-print.
2. options? { function_args = boolean, function_source = boolean }
Controls how various properties are displayed.
•
function_args: Show the arguments to a function if known (false by default).
•
function_source: Show where the function was defined, instead of function:
xxxxxxxx (false by default).
Returns
1. Doc
The object formatted as a document.
Usage
•
Display a table on the screen
local pretty = require "cc.pretty"
pretty.print(pretty.pretty({ 1, 2, 3 }))

See also
•
pretty_print
for a shorthand to prettify and print an object.
Changes
•
Changed in version 1.88.0: Added options argument.
pretty_print(obj [, options [, ribbon_frac=0.6]])Source
A shortcut for calling pretty and print together.
Parameters
1. obj The object to pretty-print.
2. options? { function_args = boolean, function_source = boolean }
Controls how various properties are displayed.
•
function_args: Show the arguments to a function if known (false by default).
•
function_source: Show where the function was defined, instead of function:
xxxxxxxx (false by default).
3. ribbon_frac? number = 0.6 The maximum fraction of the width that we should write in.
Usage
•
Display a table on the screen.
local pretty = require "cc.pretty"
pretty.pretty_print({ 1, 2, 3 })
See also
•
pretty
•
print
Changes
•
New in version 1.99
Types
Doc
A document containing formatted text, with multiple possible layouts.
Documents effectively represent a sequence of strings in alternative layouts, which we will try to print in the
most compact form necessary.
Last updated on 2024-11-19

☰
Contents
•
parse
•
load
•
draw
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect

•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message

•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.image.nft
Read and draw nft ("Nitrogen Fingers Text") images.
nft ("Nitrogen Fingers Text") is a file format for drawing basic images. Unlike the images that
paintutils.parseImage uses, nft supports coloured text as well as simple coloured pixels.
Usage
•
Load an image from example.nft and draw it.
local nft = require "cc.image.nft"
local image = assert(nft.load("data/example.nft"))
nft.draw(image, term.getCursorPos())
Changes
•
New in version 1.90.0
parse(image)
Parse an nft image from a string.

load(path)
Load an nft image from a file.
draw(image, xPos, yPos [, target]) Draw an nft image to the screen.
parse(image)Source
Parse an nft image from a string.
Parameters
1. image string The image contents.
Returns
1. table The parsed image.
load(path)Source
Load an nft image from a file.
Parameters
1. path string The file to load.
Returns
1. table
The parsed image.
Or
1. nil If the file does not exist or could not be loaded.
2. string
An error message explaining why the file could not be loaded.
draw(image, xPos, yPos [, target])Source
Draw an nft image to the screen.
Parameters
1. image table An image, as returned from load or parse.
2. xPos number The x position to start drawing at.
3. yPos number The y position to start drawing at.
4. target? term.Redirect The terminal redirect to draw to. Defaults to the current terminal.
Last updated on 2024-11-19

☰
Contents
•
expect
•
field
•
range
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect

•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message

•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.expect
The cc.expect library provides helper functions for verifying that function arguments are well-formed and
of the correct type.
Usage
•
Define a basic function and check it has the correct arguments.
local expect = require "cc.expect"
local expect, field = expect.expect, expect.field
local function add_person(name, info)
expect(1, name, "string")
expect(2, info, "table", "nil")
if info then
print("Got age=", field(info, "age", "number"))
print("Got gender=", field(info, "gender", "string", "nil"))
end
end

add_person("Anastazja") -- `info' is optional
add_person("Kion", { age = 23 }) -- `gender' is optional
add_person("Caoimhin", { age = 23, gender = true }) -- error!
Changes
•
New in version 1.84.0
•
Changed in version 1.96.0: The module can now be called directly as a function, which wraps
around expect.expect.
expect(index, value, ...)
Expect an argument to have a specific type.
field(tbl, index, ...)
Expect an field to have a specific type.
range(num [, min=-math.huge [,
max=math.huge]])
Expect a number to be within a specific range.
expect(index, value, ...)Source
Expect an argument to have a specific type.
Parameters
1. index number The 1-based argument index.
2. value The argument's value.
3. ... string The allowed types of the argument.
Returns
1. The given value.
Throws
•
If the value is not one of the allowed types.
field(tbl, index, ...)Source
Expect an field to have a specific type.
Parameters
1. tbl table The table to index.
2. index string The field name to check.
3. ... string The allowed types of the argument.
Returns
1. The contents of the given field.
Throws
•
If the field is not one of the allowed types.

range(num [, min=-math.huge [, max=math.huge]])Source
Expect a number to be within a specific range.
Parameters
1. num number The value to check.
2. min? number = -math.huge The minimum value.
3. max? number = math.huge The maximum value.
Returns
1. The given value.
Throws
•
If the value is outside of the allowed range.
Changes
•
New in version 1.96.0
Last updated on 2024-11-19

☰
Contents
•
choice
•
peripheral
•
side
•
setting
•
command
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm

•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral

•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
cc.completion
A collection of helper methods for working with input completion, such as that require by _G.read.
See also
•
cc.shell.completion
For additional helpers to use with shell.setCompletionFunction.
Changes
•
New in version 1.85.0
choice(text, choices [, add_space]) Complete from a choice of one or more strings.
peripheral(text [, add_space])
Complete the name of a currently attached peripheral.
side(text [, add_space])
Complete the side of a computer.
setting(text [, add_space])
Complete a setting.

command(text [, add_space])
Complete the name of a Minecraft command.
choice(text, choices [, add_space])Source
Complete from a choice of one or more strings.
Parameters
1. text string The input string to complete.
2. choices { string... } The list of choices to complete from.
3. add_space? boolean Whether to add a space after the completed item.
Returns
1. { string... } A list of suffixes of matching strings.
Usage
•
Call _G.read, completing the names of various animals.
local completion = require "cc.completion"
local animals = { "dog", "cat", "lion", "unicorn" }
read(nil, nil, function(text) return completion.choice(text, animals) end)
peripheral(text [, add_space])Source
Complete the name of a currently attached peripheral.
Parameters
1. text string The input string to complete.
2. add_space? boolean Whether to add a space after the completed name.
Returns
1. { string... } A list of suffixes of matching peripherals.
Usage
•
local completion = require "cc.completion"
read(nil, nil, completion.peripheral)
side(text [, add_space])Source
Complete the side of a computer.
Parameters
1. text string The input string to complete.
2. add_space? boolean Whether to add a space after the completed side.

Returns
1. { string... } A list of suffixes of matching sides.
Usage
•
local completion = require "cc.completion"
read(nil, nil, completion.side)
setting(text [, add_space])Source
Complete a setting.
Parameters
1. text string The input string to complete.
2. add_space? boolean Whether to add a space after the completed settings.
Returns
1. { string... } A list of suffixes of matching settings.
Usage
•
local completion = require "cc.completion"
read(nil, nil, completion.setting)
command(text [, add_space])Source
Complete the name of a Minecraft command.
Parameters
1. text string The input string to complete.
2. add_space? boolean Whether to add a space after the completed command.
Returns
1. { string... } A list of suffixes of matching commands.
Usage
•
local completion = require "cc.completion"
read(nil, nil, completion.command)
Last updated on 2024-11-19

☰
Contents
•
create
Types
•
Window
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion

•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach

•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
window
A terminal redirect occupying a smaller area of an existing terminal. This allows for easy definition of spaces
within the display that can be written/drawn to, then later redrawn/repositioned/etc as need be. The API itself
contains only one function, window.create, which returns the windows themselves.
Windows are considered terminal objects - as such, they have access to nearly all the commands in the term
API (plus a few extras of their own, listed within said API) and are valid targets to redirect to.
Each window has a "parent" terminal object, which can be the computer's own display, a monitor, another
window or even other, user-defined terminal objects. Whenever a window is rendered to, the actual screen-
writing is performed via that parent (or, if that has one too, then that parent, and so forth). Bear in mind that
the cursor of a window's parent will hence be moved around etc when writing a given child window.
Windows retain a memory of everything rendered "through" them (hence acting as display buffers), and if the
parent's display is wiped, the window's content can be easily redrawn later. A window may also be flagged as
invisible, preventing any changes to it from being rendered until it's flagged as visible once more.

A parent terminal object may have multiple children assigned to it, and windows may overlap. For example,
the Multishell system functions by assigning each tab a window covering the screen, each using the starting
terminal display as its parent, and only one of which is visible at a time.
Changes
•
New in version 1.6
create(parent, nX, nY, nWidth, nHeight
[, bStartVisible])
Returns a terminal object that is a space within the
specified parent terminal object.
create(parent, nX, nY, nWidth, nHeight [, bStartVisible])Source
Returns a terminal object that is a space within the specified parent terminal object. This can then be
used (or even redirected to) in the same manner as eg a wrapped monitor. Refer to the term API for a
list of functions available to it.
term itself may not be passed as the parent, though term.native is acceptable. Generally,
term.current or a wrapped monitor will be most suitable, though windows may even have other
windows assigned as their parents.
Parameters
1. parent term.Redirect The parent terminal redirect to draw to.
2. nX number The x coordinate this window is drawn at in the parent terminal
3. nY number The y coordinate this window is drawn at in the parent terminal
4. nWidth number The width of this window
5. nHeight number The height of this window
6. bStartVisible? boolean Whether this window is visible by default. Defaults to true.
Returns
1. Window
The constructed window
Usage
•
Create a smaller window, fill it red and write some text to it.
local my_window = window.create(term.current(), 1, 1, 20, 5)
my_window.setBackgroundColour(colours.red)
my_window.setTextColour(colours.white)
my_window.clear()
my_window.write("Testing my window!")
•
Create a smaller window and redirect to it.
local my_window = window.create(term.current(), 1, 1, 25, 5)
term.redirect(my_window)
print("Writing some long text which will wrap around and show the bounds of this
window.")
Changes
•
New in version 1.6

Types
Window
The window object. Refer to the module's documentation for a full description.
See also
•
term.Redirect
Window.write(sText)Source
Parameters
1. sText
Window.blit(sText, sTextColor, sBackgroundColor)Source
Parameters
1. sText
2. sTextColor
3. sBackgroundColor
Window.clear()Source
Window.clearLine()Source
Window.getCursorPos()Source
Window.setCursorPos(x, y)Source
Parameters
1. x
2. y
Window.setCursorBlink(blink)Source
Parameters
1. blink
Window.getCursorBlink()Source
Window.isColor()Source
Window.isColour()Source
Window.setTextColor(color)Source
Parameters
1. color
Window.setTextColour(color)Source
Parameters
1. color
Window.setPaletteColour(colour, r, g, b)Source

Parameters
1. colour
2. r
3. g
4. b
Window.setPaletteColor(colour, r, g, b)Source
Parameters
1. colour
2. r
3. g
4. b
Window.getPaletteColour(colour)Source
Parameters
1. colour
Window.getPaletteColor(colour)Source
Parameters
1. colour
Window.setBackgroundColor(color)Source
Parameters
1. color
Window.setBackgroundColour(color)Source
Parameters
1. color
Window.getSize()Source
Window.scroll(n)Source
Parameters
1. n
Window.getTextColor()Source
Window.getTextColour()Source
Window.getBackgroundColor()Source
Window.getBackgroundColour()Source
Window.getLine(y)Source
Get the buffered contents of a line in this window.
Parameters
1. y number The y position of the line to get.

Returns
1. string
The textual content of this line.
2. string
The text colours of this line, suitable for use with term.blit.
3. string
The background colours of this line, suitable for use with term.blit.
Throws
•
If y is not between 1 and this window's height.
Changes
•
New in version 1.84.0
Window.setVisible(visible)Source
Set whether this window is visible. Invisible windows will not be drawn to the screen until they are
made visible again.
Making an invisible window visible will immediately draw it.
Parameters
1. visible boolean Whether this window is visible.
Window.isVisible()Source
Get whether this window is visible. Invisible windows will not be drawn to the screen until they are
made visible again.
Returns
1. boolean Whether this window is visible.
See also
•
Window:setVisible
Changes
•
New in version 1.94.0
Window.redraw()Source
Draw this window. This does nothing if the window is not visible.
See also
•
Window:setVisible
Window.restoreCursor()Source
Set the current terminal's cursor to where this window's cursor is. This does nothing if the window is
not visible.
Window.getPosition()Source

Get the position of the top left corner of this window.
Returns
1. number The x position of this window.
2. number The y position of this window.
Window.reposition(new_x, new_y [, new_width, new_height [, new_parent]])Source
Reposition or resize the given window.
This function also accepts arguments to change the size of this window. It is recommended that you fire
a term_resize event after changing a window's, to allow programs to adjust their sizing.
Parameters
1. new_x number The new x position of this window.
2. new_y number The new y position of this window.
3. new_width? number The new width of this window.
4. new_height number The new height of this window.
5. new_parent? term.Redirect The new redirect object this window should draw to.
Changes
•
Changed in version 1.85.0: Add new_parent parameter.
Last updated on 2024-11-19

☰
Contents
•
new
Types
•
Vector
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion

•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach

•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
vector
A basic 3D vector type and some common vector operations. This may be useful when working with
coordinates in Minecraft's world (such as those from the gps API).
An introduction to vectors can be found on Wikipedia.
Changes
•
New in version 1.31
new(x, y, z) Construct a new Vector with the given coordinates.
new(x, y, z)Source
Construct a new Vector with the given coordinates.

Parameters
1. x number The X coordinate or direction of the vector.
2. y number The Y coordinate or direction of the vector.
3. z number The Z coordinate or direction of the vector.
Returns
1. Vector
The constructed vector.
Types
Vector
A 3-dimensional vector, with x, y, and z values.
This is suitable for representing both position and directional vectors.
Vector:add(o)Source
Adds two vectors together.
Parameters
1. o Vector The second vector to add.
Returns
1. Vector
The resulting vector
Usage
•
v1:add(v2)
•
v1 + v2
Vector:sub(o)Source
Subtracts one vector from another.
Parameters
1. o Vector The vector to subtract.
Returns
1. Vector
The resulting vector
Usage
•
v1:sub(v2)
•
v1 - v2

Vector:mul(factor)Source
Multiplies a vector by a scalar value.
Parameters
1. factor number The scalar value to multiply with.
Returns
1. Vector
A vector with value (x * m, y * m, z * m).
Usage
•
vector.new
(1, 2, 3):mul(3)
•
vector.new
(1, 2, 3) * 3
Vector:div(factor)Source
Divides a vector by a scalar value.
Parameters
1. factor number The scalar value to divide by.
Returns
1. Vector
A vector with value (x / m, y / m, z / m).
Usage
•
vector.new
(1, 2, 3):div(3)
•
vector.new
(1, 2, 3) / 3
Vector:unm()Source
Negate a vector
Returns
1. Vector
The negated vector.
Usage
•
-vector.new(1, 2, 3)
Vector:dot(o)Source
Compute the dot product of two vectors

Parameters
1. o Vector The second vector to compute the dot product of.
Returns
1. number The dot product of self and o.
Usage
•
v1:dot(v2)
Vector:cross(o)Source
Compute the cross product of two vectors
Parameters
1. o Vector The second vector to compute the cross product of.
Returns
1. Vector
The cross product of self and o.
Usage
•
v1:cross(v2)
Vector:length()Source
Get the length (also referred to as magnitude) of this vector.
Returns
1. number The length of this vector.
Vector:normalize()Source
Divide this vector by its length, producing with the same direction, but of length 1.
Returns
1. Vector
The normalised vector
Usage
•
v:normalize()
Vector:round([tolerance])Source
Construct a vector with each dimension rounded to the nearest value.

Parameters
1. tolerance? number The tolerance that we should round to, defaulting to 1. For instance, a
tolerance of 0.5 will round to the nearest 0.5.
Returns
1. Vector
The rounded vector.
Vector:tostring()Source
Convert this vector into a string, for pretty printing.
Returns
1. string
This vector's string representation.
Usage
•
v:tostring()
•
tostring(v)
Vector:equals(other)Source
Check for equality between two vectors.
Parameters
1. other Vector The second vector to compare to.
Returns
1. boolean Whether or not the vectors are equal.
Last updated on 2024-11-19

☰
Contents
•
craft
•
native
•
forward
•
back
•
up
•
down
•
turnLeft
•
turnRight
•
dig
•
digUp
•
digDown
•
place
•
placeUp
•
placeDown
•
drop
•
dropUp
•
dropDown
•
select
•
getItemCount
•
getItemSpace
•
detect
•
detectUp
•
detectDown
•
compare
•
compareUp
•
compareDown
•
attack
•
attackUp
•
attackDown
•
suck
•
suckUp
•
suckDown
•
getFuelLevel
•
refuel
•
compareTo
•
transferTo
•
getSelectedSlot
•
getFuelLimit

•
equipLeft
•
equipRight
•
inspect
•
inspectUp
•
inspectDown
•
getItemDetail
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
turtle
Turtles are a robotic device, which can break and place blocks, attack mobs, and move about the world. They
have an internal inventory of 16 slots, allowing them to store blocks they have broken or would like to place.
Movement
Turtles are capable of moving through the world. As turtles are blocks themselves, they are confined to
Minecraft's grid, moving a single block at a time.
turtle.forward and turtle.back move the turtle in the direction it is facing, while turtle.up and
turtle.down move it up and down (as one might expect!). In order to move left or right, you first need to
turn the turtle using turtle.turnLeft/turtle.turnRight and then move forward or backwards.
🛈 info
The name "turtle" comes from Turtle graphics, which originated from the Logo programming language. Here
you'd move a turtle with various commands like "move 10" and "turn left", much like ComputerCraft's
turtles!
Moving a turtle (though not turning it) consumes fuel. If a turtle does not have any fuel, it won't move, and
the movement functions will return false. If your turtle isn't going anywhere, the first thing to check is if
you've fuelled your turtle.

Handling errors
Many turtle functions can fail in various ways. For instance, a turtle cannot move forward if there's already a
block there. Instead of erroring, functions which can fail either return true if they succeed, or false and
some error message if they fail.
Unexpected failures can often lead to strange behaviour. It's often a good idea to check the return values of
these functions, or wrap them in assert (for instance, use assert(turtle.forward()) rather than
turtle.forward()), so the program doesn't misbehave.
Turtle upgrades
While a normal turtle can move about the world and place blocks, its functionality is limited. Thankfully,
turtles can be upgraded with upgrades. Turtles have two upgrade slots, one on the left and right sides.
Upgrades can be equipped by crafting a turtle with the upgrade, or calling the
turtle.equipLeft/turtle.equipRight functions.
By default, any diamond tool may be used as an upgrade (though more may be added with datapacks). The
diamond pickaxe may be used to break blocks (with turtle.dig), while the sword can attack entities
(turtle.attack). Other tools have more niche use-cases, for instance hoes can til dirt.
Some peripherals (namely speakers and Ender and Wireless modems) can also be equipped as upgrades.
These are then accessible by accessing the "left" or "right" peripheral.
Recipes
Turtle

Advanced Turtle
Changes
•
New in version 1.3

craft([limit=64])
Craft a recipe based on the turtle's inventory.
native
The builtin turtle API, without any generated helper functions.
forward()
Move the turtle forward one block.
back()
Move the turtle backwards one block.
up()
Move the turtle up one block.
down()
Move the turtle down one block.
turnLeft()
Rotate the turtle 90 degrees to the left.
turnRight()
Rotate the turtle 90 degrees to the right.
dig([side])
Attempt to break the block in front of the turtle.
digUp([side])
Attempt to break the block above the turtle.
digDown([side])
Attempt to break the block below the turtle.
place([text])
Place a block or item into the world in front of the turtle.
placeUp([text])
Place a block or item into the world above the turtle.
placeDown([text])
Place a block or item into the world below the turtle.
drop([count])
Drop the currently selected stack into the inventory in front of the turtle,
or as an item into the world if there is no inventory.
dropUp([count])
Drop the currently selected stack into the inventory above the turtle, or as
an item into the world if there is no inventory.
dropDown([count])
Drop the currently selected stack into the inventory below the turtle, or as
an item into the world if there is no inventory.
select(slot)
Change the currently selected slot.
getItemCount([slot])
Get the number of items in the given slot.
getItemSpace([slot])
Get the remaining number of items which may be stored in this stack.
detect()
Check if there is a solid block in front of the turtle.
detectUp()
Check if there is a solid block above the turtle.
detectDown()
Check if there is a solid block below the turtle.
compare()
Check if the block in front of the turtle is equal to the item in the currently
selected slot.
compareUp()
Check if the block above the turtle is equal to the item in the currently
selected slot.
compareDown()
Check if the block below the turtle is equal to the item in the currently
selected slot.
attack([side])
Attack the entity in front of the turtle.
attackUp([side])
Attack the entity above the turtle.
attackDown([side])
Attack the entity below the turtle.
suck([count])
Suck an item from the inventory in front of the turtle, or from an item
floating in the world.
suckUp([count])
Suck an item from the inventory above the turtle, or from an item floating
in the world.
suckDown([count])
Suck an item from the inventory below the turtle, or from an item floating
in the world.
getFuelLevel()
Get the maximum amount of fuel this turtle currently holds.
refuel([count])
Refuel this turtle.
compareTo(slot)
Compare the item in the currently selected slot to the item in another slot.
transferTo(slot [,
Move an item from the selected slot to another one.

count])
getSelectedSlot()
Get the currently selected slot.
getFuelLimit()
Get the maximum amount of fuel this turtle can hold.
equipLeft()
Equip (or unequip) an item on the left side of this turtle.
equipRight()
Equip (or unequip) an item on the right side of this turtle.
inspect()
Get information about the block in front of the turtle.
inspectUp()
Get information about the block above the turtle.
inspectDown()
Get information about the block below the turtle.
getItemDetail([slot [,
detailed]])
Get detailed information about the items in the given slot.
craft([limit=64])Source
Craft a recipe based on the turtle's inventory. The turtle's inventory should set up like a crafting grid.
For instance, to craft sticks, slots 1 and 5 should contain planks. All other slots should be empty,
including those outside the crafting "grid".
Parameters
1. limit? number = 64 The maximum number of crafting steps to run.
Returns
1. true If crafting succeeds.
Or
1. false If crafting fails.
2. string
A string describing why crafting failed.
Throws
•
When limit is less than 1 or greater than 64.
Changes
•
New in version 1.4
nativeSource
🛈 Deprecated
Historically this table behaved differently to the main turtle API, but this is no longer the case. You
should not need to use it.
The builtin turtle API, without any generated helper functions.
forward()Source
Move the turtle forward one block.

Returns
1. boolean Whether the turtle could successfully move.
2. string
| nil The reason the turtle could not move.
back()Source
Move the turtle backwards one block.
Returns
1. boolean Whether the turtle could successfully move.
2. string
| nil The reason the turtle could not move.
up()Source
Move the turtle up one block.
Returns
1. boolean Whether the turtle could successfully move.
2. string
| nil The reason the turtle could not move.
down()Source
Move the turtle down one block.
Returns
1. boolean Whether the turtle could successfully move.
2. string
| nil The reason the turtle could not move.
turnLeft()Source
Rotate the turtle 90 degrees to the left.
Returns
1. boolean Whether the turtle could successfully turn.
2. string
| nil The reason the turtle could not turn.
turnRight()Source
Rotate the turtle 90 degrees to the right.
Returns
1. boolean Whether the turtle could successfully turn.
2. string
| nil The reason the turtle could not turn.
dig([side])Source
Attempt to break the block in front of the turtle.
This requires a turtle tool capable of breaking the block. Diamond pickaxes (mining turtles) can break
any vanilla block, but other tools (such as axes) are more limited.

Parameters
1. side? string The specific tool to use. Should be "left" or "right".
Returns
1. boolean Whether a block was broken.
2. string
| nil The reason no block was broken.
Changes
•
Changed in version 1.6: Added optional side argument.
digUp([side])Source
Attempt to break the block above the turtle. See dig for full details.
Parameters
1. side? string The specific tool to use.
Returns
1. boolean Whether a block was broken.
2. string
| nil The reason no block was broken.
Changes
•
Changed in version 1.6: Added optional side argument.
digDown([side])Source
Attempt to break the block below the turtle. See dig for full details.
Parameters
1. side? string The specific tool to use.
Returns
1. boolean Whether a block was broken.
2. string
| nil The reason no block was broken.
Changes
•
Changed in version 1.6: Added optional side argument.
place([text])Source
Place a block or item into the world in front of the turtle.
"Placing" an item allows it to interact with blocks and entities in front of the turtle. For instance,
buckets can pick up and place down fluids, and wheat can be used to breed cows. However, you cannot
use place to perform arbitrary block interactions, such as clicking buttons or flipping levers.

Parameters
1. text? string When placing a sign, set its contents to this text.
Returns
1. boolean Whether the block could be placed.
2. string
| nil The reason the block was not placed.
Changes
•
New in version 1.4
placeUp([text])Source
Place a block or item into the world above the turtle.
Parameters
1. text? string When placing a sign, set its contents to this text.
Returns
1. boolean Whether the block could be placed.
2. string
| nil The reason the block was not placed.
See also
•
place
For more information about placing items.
Changes
•
New in version 1.4
placeDown([text])Source
Place a block or item into the world below the turtle.
Parameters
1. text? string When placing a sign, set its contents to this text.
Returns
1. boolean Whether the block could be placed.
2. string
| nil The reason the block was not placed.
See also
•
place
For more information about placing items.

Changes
•
New in version 1.4
drop([count])Source
Drop the currently selected stack into the inventory in front of the turtle, or as an item into the world if
there is no inventory.
Parameters
1. count? number The number of items to drop. If not given, the entire stack will be dropped.
Returns
1. boolean Whether items were dropped.
2. string
| nil The reason the no items were dropped.
Throws
•
If dropping an invalid number of items.
See also
•
select
Changes
•
New in version 1.31
dropUp([count])Source
Drop the currently selected stack into the inventory above the turtle, or as an item into the world if
there is no inventory.
Parameters
1. count? number The number of items to drop. If not given, the entire stack will be dropped.
Returns
1. boolean Whether items were dropped.
2. string
| nil The reason the no items were dropped.
Throws
•
If dropping an invalid number of items.
See also
•
select

Changes
•
New in version 1.4
dropDown([count])Source
Drop the currently selected stack into the inventory below the turtle, or as an item into the world if
there is no inventory.
Parameters
1. count? number The number of items to drop. If not given, the entire stack will be dropped.
Returns
1. boolean Whether items were dropped.
2. string
| nil The reason the no items were dropped.
Throws
•
If dropping an invalid number of items.
See also
•
select
Changes
•
New in version 1.4
select(slot)Source
Change the currently selected slot.
The selected slot is determines what slot actions like drop or getItemCount act on.
Parameters
1. slot number The slot to select.
Returns
1. true When the slot has been selected.
Throws
•
If the slot is out of range.
See also
•
getSelectedSlot
getItemCount([slot])Source

Get the number of items in the given slot.
Parameters
1. slot? number The slot we wish to check. Defaults to the selected slot.
Returns
1. number The number of items in this slot.
Throws
•
If the slot is out of range.
getItemSpace([slot])Source
Get the remaining number of items which may be stored in this stack.
For instance, if a slot contains 13 blocks of dirt, it has room for another 51.
Parameters
1. slot? number The slot we wish to check. Defaults to the selected slot.
Returns
1. number The space left in this slot.
Throws
•
If the slot is out of range.
detect()Source
Check if there is a solid block in front of the turtle. In this case, solid refers to any non-air or liquid
block.
Returns
1. boolean If there is a solid block in front.
detectUp()Source
Check if there is a solid block above the turtle. In this case, solid refers to any non-air or liquid block.
Returns
1. boolean If there is a solid block above.
detectDown()Source
Check if there is a solid block below the turtle. In this case, solid refers to any non-air or liquid block.

Returns
1. boolean If there is a solid block below.
compare()Source
Check if the block in front of the turtle is equal to the item in the currently selected slot.
Returns
1. boolean If the block and item are equal.
Changes
•
New in version 1.31
compareUp()Source
Check if the block above the turtle is equal to the item in the currently selected slot.
Returns
1. boolean If the block and item are equal.
Changes
•
New in version 1.31
compareDown()Source
Check if the block below the turtle is equal to the item in the currently selected slot.
Returns
1. boolean If the block and item are equal.
Changes
•
New in version 1.31
attack([side])Source
Attack the entity in front of the turtle.
Parameters
1. side? string The specific tool to use.
Returns
1. boolean Whether an entity was attacked.
2. string
| nil The reason nothing was attacked.

Changes
•
New in version 1.4
•
Changed in version 1.6: Added optional side argument.
attackUp([side])Source
Attack the entity above the turtle.
Parameters
1. side? string The specific tool to use.
Returns
1. boolean Whether an entity was attacked.
2. string
| nil The reason nothing was attacked.
Changes
•
New in version 1.4
•
Changed in version 1.6: Added optional side argument.
attackDown([side])Source
Attack the entity below the turtle.
Parameters
1. side? string The specific tool to use.
Returns
1. boolean Whether an entity was attacked.
2. string
| nil The reason nothing was attacked.
Changes
•
New in version 1.4
•
Changed in version 1.6: Added optional side argument.
suck([count])Source
Suck an item from the inventory in front of the turtle, or from an item floating in the world.
This will pull items into the first acceptable slot, starting at the currently selected one.
Parameters
1. count? number The number of items to suck. If not given, up to a stack of items will be
picked up.
Returns
1. boolean Whether items were picked up.

2. string
| nil The reason the no items were picked up.
Throws
•
If given an invalid number of items.
Changes
•
New in version 1.4
•
Changed in version 1.6: Added an optional limit argument.
suckUp([count])Source
Suck an item from the inventory above the turtle, or from an item floating in the world.
Parameters
1. count? number The number of items to suck. If not given, up to a stack of items will be
picked up.
Returns
1. boolean Whether items were picked up.
2. string
| nil The reason the no items were picked up.
Throws
•
If given an invalid number of items.
Changes
•
New in version 1.4
•
Changed in version 1.6: Added an optional limit argument.
suckDown([count])Source
Suck an item from the inventory below the turtle, or from an item floating in the world.
Parameters
1. count? number The number of items to suck. If not given, up to a stack of items will be
picked up.
Returns
1. boolean Whether items were picked up.
2. string
| nil The reason the no items were picked up.
Throws
•
If given an invalid number of items.

Changes
•
New in version 1.4
•
Changed in version 1.6: Added an optional limit argument.
getFuelLevel()Source
Get the maximum amount of fuel this turtle currently holds.
Returns
1. number The current amount of fuel a turtle this turtle has.
Or
1. "unlimited" If turtles do not consume fuel when moving.
See also
•
getFuelLimit
•
refuel
Changes
•
New in version 1.4
refuel([count])Source
Refuel this turtle.
While most actions a turtle can perform (such as digging or placing blocks) are free, moving consumes
fuel from the turtle's internal buffer. If a turtle has no fuel, it will not move.
refuel refuels the turtle, consuming fuel items (such as coal or lava buckets) from the currently
selected slot and converting them into energy. This finishes once the turtle is fully refuelled or all items
have been consumed.
Parameters
1. count? number The maximum number of items to consume. One can pass 0 to check if an
item is combustable or not.
Returns
1. true If the turtle was refuelled.
Or
1. false If the turtle was not refuelled.
2. string
The reason the turtle was not refuelled.
Throws
•
If the refuel count is out of range.

Usage
•
Refuel a turtle from the currently selected slot.
local level = turtle.getFuelLevel()
if level == "unlimited" then error("Turtle does not need fuel", 0) end
local ok, err = turtle.refuel()
if ok then
local new_level = turtle.getFuelLevel()
print(("Refuelled %d, current level is %d"):format(new_level - level, new_level))
else
printError(err)
end
•
Check if the current item is a valid fuel source.
local is_fuel, reason = turtle.refuel(0)
if not is_fuel then printError(reason) end
See also
•
getFuelLevel
•
getFuelLimit
Changes
•
New in version 1.4
compareTo(slot)Source
Compare the item in the currently selected slot to the item in another slot.
Parameters
1. slot number The slot to compare to.
Returns
1. boolean If the two items are equal.
Throws
•
If the slot is out of range.
Changes
•
New in version 1.4
transferTo(slot [, count])Source
Move an item from the selected slot to another one.
Parameters
1. slot number The slot to move this item to.

2. count? number The maximum number of items to move.
Returns
1. boolean If some items were successfully moved.
Throws
•
If the slot is out of range.
•
If the number of items is out of range.
Changes
•
New in version 1.45
getSelectedSlot()Source
Get the currently selected slot.
Returns
1. number The current slot.
See also
•
select
Changes
•
New in version 1.6
getFuelLimit()Source
Get the maximum amount of fuel this turtle can hold.
By default, normal turtles have a limit of 20,000 and advanced turtles of 100,000.
Returns
1. number The maximum amount of fuel a turtle can hold.
Or
1. "unlimited" If turtles do not consume fuel when moving.
See also
•
getFuelLevel
•
refuel

Changes
•
New in version 1.6
equipLeft()Source
Equip (or unequip) an item on the left side of this turtle.
This finds the item in the currently selected slot and attempts to equip it to the left side of the turtle.
The previous upgrade is removed and placed into the turtle's inventory. If there is no item in the slot,
the previous upgrade is removed, but no new one is equipped.
Returns
1. true If the item was equipped.
Or
1. false If we could not equip the item.
2. string
The reason equipping this item failed.
See also
•
equipRight
Changes
•
New in version 1.6
equipRight()Source
Equip (or unequip) an item on the right side of this turtle.
This finds the item in the currently selected slot and attempts to equip it to the right side of the turtle.
The previous upgrade is removed and placed into the turtle's inventory. If there is no item in the slot,
the previous upgrade is removed, but no new one is equipped.
Returns
1. true If the item was equipped.
Or
1. false If we could not equip the item.
2. string
The reason equipping this item failed.
See also
•
equipLeft
Changes
•
New in version 1.6
inspect()Source

Get information about the block in front of the turtle.
Returns
1. boolean Whether there is a block in front of the turtle.
2. table
| string Information about the block in front, or a message explaining that there is
no block.
Usage
•
local has_block, data = turtle.inspect()
if has_block then
print(textutils.serialise(data))
-- {
-- name = "minecraft:oak_log",
-- state = { axis = "x" },
-- tags = { ["minecraft:logs"] = true, ... },
-- }
else
print("No block in front of the turtle")
end
Changes
•
New in version 1.64
•
Changed in version 1.76: Added block state to return value.
inspectUp()Source
Get information about the block above the turtle.
Returns
1. boolean Whether there is a block above the turtle.
2. table
| string Information about the above below, or a message explaining that there is no
block.
Changes
•
New in version 1.64
inspectDown()Source
Get information about the block below the turtle.
Returns
1. boolean Whether there is a block below the turtle.
2. table
| string Information about the block below, or a message explaining that there is no
block.
Changes
•
New in version 1.64
getItemDetail([slot [, detailed]])Source

Get detailed information about the items in the given slot.
Parameters
1. slot? number The slot to get information about. Defaults to the selected slot.
2. detailed? boolean Whether to include "detailed" information. When true the method will
contain much more information about the item at the cost of taking longer to run.
Returns
1. nil | table Information about the given slot, or nil if it is empty.
Throws
•
If the slot is out of range.
Usage
•
Print the current slot, assuming it contains 13 dirt.
print(textutils.serialise(turtle.getItemDetail()))
-- => {
-- name = "minecraft:dirt",
-- count = 13,
-- }
See also
•
inventory.getItemDetail
Describes the information returned by a detailed query.
Changes
•
New in version 1.64
Last updated on 2024-11-19

☰
Contents
•
slowWrite
•
slowPrint
•
formatTime
•
pagedPrint
•
tabulate
•
pagedTabulate
•
empty_json_array
•
json_null
•
serialize
•
serialise
•
unserialize
•
unserialise
•
serializeJSON
•
serialiseJSON
•
unserializeJSON
•
unserialiseJSON
•
urlEncode
•
complete
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket

•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check

•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked

textutils
Helpful utilities for formatting and manipulating strings.
Changes
•
New in version 1.2
slowWrite(text [, rate])
Slowly writes string text at current cursor position, character-by-
character.
slowPrint(sText [, nRate])
Slowly prints string text at current cursor position, character-by-
character.
formatTime(nTime [,
bTwentyFourHour])
Takes input time and formats it in a more readable format such as
6:30 PM.
pagedPrint(text [,
free_lines])
Prints a given string to the display.
tabulate(...)
Prints tables in a structured form.
pagedTabulate(...)
Prints tables in a structured form, stopping and prompting for input
should the result not fit on the terminal.
empty_json_array
A table representing an empty JSON array, in order to distinguish it
from an empty JSON object.
json_null
A table representing the JSON null value.
serialize(t, opts)
Convert a Lua object into a textual representation, suitable for saving
in a file or pretty-printing.
serialise(t, opts)
Convert a Lua object into a textual representation, suitable for saving
in a file or pretty-printing.
unserialize(s)
Converts a serialised string back into a reassembled Lua object.
unserialise(s)
Converts a serialised string back into a reassembled Lua object.
serializeJSON(...)
Returns a JSON representation of the given data.
serialiseJSON(...)
Returns a JSON representation of the given data.
unserializeJSON(s [,
options])
Converts a serialised JSON string back into a reassembled Lua
object.
unserialiseJSON(s [,
options])
Converts a serialised JSON string back into a reassembled Lua
object.
urlEncode(str)
Replaces certain characters in a string to make it safe for use in
URLs or POST data.
complete(sSearchText [,
tSearchTable])
Provides a list of possible completions for a partial Lua expression.
slowWrite(text [, rate])Source
Slowly writes string text at current cursor position, character-by-character.
Like _G.write, this does not insert a newline at the end.
Parameters
1. text string The the text to write to the screen
2. rate? number The number of characters to write each second, Defaults to 20.

Usage
•
textutils.slowWrite
("Hello, world!")
•
textutils.slowWrite
("Hello, world!", 5)
Changes
•
New in version 1.3
slowPrint(sText [, nRate])Source
Slowly prints string text at current cursor position, character-by-character.
Like print, this inserts a newline after printing.
Parameters
1. sText string The the text to write to the screen
2. nRate? number The number of characters to write each second, Defaults to 20.
Usage
•
textutils.slowPrint
("Hello, world!")
•
textutils.slowPrint
("Hello, world!", 5)
formatTime(nTime [, bTwentyFourHour])Source
Takes input time and formats it in a more readable format such as 6:30 PM.
Parameters
1. nTime number The time to format, as provided by os.time.
2. bTwentyFourHour? boolean Whether to format this as a 24-hour clock (18:30) rather than
a 12-hour one (6:30 AM)
Returns
1. string
The formatted time
Usage
•
Print the current in-game time as a 12-hour clock.
textutils.formatTime(os.time())
•
Print the local time as a 24-hour clock.
textutils.formatTime(os.time("local"), true)
pagedPrint(text [, free_lines])Source
Prints a given string to the display.

If the action can be completed without scrolling, it acts much the same as print; otherwise, it will
throw up a "Press any key to continue" prompt at the bottom of the display. Each press will cause it to
scroll down and write a single line more before prompting again, if need be.
Parameters
1. text string The text to print to the screen.
2. free_lines? number The number of lines which will be automatically scrolled before the
first prompt appears (meaning free_lines + 1 lines will be printed). This can be set to the
cursor's y position - 2 to always try to fill the screen. Defaults to 0, meaning only one line is
displayed before prompting.
Returns
1. number The number of lines printed.
Usage
•
Generates several lines of text and then prints it, paging once the bottom of the terminal is
reached.
local lines = {}
for i = 1, 30 do lines[i] = ("This is line #%d"):format(i) end
local message = table.concat(lines, "\n")
local width, height = term.getCursorPos()
textutils.pagedPrint(message, height - 2)
tabulate(...)Source
Prints tables in a structured form.
This accepts multiple arguments, either a table or a number. When encountering a table, this will be
treated as a table row, with each column width being auto-adjusted.
When encountering a number, this sets the text color of the subsequent rows to it.
Parameters
1. ... { string... } | number The rows and text colors to display.
Usage
•
textutils.tabulate
(
colors.orange, { "1", "2", "3" },
colors.lightBlue, { "A", "B", "C" }
)
Changes
•
New in version 1.3
pagedTabulate(...)Source

Prints tables in a structured form, stopping and prompting for input should the result not fit on the
terminal.
This functions identically to textutils.tabulate, but will prompt for user input should the whole
output not fit on the display.
Parameters
1. ... { string... } | number The rows and text colors to display.
Usage
•
Generates a long table, tabulates it, and prints it to the screen.
local rows = {}
for i = 1, 30 do rows[i] = {("Row #%d"):format(i), math.random(1, 400)} end
textutils.pagedTabulate(colors.orange, {"Column", "Value"}, colors.lightBlue,
table.unpack(rows))
See also
•
textutils.tabulate
•
textutils.pagedPrint
Changes
•
New in version 1.3
empty_json_arraySource
A table representing an empty JSON array, in order to distinguish it from an empty JSON object.
The contents of this table should not be modified.
Usage
•
textutils.serialiseJSON
(textutils.empty_json_array)
See also
•
textutils.serialiseJSON
•
textutils.unserialiseJSON
json_nullSource
A table representing the JSON null value.
The contents of this table should not be modified.
Usage
•
textutils.serialiseJSON
(textutils.json_null)

See also
•
textutils.serialiseJSON
•
textutils.unserialiseJSON
serialize(t, opts)Source
Convert a Lua object into a textual representation, suitable for saving in a file or pretty-printing.
Parameters
1. t The object to serialise
2. opts { compact? = boolean, allow_repetitions? = boolean }
Options for serialisation.
•
compact: Do not emit indentation and other whitespace between terms.
•
allow_repetitions: Relax the check for recursive tables, allowing them to appear
multiple times (as long as tables do not appear inside themselves).
Returns
1. string
The serialised representation
Throws
•
If the object contains a value which cannot be serialised. This includes functions and tables
which appear multiple times.
Usage
•
Serialise a basic table.
textutils.serialise({ 1, 2, 3, a = 1, ["another key"] = { true } })
•
Demonstrates some of the other options
local tbl = { 1, 2, 3 }
print(textutils.serialise({ tbl, tbl }, { allow_repetitions = true }))
print(textutils.serialise(tbl, { compact = true }))
See also
•
cc.pretty.pretty_print
An alternative way to display a table, often more suitable for
pretty printing.
Changes
•
New in version 1.3
•
Changed in version 1.97.0: Added opts argument.
serialise(t, opts)Source
Convert a Lua object into a textual representation, suitable for saving in a file or pretty-printing.

Parameters
1. t The object to serialise
2. opts { compact? = boolean, allow_repetitions? = boolean }
Options for serialisation.
•
compact: Do not emit indentation and other whitespace between terms.
•
allow_repetitions: Relax the check for recursive tables, allowing them to appear
multiple times (as long as tables do not appear inside themselves).
Returns
1. string
The serialised representation
Throws
•
If the object contains a value which cannot be serialised. This includes functions and tables
which appear multiple times.
Usage
•
Serialise a basic table.
textutils.serialise({ 1, 2, 3, a = 1, ["another key"] = { true } })
•
Demonstrates some of the other options
local tbl = { 1, 2, 3 }
print(textutils.serialise({ tbl, tbl }, { allow_repetitions = true }))
print(textutils.serialise(tbl, { compact = true }))
See also
•
cc.pretty.pretty_print
An alternative way to display a table, often more suitable for
pretty printing.
Changes
•
New in version 1.3
•
Changed in version 1.97.0: Added opts argument.
unserialize(s)Source
Converts a serialised string back into a reassembled Lua object.
This is mainly used together with textutils.serialise.
Parameters
1. s string The serialised string to deserialise.

Returns
1. The deserialised object
Or
1. nil If the object could not be deserialised.
Changes
•
New in version 1.3
unserialise(s)Source
Converts a serialised string back into a reassembled Lua object.
This is mainly used together with textutils.serialise.
Parameters
1. s string The serialised string to deserialise.
Returns
1. The deserialised object
Or
1. nil If the object could not be deserialised.
Changes
•
New in version 1.3
serializeJSON(...)Source
Returns a JSON representation of the given data.
This is largely intended for interacting with various functions from the commands API, though may
also be used in making http requests.
Lua has a rather different data model to Javascript/JSON. As a result, some Lua values do not serialise
cleanly into JSON.
•
Lua tables can contain arbitrary key-value pairs, but JSON only accepts arrays, and objects
(which require a string key). When serialising a table, if it only has numeric keys, then it will be
treated as an array. Otherwise, the table will be serialised to an object using the string keys.
Non-string keys (such as numbers or tables) will be dropped.
A consequence of this is that an empty table will always be serialised to an object, not an array.
textutils.empty_json_array may be used to express an empty array.

•
Lua strings are an a sequence of raw bytes, and do not have any specific encoding. However,
JSON strings must be valid unicode. By default, non-ASCII characters in a string are serialised
to their unicode code point (for instance, "\xfe" is converted to "\u00fe"). The
unicode_strings option may be set to treat all input strings as UTF-8.
•
Lua does not distinguish between missing keys (undefined in JS) and ones explicitly set to
null. As a result { x = nil } is serialised to {}. textutils.json_null may be used to
get an explicit null value ({ x = textutils.json_null } will serialise to {"x": null}).
Parameters
1. t The value to serialise. Like textutils.serialise, this should not contain recursive tables
or functions.
2. options? { nbt_style? = boolean, unicode_strings? = boolean,
allow_repetitions? = boolean }
Options for serialisation.
•
nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of
standard JSON.
•
unicode_strings: Whether to treat strings as containing UTF-8 characters instead of
using the default 8-bit character set.
•
allow_repetitions: Relax the check for recursive tables, allowing them to appear
multiple times (as long as tables do not appear inside themselves).
Or
1. t The value to serialise. Like textutils.serialise, this should not contain recursive tables
or functions.
2. bNBTStyle boolean Whether to produce NBT-style JSON (non-quoted keys) instead of
standard JSON.
Returns
1. string
The JSON representation of the input.
Throws
•
If the object contains a value which cannot be serialised. This includes functions and tables
which appear multiple times.
Usage
•
Serialise a simple object
textutils.serialiseJSON({ values = { 1, "2", true } })
•
Serialise an object to a NBT-style string
textutils.serialiseJSON({ values = { 1, "2", true } }, { nbt_style = true })

See also
•
textutils.json_null
Use to serialise a JSON null value.
•
textutils.empty_json_array
Use to serialise a JSON empty array.
Changes
•
New in version 1.7
•
Changed in version 1.106.0: Added options overload and unicode_strings option.
•
Changed in version 1.109.0: Added allow_repetitions option.
serialiseJSON(...)Source
Returns a JSON representation of the given data.
This is largely intended for interacting with various functions from the commands API, though may
also be used in making http requests.
Lua has a rather different data model to Javascript/JSON. As a result, some Lua values do not serialise
cleanly into JSON.
•
Lua tables can contain arbitrary key-value pairs, but JSON only accepts arrays, and objects
(which require a string key). When serialising a table, if it only has numeric keys, then it will be
treated as an array. Otherwise, the table will be serialised to an object using the string keys.
Non-string keys (such as numbers or tables) will be dropped.
A consequence of this is that an empty table will always be serialised to an object, not an array.
textutils.empty_json_array may be used to express an empty array.
•
Lua strings are an a sequence of raw bytes, and do not have any specific encoding. However,
JSON strings must be valid unicode. By default, non-ASCII characters in a string are serialised
to their unicode code point (for instance, "\xfe" is converted to "\u00fe"). The
unicode_strings option may be set to treat all input strings as UTF-8.
•
Lua does not distinguish between missing keys (undefined in JS) and ones explicitly set to
null. As a result { x = nil } is serialised to {}. textutils.json_null may be used to
get an explicit null value ({ x = textutils.json_null } will serialise to {"x": null}).
Parameters
1. t The value to serialise. Like textutils.serialise, this should not contain recursive tables
or functions.
2. options? { nbt_style? = boolean, unicode_strings? = boolean,
allow_repetitions? = boolean }
Options for serialisation.
•
nbt_style: Whether to produce NBT-style JSON (non-quoted keys) instead of
standard JSON.
•
unicode_strings: Whether to treat strings as containing UTF-8 characters instead of
using the default 8-bit character set.
•
allow_repetitions: Relax the check for recursive tables, allowing them to appear
multiple times (as long as tables do not appear inside themselves).

Or
1. t The value to serialise. Like textutils.serialise, this should not contain recursive tables
or functions.
2. bNBTStyle boolean Whether to produce NBT-style JSON (non-quoted keys) instead of
standard JSON.
Returns
1. string
The JSON representation of the input.
Throws
•
If the object contains a value which cannot be serialised. This includes functions and tables
which appear multiple times.
Usage
•
Serialise a simple object
textutils.serialiseJSON({ values = { 1, "2", true } })
•
Serialise an object to a NBT-style string
textutils.serialiseJSON({ values = { 1, "2", true } }, { nbt_style = true })
See also
•
textutils.json_null
Use to serialise a JSON null value.
•
textutils.empty_json_array
Use to serialise a JSON empty array.
Changes
•
New in version 1.7
•
Changed in version 1.106.0: Added options overload and unicode_strings option.
•
Changed in version 1.109.0: Added allow_repetitions option.
unserializeJSON(s [, options])Source
Converts a serialised JSON string back into a reassembled Lua object.
This may be used with textutils.serializeJSON, or when communicating with command blocks
or web APIs.
If a null value is encountered, it is converted into nil. It can be converted into
textutils.json_null with the parse_null option.
If an empty array is encountered, it is converted into textutils.empty_json_array. It can be
converted into a new empty table with the parse_empty_array option.
Parameters
1. s string The serialised string to deserialise.

2. options? { nbt_style? = boolean, parse_null? = boolean,
parse_empty_array? = boolean }
Options which control how this JSON object is parsed.
•
nbt_style: When true, this will accept stringified NBT strings, as produced by many
commands.
•
parse_null: When true, null will be parsed as json_null, rather than nil.
•
parse_empty_array: When false, empty arrays will be parsed as a new table. By
default (or when this value is true), they are parsed as empty_json_array.
Returns
1. The deserialised object
Or
1. nil If the object could not be deserialised.
2. string
A message describing why the JSON string is invalid.
Usage
•
Unserialise a basic JSON object
textutils.unserialiseJSON('{"name": "Steve", "age": null}')
•
Unserialise a basic JSON object, returning null values as json_null.
textutils.unserialiseJSON('{"name": "Steve", "age": null}', { parse_null = true })
See also
•
textutils.json_null
Use to serialize a JSON null value.
•
textutils.empty_json_array
Use to serialize a JSON empty array.
Changes
•
New in version 1.87.0
•
Changed in version 1.100.6: Added parse_empty_array option
unserialiseJSON(s [, options])Source
Converts a serialised JSON string back into a reassembled Lua object.
This may be used with textutils.serializeJSON, or when communicating with command blocks
or web APIs.
If a null value is encountered, it is converted into nil. It can be converted into
textutils.json_null with the parse_null option.
If an empty array is encountered, it is converted into textutils.empty_json_array. It can be
converted into a new empty table with the parse_empty_array option.

Parameters
1. s string The serialised string to deserialise.
2. options? { nbt_style? = boolean, parse_null? = boolean,
parse_empty_array? = boolean }
Options which control how this JSON object is parsed.
•
nbt_style: When true, this will accept stringified NBT strings, as produced by many
commands.
•
parse_null: When true, null will be parsed as json_null, rather than nil.
•
parse_empty_array: When false, empty arrays will be parsed as a new table. By
default (or when this value is true), they are parsed as empty_json_array.
Returns
1. The deserialised object
Or
1. nil If the object could not be deserialised.
2. string
A message describing why the JSON string is invalid.
Usage
•
Unserialise a basic JSON object
textutils.unserialiseJSON('{"name": "Steve", "age": null}')
•
Unserialise a basic JSON object, returning null values as json_null.
textutils.unserialiseJSON('{"name": "Steve", "age": null}', { parse_null = true })
See also
•
textutils.json_null
Use to serialize a JSON null value.
•
textutils.empty_json_array
Use to serialize a JSON empty array.
Changes
•
New in version 1.87.0
•
Changed in version 1.100.6: Added parse_empty_array option
urlEncode(str)Source
Replaces certain characters in a string to make it safe for use in URLs or POST data.
Parameters
1. str string The string to encode

Returns
1. string
The encoded string.
Usage
•
print("https://example.com/?view=" .. textutils.urlEncode("some text&things"))
Changes
•
New in version 1.31
complete(sSearchText [, tSearchTable])Source
Provides a list of possible completions for a partial Lua expression.
If the completed element is a table, suggestions will have . appended to them. Similarly, functions
have ( appended to them.
Parameters
1. sSearchText string The partial expression to complete, such as a variable name or table
index.
2. tSearchTable? table The table to find variables in, defaulting to the global environment
(_G). The function also searches the "parent" environment via the __index metatable field.
Returns
1. { string... } The (possibly empty) list of completions.
Usage
•
textutils.complete
( "pa", _ENV )
See also
•
shell.setCompletionFunction
•
_G.read
Changes
•
New in version 1.74
Last updated on 2024-11-19

☰
Contents
•
nativePaletteColour
•
nativePaletteColor
•
write
•
scroll
•
getCursorPos
•
setCursorPos
•
getCursorBlink
•
setCursorBlink
•
getSize
•
clear
•
clearLine
•
getTextColour
•
getTextColor
•
setTextColour
•
setTextColor
•
getBackgroundColour
•
getBackgroundColor
•
setBackgroundColour
•
setBackgroundColor
•
isColour
•
isColor
•
blit
•
setPaletteColour
•
setPaletteColor
•
getPaletteColour
•
getPaletteColor
•
redirect
•
current
•
native
Types
•
Redirect
Globals
•
_G
•
colors

•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker

Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers

•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
term
Interact with a computer's terminal or monitors, writing text and drawing ASCII graphics.
Writing to the terminal
The simplest operation one can perform on a terminal is displaying (or writing) some text. This can be
performed with the term.write method.
term.write("Hello, world!")
When you write text, this advances the cursor, so the next call to term.write will write text immediately
after the previous one.
term.write("Hello, world!")
term.write("Some more text")
term.getCursorPos and term.setCursorPos can be used to manually change the cursor's position.
term.clear()
term.setCursorPos(1, 1) -- The first column of line 1
term.write("First line")
term.setCursorPos(20, 2) -- The 20th column of line 2
term.write("Second line")
term.write is a relatively basic and low-level function, and does not handle more advanced features such
as line breaks or word wrapping. If you just want to display text to the screen, you probably want to use
print or write instead.
Colours
So far we've been writing text in black and white. However, advanced computers are also capable of
displaying text in a variety of colours, with the term.setTextColour and
term.setBackgroundColour functions.
print("This text is white")
term.setTextColour(colours.green)
print("This text is green")

These functions accept any of the constants from the colors API. Combinations of colours may be
accepted, but will only display a single colour (typically following the behaviour of colors.toBlit).
The paintutils API provides several helpful functions for displaying graphics using
term.setBackgroundColour.
nativePaletteColour(colour)
Get the default palette value for a colour.
nativePaletteColor(colour)
Get the default palette value for a colour.
write(text)
Write text at the current cursor position, moving the cursor to
the end of the text.
scroll(y)
Move all positions up (or down) by y pixels.
getCursorPos()
Get the position of the cursor.
setCursorPos(x, y)
Set the position of the cursor.
getCursorBlink()
Checks if the cursor is currently blinking.
setCursorBlink(blink)
Sets whether the cursor should be visible (and blinking) at the
current cursor position.
getSize()
Get the size of the terminal.
clear()
Clears the terminal, filling it with the current background
colour.
clearLine()
Clears the line the cursor is currently on, filling it with the
current background colour.
getTextColour()
Return the colour that new text will be written as.
getTextColor()
Return the colour that new text will be written as.
setTextColour(colour)
Set the colour that new text will be written as.
setTextColor(colour)
Set the colour that new text will be written as.
getBackgroundColour()
Return the current background colour.
getBackgroundColor()
Return the current background colour.
setBackgroundColour(colour)
Set the current background colour.
setBackgroundColor(colour)
Set the current background colour.
isColour()
Determine if this terminal supports colour.
isColor()
Determine if this terminal supports colour.
blit(text, textColour,
backgroundColour)
Writes text to the terminal with the specific foreground and
background colours.
setPaletteColour(...)
Set the palette for a specific colour.
setPaletteColor(...)
Set the palette for a specific colour.
getPaletteColour(colour)
Get the current palette for a specific colour.
getPaletteColor(colour)
Get the current palette for a specific colour.
redirect(target)
Redirects terminal output to a monitor, a window, or any other
custom terminal object.
current()
Returns the current terminal object of the computer.
native()
Get the native terminal object of the current computer.
nativePaletteColour(colour)Source
Get the default palette value for a colour.

Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Throws
•
When given an invalid colour.
See also
•
term.Redirect.setPaletteColour
To change the palette colour.
Changes
•
New in version 1.81.0
nativePaletteColor(colour)Source
Get the default palette value for a colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Throws
•
When given an invalid colour.
See also
•
term.Redirect.setPaletteColour
To change the palette colour.
Changes
•
New in version 1.81.0
write(text)Source
Write text at the current cursor position, moving the cursor to the end of the text.

Unlike functions like write and print, this does not wrap the text - it simply copies the text to the
current terminal line.
Parameters
1. text string The text to write.
scroll(y)Source
Move all positions up (or down) by y pixels.
Every pixel in the terminal will be replaced by the line y pixels below it. If y is negative, it will copy
pixels from above instead.
Parameters
1. y number The number of lines to move up by. This may be a negative number.
getCursorPos()Source
Get the position of the cursor.
Returns
1. number The x position of the cursor.
2. number The y position of the cursor.
setCursorPos(x, y)Source
Set the position of the cursor. terminal writes will begin from this position.
Parameters
1. x number The new x position of the cursor.
2. y number The new y position of the cursor.
getCursorBlink()Source
Checks if the cursor is currently blinking.
Returns
1. boolean If the cursor is blinking.
Changes
•
New in version 1.80pr1.9
setCursorBlink(blink)Source
Sets whether the cursor should be visible (and blinking) at the current cursor position.
Parameters
1. blink boolean Whether the cursor should blink.
getSize()Source

Get the size of the terminal.
Returns
1. number The terminal's width.
2. number The terminal's height.
clear()Source
Clears the terminal, filling it with the current background colour.
clearLine()Source
Clears the line the cursor is currently on, filling it with the current background colour.
getTextColour()Source
Return the colour that new text will be written as.
Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
getTextColor()Source
Return the colour that new text will be written as.
Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
setTextColour(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.

See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setTextColor(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
getBackgroundColour()Source
Return the current background colour. This is used when writing text and clearing the terminal.
Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
getBackgroundColor()Source
Return the current background colour. This is used when writing text and clearing the terminal.
Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.

Changes
•
New in version 1.74
setBackgroundColour(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setBackgroundColor(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
isColour()Source
Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
isColor()Source

Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
blit(text, textColour, backgroundColour)Source
Writes text to the terminal with the specific foreground and background colours.
As with write, the text will be written at the current cursor location, with the cursor moving to the end
of the text.
textColour and backgroundColour must both be strings the same length as text. All characters
represent a single hexadecimal digit, which is converted to one of CC's colours. For instance, "a"
corresponds to purple.
Parameters
1. text string The text to write.
2. textColour string The corresponding text colours.
3. backgroundColour string The corresponding background colours.
Throws
•
If the three inputs are not the same length.
Usage
•
Prints "Hello, world!" in rainbow text.
term.blit("Hello, world!","01234456789ab","0000000000000")
See also
•
colors
For a list of colour constants, and their hexadecimal values.
Changes
•
New in version 1.74
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setPaletteColour(...)Source
Set the palette for a specific colour.

ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.
2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.
2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)
term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.
term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.
Changes
•
New in version 1.80pr1
setPaletteColor(...)Source
Set the palette for a specific colour.
ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.

2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.
2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)
term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.
term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.
Changes
•
New in version 1.80pr1
getPaletteColour(colour)Source
Get the current palette for a specific colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1
getPaletteColor(colour)Source
Get the current palette for a specific colour.

Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1
redirect(target)Source
Redirects terminal output to a monitor, a window, or any other custom terminal object. Once the
redirect is performed, any calls to a "term" function - or to a function that makes use of a term function,
as print - will instead operate with the new terminal object.
A "terminal object" is simply a table that contains functions with the same names - and general features
- as those found in the term table. For example, a wrapped monitor is suitable.
The redirect can be undone by pointing back to the previous terminal object (which this function
returns whenever you switch).
Parameters
1. target Redirect The terminal redirect the term API will draw to.
Returns
1. Redirect
The previous redirect object, as returned by term.current.
Usage
•
Redirect to a monitor on the right of the computer.
term.redirect(peripheral.wrap("right"))
Changes
•
New in version 1.31
current()Source
Returns the current terminal object of the computer.
Returns
1. Redirect
The current terminal redirect

Usage
•
Create a new window which draws to the current redirect target.
window.create(term.current(), 1, 1, 10, 10)
Changes
•
New in version 1.6
native()Source
Get the native terminal object of the current computer.
It is recommended you do not use this function unless you absolutely have to. In a multitasked
environment, term.native will not be the current terminal object, and so drawing may interfere with
other programs.
Returns
1. Redirect
The native terminal redirect.
Changes
•
New in version 1.6
Types
Redirect
A base class for all objects which interact with a terminal. Namely the term and monitors.
Redirect.write(text)Source
Write text at the current cursor position, moving the cursor to the end of the text.
Unlike functions like write and print, this does not wrap the text - it simply copies the text to the
current terminal line.
Parameters
1. text string The text to write.
Redirect.scroll(y)Source
Move all positions up (or down) by y pixels.
Every pixel in the terminal will be replaced by the line y pixels below it. If y is negative, it will copy
pixels from above instead.
Parameters
1. y number The number of lines to move up by. This may be a negative number.
Redirect.getCursorPos()Source

Get the position of the cursor.
Returns
1. number The x position of the cursor.
2. number The y position of the cursor.
Redirect.setCursorPos(x, y)Source
Set the position of the cursor. terminal writes will begin from this position.
Parameters
1. x number The new x position of the cursor.
2. y number The new y position of the cursor.
Redirect.getCursorBlink()Source
Checks if the cursor is currently blinking.
Returns
1. boolean If the cursor is blinking.
Changes
•
New in version 1.80pr1.9
Redirect.setCursorBlink(blink)Source
Sets whether the cursor should be visible (and blinking) at the current cursor position.
Parameters
1. blink boolean Whether the cursor should blink.
Redirect.getSize()Source
Get the size of the terminal.
Returns
1. number The terminal's width.
2. number The terminal's height.
Redirect.clear()Source
Clears the terminal, filling it with the current background colour.
Redirect.clearLine()Source
Clears the line the cursor is currently on, filling it with the current background colour.
Redirect.getTextColour()Source
Return the colour that new text will be written as.

Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
Redirect.getTextColor()Source
Return the colour that new text will be written as.
Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
Redirect.setTextColour(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
Redirect.setTextColor(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.

See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
Redirect.getBackgroundColour()Source
Return the current background colour. This is used when writing text and clearing the terminal.
Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
Redirect.getBackgroundColor()Source
Return the current background colour. This is used when writing text and clearing the terminal.
Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
Redirect.setBackgroundColour(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.
See also
•
colors
For a list of colour constants.

Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
Redirect.setBackgroundColor(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
Redirect.isColour()Source
Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
Redirect.isColor()Source
Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
Redirect.blit(text, textColour, backgroundColour)Source

Writes text to the terminal with the specific foreground and background colours.
As with write, the text will be written at the current cursor location, with the cursor moving to the end
of the text.
textColour and backgroundColour must both be strings the same length as text. All characters
represent a single hexadecimal digit, which is converted to one of CC's colours. For instance, "a"
corresponds to purple.
Parameters
1. text string The text to write.
2. textColour string The corresponding text colours.
3. backgroundColour string The corresponding background colours.
Throws
•
If the three inputs are not the same length.
Usage
•
Prints "Hello, world!" in rainbow text.
term.blit("Hello, world!","01234456789ab","0000000000000")
See also
•
colors
For a list of colour constants, and their hexadecimal values.
Changes
•
New in version 1.74
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
Redirect.setPaletteColour(...)Source
Set the palette for a specific colour.
ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.
2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.

2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)
term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.
term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.
Changes
•
New in version 1.80pr1
Redirect.setPaletteColor(...)Source
Set the palette for a specific colour.
ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.
2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.
2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)

term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.
term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.
Changes
•
New in version 1.80pr1
Redirect.getPaletteColour(colour)Source
Get the current palette for a specific colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1
Redirect.getPaletteColor(colour)Source
Get the current palette for a specific colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1

Last updated on 2024-11-19

☰
Contents
•
execute
•
run
•
exit
•
dir
•
setDir
•
path
•
setPath
•
resolve
•
resolveProgram
•
programs
•
complete
•
completeProgram
•
setCompletionFunction
•
getCompletionInfo
•
getRunningProgram
•
setAlias
•
clearAlias
•
aliases
•
openTab
•
switchTab
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel

•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject

•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked

shell
The shell API provides access to CraftOS's command line interface.
It allows you to start programs, add completion for a program, and much more.
shell is not a "true" API. Instead, it is a standard program, which injects its API into the programs that it
launches. This allows for multiple shells to run at the same time, but means that the API is not available in
the global environment, and so is unavailable to other APIs.
Programs and the program path
When you run a command with the shell, either from the prompt or from Lua code, the shell API performs
several steps to work out which program to run:
1. Firstly, the shell attempts to resolve aliases. This allows us to use multiple names for a single
command. For example, the list program has two aliases: ls and dir. When you write ls /rom,
that's expanded to list /rom.
2. Next, the shell attempts to find where the program actually is. For this, it uses the program path. This
is a colon separated list of directories, each of which is checked to see if it contains the program.
list or list.lua doesn't exist in . (the current directory), so the shell now looks in
/rom/programs, where list.lua can be found!
3. Finally, the shell reads the file and checks if the file starts with a #!. This is a hashbang, which says
that this file shouldn't be treated as Lua, but instead passed to another program, the name of which
should follow the #!.
Changes
•
Changed in version 1.103.0: Added support for hashbangs.
execute(command, ...)
Run a program with the supplied arguments.
run(...)
Run a program with the supplied arguments.
exit()
Exit the current shell.
dir()
Return the current working directory.
setDir(dir)
Set the current working directory.
path()
Set the path where programs are located.
setPath(path)
Set the current program path.
resolve(path)
Resolve a relative path to an absolute path.
resolveProgram(command)
Resolve a program, using the program path and list of
aliases.
programs([include_hidden])
Return a list of all programs on the path.
complete(sLine)
Complete a shell command line.
completeProgram(program)
Complete the name of a program.
setCompletionFunction(program,
complete)
Set the completion function for a program.
getCompletionInfo()
Get a table containing all completion functions.
getRunningProgram()
Returns the path to the currently running program.

setAlias(command, program)
Add an alias for a program.
clearAlias(command)
Remove an alias.
aliases()
Get the current aliases for this shell.
openTab(...)
Open a new multishell tab running a command.
switchTab(id)
Switch to the multishell tab with the given index.
execute(command, ...)Source
Run a program with the supplied arguments.
Unlike shell.run, each argument is passed to the program verbatim. While shell.run("echo",
"b c") runs echo with b and c, shell.execute("echo", "b c") runs echo with a single
argument b c.
Parameters
1. command string The program to execute.
2. ... string Arguments to this program.
Returns
1. boolean Whether the program exited successfully.
Usage
•
Run paint my-image from within your program:
shell.execute("paint", "my-image")
Changes
•
New in version 1.88.0
run(...)Source
Run a program with the supplied arguments.
All arguments are concatenated together and then parsed as a command line. As a result,
shell.run("program a b") is the same as shell.run("program", "a", "b").
Parameters
1. ... string The program to run and its arguments.
Returns
1. boolean Whether the program exited successfully.
Usage
•
Run paint my-image from within your program:

shell.run("paint", "my-image")
See also
•
shell.execute
Run a program directly without parsing the arguments.
Changes
•
Changed in version 1.80pr1: Programs now get their own environment instead of sharing the
same one.
•
Changed in version 1.83.0: arg is now added to the environment.
exit()Source
Exit the current shell.
This does not terminate your program, it simply makes the shell terminate after your program has
finished. If this is the toplevel shell, then the computer will be shutdown.
dir()Source
Return the current working directory. This is what is displayed before the > of the shell prompt, and is
used by shell.resolve to handle relative paths.
Returns
1. string
The current working directory.
See also
•
setDir
To change the working directory.
setDir(dir)Source
Set the current working directory.
Parameters
1. dir string The new working directory.
Throws
•
If the path does not exist or is not a directory.
Usage
•
Set the working directory to "rom"
shell.setDir("rom")
path()Source
Set the path where programs are located.

The path is composed of a list of directory names in a string, each separated by a colon (:). On normal
turtles will look in the current directory (.), /rom/programs and /rom/programs/turtle folder,
making the path .:/rom/programs:/rom/programs/turtle.
Returns
1. string
The current shell's path.
See also
•
setPath
To change the current path.
setPath(path)Source
Set the current program path.
Be careful to prefix directories with a /. Otherwise they will be searched for from the current directory,
rather than the computer's root.
Parameters
1. path string The new program path.
Changes
•
New in version 1.2
resolve(path)Source
Resolve a relative path to an absolute path.
The fs and io APIs work using absolute paths, and so we must convert any paths relative to the
current directory to absolute ones. This does nothing when the path starts with /.
Parameters
1. path string The path to resolve.
Usage
•
Resolve startup.lua when in the rom folder.
shell.setDir("rom")
print(shell.resolve("startup.lua"))
-- => rom/startup.lua
resolveProgram(command)Source
Resolve a program, using the program path and list of aliases.
Parameters
1. command string The name of the program

Returns
1. string
| nil The absolute path to the program, or nil if it could not be found.
Usage
•
Locate the hello program.
shell.resolveProgram("hello")
-- => rom/programs/fun/hello.lua
Changes
•
New in version 1.2
•
Changed in version 1.80pr1: Now searches for files with and without the .lua extension.
programs([include_hidden])Source
Return a list of all programs on the path.
Parameters
1. include_hidden? boolean Include hidden files. Namely, any which start with ..
Returns
1. { string } A list of available programs.
Usage
•
textutils.tabulate
(shell.programs())
Changes
•
New in version 1.2
complete(sLine)Source
Complete a shell command line.
This accepts an incomplete command, and completes the program name or arguments. For instance, l
will be completed to ls, and ls ro will be completed to ls rom/.
Completion handlers for your program may be registered with shell.setCompletionFunction.
Parameters
1. sLine string The input to complete.
Returns
1. { string } | nil The list of possible completions.

See also
•
_G.read
For more information about completion.
•
shell.completeProgram
•
shell.setCompletionFunction
•
shell.getCompletionInfo
Changes
•
New in version 1.74
completeProgram(program)Source
Complete the name of a program.
Parameters
1. program string The name of a program to complete.
Returns
1. { string } A list of possible completions.
See also
•
cc.shell.completion.program
setCompletionFunction(program, complete)Source
Set the completion function for a program. When the program is entered on the command line, this
program will be called to provide auto-complete information.
The completion function accepts four arguments:
1. The current shell. As completion functions are inherited, this is not guaranteed to be the shell
you registered this function in.
2. The index of the argument currently being completed.
3. The current argument. This may be the empty string.
4. A list of the previous arguments.
For instance, when completing pastebin put rom/st our pastebin completion function will receive
the shell API, an index of 2, rom/st as the current argument, and a "previous" table of { "put" }.
This function may then wish to return a table containing artup.lua, indicating the entire command
should be completed to pastebin put rom/startup.lua.
You completion entries may also be followed by a space, if you wish to indicate another argument is
expected.
Parameters
1. program string The path to the program. This should be an absolute path without the leading
/.
2. complete function(shell: table, index: number, argument: string,
previous: { string }):{ string } | nil The completion function.

See also
•
cc.shell.completion
Various utilities to help with writing completion functions.
•
shell.complete
•
_G.read
For more information about completion.
Changes
•
New in version 1.74
getCompletionInfo()Source
Get a table containing all completion functions.
This should only be needed when building custom shells. Use setCompletionFunction to add a
completion function.
Returns
1. { [string] = { fnComplete = function } } A table mapping the absolute path of
programs, to their completion functions.
getRunningProgram()Source
Returns the path to the currently running program.
Returns
1. string
The absolute path to the running program.
Changes
•
New in version 1.3
setAlias(command, program)Source
Add an alias for a program.
Parameters
1. command string The name of the alias to add.
2. program string The name or path to the program.
Usage
•
Alias vim to the edit program
shell.setAlias("vim", "edit")
Changes
•
New in version 1.2
clearAlias(command)Source
Remove an alias.

Parameters
1. command string The alias name to remove.
aliases()Source
Get the current aliases for this shell.
Aliases are used to allow multiple commands to refer to a single program. For instance, the list
program is aliased to dir or ls. Running ls, dir or list in the shell will all run the list program.
Returns
1. { [string] = string } A table, where the keys are the names of aliases, and the values are
the path to the program.
See also
•
shell.setAlias
•
shell.resolveProgram
This uses aliases when resolving a program name to an absolute
path.
openTab(...)Source
Open a new multishell tab running a command.
This behaves similarly to shell.run, but instead returns the process index.
This function is only available if the multishell API is.
Parameters
1. ... string The command line to run.
Usage
•
Launch the Lua interpreter and switch to it.
local id = shell.openTab("lua")
shell.switchTab(id)
See also
•
shell.run
•
multishell.launch
Changes
•
New in version 1.6
switchTab(id)Source
Switch to the multishell tab with the given index.

Parameters
1. id number The tab to switch to.
See also
•
multishell.setFocus
Changes
•
New in version 1.6
Last updated on 2024-11-19

☰
Contents
•
define
•
undefine
•
set
•
get
•
getDetails
•
unset
•
clear
•
getNames
•
load
•
save
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector

•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click

•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
settings
Read and write configuration options for CraftOS and your programs.
When a computer starts, it reads the current value of settings from the /.settings file. These values then
may be read or modified.
⚠ warning
Calling settings.set does not update the settings file by default. You must call settings.save to
persist values.

Usage
•
Define an basic setting 123 and read its value.
settings.define("my.setting", {
description = "An example setting",
default = 123,
type = "number",
})
print("my.setting = " .. settings.get("my.setting")) -- 123
You can then use the set program to change its value (e.g. set my.setting 456), and then re-run
the example program to check it has changed.
Changes
•
New in version 1.78
define(name [, options]) Define a new setting, optional specifying various properties about it.
undefine(name)
Remove a definition of a setting.
set(name, value)
Set the value of a setting.
get(name [, default])
Get the value of a setting.
getDetails(name)
Get details about a specific setting.
unset(name)
Remove the value of a setting, setting it to the default.
clear()
Resets the value of all settings.
getNames()
Get the names of all currently defined settings.
load([path=".settings"]) Load settings from the given file.
save([path=".settings"]) Save settings to the given file.
define(name [, options])Source
Define a new setting, optional specifying various properties about it.
While settings do not have to be added before being used, doing so allows you to provide defaults and
additional metadata.
Parameters
1. name string The name of this option
2. options? { description? = string, default? = any, type? = string }
Options for this setting. This table accepts the following fields:
•
description: A description which may be printed when running the set program.
•
default: A default value, which is returned by settings.get if the setting has not
been changed.
•
type: Require values to be of this type. Setting the value to another type will error.
Changes
•
New in version 1.87.0
undefine(name)Source

Remove a definition of a setting.
If a setting has been changed, this does not remove its value. Use settings.unset for that.
Parameters
1. name string The name of this option
Changes
•
New in version 1.87.0
set(name, value)Source
Set the value of a setting.
⚠ warning
Calling settings.set does not update the settings file by default. You must call settings.save to
persist values.
Parameters
1. name string The name of the setting to set
2. value The setting's value. This cannot be nil, and must be serialisable by
textutils.serialize.
Throws
•
If this value cannot be serialised
See also
•
settings.unset
get(name [, default])Source
Get the value of a setting.
Parameters
1. name string The name of the setting to get.
2. default? The value to use should there be pre-existing value for this setting. If not given, it
will use the setting's default value if given, or nil otherwise.
Returns
1. The setting's, or the default if the setting has not been changed.
Changes
•
Changed in version 1.87.0: Now respects default value if pre-defined and default is unset.
getDetails(name)Source

Get details about a specific setting.
Parameters
1. name string The name of the setting to get.
Returns
1. { description? = string, default? = any, type? = string, value? =
any } Information about this setting. This includes all information from settings.define,
as well as this setting's value.
Changes
•
New in version 1.87.0
unset(name)Source
Remove the value of a setting, setting it to the default.
settings.get will return the default value until the setting's value is set, or the computer is rebooted.
Parameters
1. name string The name of the setting to unset.
See also
•
settings.set
•
settings.clear
clear()Source
Resets the value of all settings. Equivalent to calling settings.unset on every setting.
See also
•
settings.unset
getNames()Source
Get the names of all currently defined settings.
Returns
1. { string } An alphabetically sorted list of all currently-defined settings.
load([path=".settings"])Source
Load settings from the given file.
Existing settings will be merged with any pre-existing ones. Conflicting entries will be overwritten, but
any others will be preserved.

Parameters
1. path? string = ".settings" The file to load from.
Returns
1. boolean Whether settings were successfully read from this file. Reasons for failure may
include the file not existing or being corrupted.
See also
•
settings.save
Changes
•
Changed in version 1.87.0: path is now optional.
save([path=".settings"])Source
Save settings to the given file.
This will entirely overwrite the pre-existing file. Settings defined in the file, but not currently loaded
will be removed.
Parameters
1. path? string = ".settings" The path to save settings to.
Returns
1. boolean If the settings were successfully saved.
See also
•
settings.load
Changes
•
Changed in version 1.87.0: path is now optional.
Last updated on 2024-11-19

☰
Contents
•
getSides
•
setOutput
•
getOutput
•
getInput
•
setAnalogOutput
•
setAnalogueOutput
•
getAnalogOutput
•
getAnalogueOutput
•
getAnalogInput
•
getAnalogueInput
•
setBundledOutput
•
getBundledOutput
•
getBundledInput
•
testBundledInput
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell

•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up

•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
redstone
Get and set redstone signals adjacent to this computer.
The redstone library exposes three "types" of redstone control:

•
Binary input/output (setOutput/getInput): These simply check if a redstone wire has any input or
output. A signal strength of 1 and 15 are treated the same.
•
Analogue input/output (setAnalogOutput/getAnalogInput): These work with the actual signal
strength of the redstone wired, from 0 to 15.
•
Bundled cables (setBundledOutput/getBundledInput): These interact with "bundled" cables,
such as those from Project:Red. These allow you to send 16 separate on/off signals. Each channel
corresponds to a colour, with the first being colors.white and the last colors.black.
Whenever a redstone input changes, a redstone event will be fired. This may be used instead of repeativly
polling.
This module may also be referred to as rs. For example, one may call rs.getSides() instead of
getSides.
Usage
•
Toggle the redstone signal above the computer every 0.5 seconds.
while true do
redstone.setOutput("top", not redstone.getOutput("top"))
sleep(0.5)
end
•
Mimic a redstone comparator in subtraction mode.
while true do
local rear = rs.getAnalogueInput("back")
local sides = math.max(rs.getAnalogueInput("left"), rs.getAnalogueInput("right"))
rs.setAnalogueOutput("front", math.max(rear - sides, 0))
os.pullEvent("redstone") -- Wait for a change to inputs.
end
getSides()
Returns a table containing the six sides of the computer.
setOutput(side, on)
Turn the redstone signal of a specific side on or off.
getOutput(side)
Get the current redstone output of a specific side.
getInput(side)
Get the current redstone input of a specific side.
setAnalogOutput(side, value) Set the redstone signal strength for a specific side.
setAnalogueOutput(side,
value)
Set the redstone signal strength for a specific side.
getAnalogOutput(side)
Get the redstone output signal strength for a specific side.
getAnalogueOutput(side)
Get the redstone output signal strength for a specific side.
getAnalogInput(side)
Get the redstone input signal strength for a specific side.
getAnalogueInput(side)
Get the redstone input signal strength for a specific side.
setBundledOutput(side,
output)
Set the bundled cable output for a specific side.
getBundledOutput(side)
Get the bundled cable output for a specific side.
getBundledInput(side)
Get the bundled cable input for a specific side.
testBundledInput(side, mask) Determine if a specific combination of colours are on for the given
side.
getSides()Source

Returns a table containing the six sides of the computer. Namely, "top", "bottom", "left", "right",
"front" and "back".
Returns
1. { string... } A table of valid sides.
Changes
•
New in version 1.2
setOutput(side, on)Source
Turn the redstone signal of a specific side on or off.
Parameters
1. side string The side to set.
2. on boolean Whether the redstone signal should be on or off. When on, a signal strength of 15
is emitted.
getOutput(side)Source
Get the current redstone output of a specific side.
Parameters
1. side string The side to get.
Returns
1. boolean Whether the redstone output is on or off.
See also
•
setOutput
getInput(side)Source
Get the current redstone input of a specific side.
Parameters
1. side string The side to get.
Returns
1. boolean Whether the redstone input is on or off.
setAnalogOutput(side, value)Source
Set the redstone signal strength for a specific side.

Parameters
1. side string The side to set.
2. value number The signal strength between 0 and 15.
Throws
•
If value is not between 0 and 15.
Changes
•
New in version 1.51
setAnalogueOutput(side, value)Source
Set the redstone signal strength for a specific side.
Parameters
1. side string The side to set.
2. value number The signal strength between 0 and 15.
Throws
•
If value is not between 0 and 15.
Changes
•
New in version 1.51
getAnalogOutput(side)Source
Get the redstone output signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The output signal strength, between 0 and 15.
See also
•
setAnalogOutput
Changes
•
New in version 1.51
getAnalogueOutput(side)Source
Get the redstone output signal strength for a specific side.

Parameters
1. side string The side to get.
Returns
1. number The output signal strength, between 0 and 15.
See also
•
setAnalogOutput
Changes
•
New in version 1.51
getAnalogInput(side)Source
Get the redstone input signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The input signal strength, between 0 and 15.
Changes
•
New in version 1.51
getAnalogueInput(side)Source
Get the redstone input signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The input signal strength, between 0 and 15.
Changes
•
New in version 1.51
setBundledOutput(side, output)Source
Set the bundled cable output for a specific side.

Parameters
1. side string The side to set.
2. output number The colour bitmask to set.
See also
•
colors.subtract
For removing a colour from the bitmask.
•
colors.combine
For adding a color to the bitmask.
getBundledOutput(side)Source
Get the bundled cable output for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The bundle cable's output.
getBundledInput(side)Source
Get the bundled cable input for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The bundle cable's input.
See also
•
testBundledInput
To determine if a specific colour is set.
testBundledInput(side, mask)Source
Determine if a specific combination of colours are on for the given side.
Parameters
1. side string The side to test.
2. mask number The mask to test.
Returns
1. boolean If the colours are on.
Usage
•
Check if colors.white and colors.black are on above this block.

print(redstone.testBundledInput("top", colors.combine(colors.white, colors.black)))
See also
•
getBundledInput
Last updated on 2024-11-19

☰
Contents
•
CHANNEL_BROADCAST
•
CHANNEL_REPEAT
•
MAX_ID_CHANNELS
•
open
•
close
•
isOpen
•
send
•
broadcast
•
receive
•
host
•
unhost
•
lookup
•
run
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term

•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message

•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
rednet
Communicate with other computers by using modems. rednet provides a layer of abstraction on top of the
main modem peripheral, making it slightly easier to use.

Basic usage
In order to send a message between two computers, each computer must have a modem on one of its sides (or
in the case of pocket computers and turtles, the modem must be equipped as an upgrade). The two computers
should then call rednet.open, which sets up the modems ready to send and receive messages.
Once rednet is opened, you can send messages using rednet.send and receive them using
rednet.receive. It's also possible to send a message to every rednet-using computer using
rednet.broadcast.
⚠ Network security
While rednet provides a friendly way to send messages to specific computers, it doesn't provide any
guarantees about security. Other computers could be listening in to your messages, or even pretending to
send messages from other computers!
If you're playing on a multi-player server (or at least one where you don't trust other players), it's worth
encrypting or signing your rednet messages.
Protocols and hostnames
Several rednet messages accept "protocol"s - simple string names describing what a message is about. When
sending messages using rednet.send and rednet.broadcast, you can optionally specify a protocol for
the message. This same protocol can then be given to rednet.receive, to ignore all messages not using
this protocol.
It's also possible to look-up computers based on protocols, providing a basic system for service discovery and
DNS. A computer can advertise that it supports a particular protocol with rednet.host, also providing a
friendly "hostname". Other computers may then find all computers which support this protocol using
rednet.lookup.
See also
•
rednet_message
Queued when a rednet message is received.
•
modem
Rednet is built on top of the modem peripheral. Modems provide a more bare-bones but
flexible interface.
Changes
•
New in version 1.2
CHANNEL_BROADCAST = 65535 The channel used by the Rednet API to broadcast messages.
CHANNEL_REPEAT = 65533
The channel used by the Rednet API to repeat messages.
MAX_ID_CHANNELS = 65500
The number of channels rednet reserves for computer IDs.
open(modem)
Opens a modem with the given peripheral name, allowing it to send
and receive messages over rednet.
close([modem])
Close a modem with the given peripheral name, meaning it can no
longer send and receive rednet messages.
isOpen([modem])
Determine if rednet is currently open.
send(recipient, message [,
protocol])
Allows a computer or turtle with an attached modem to send a message
intended for a computer with a specific ID.

broadcast(message [,
protocol])
Broadcasts a string message over the predefined CHANNEL_BROADCAST
channel.
receive([protocol_filter
[, timeout]])
Wait for a rednet message to be received, or until nTimeout seconds
have elapsed.
host(protocol, hostname)
Register the system as "hosting" the desired protocol under the
specified name.
unhost(protocol)
Stop hosting a specific protocol, meaning it will no longer respond to
rednet.lookup requests.
lookup(protocol [,
hostname])
Search the local rednet network for systems hosting the desired protocol
and returns any computer IDs that respond as "r...
run()
Listen for modem messages and converts them into rednet messages,
which may then be received.
CHANNEL_BROADCAST = 65535Source
The channel used by the Rednet API to broadcast messages.
CHANNEL_REPEAT = 65533Source
The channel used by the Rednet API to repeat messages.
MAX_ID_CHANNELS = 65500Source
The number of channels rednet reserves for computer IDs. Computers with IDs greater or equal to this
limit wrap around to 0.
open(modem)Source
Opens a modem with the given peripheral name, allowing it to send and receive messages over
rednet.
This will open the modem on two channels: one which has the same ID as the computer, and another
on the broadcast channel.
Parameters
1. modem string The name of the modem to open.
Throws
•
If there is no such modem with the given name
Usage
•
Open rednet on the back of the computer, allowing you to send and receive rednet messages
using it.
rednet.open("back")
•
Open rednet on all attached modems. This abuses the "filter" argument to peripheral.find.
peripheral.find("modem", rednet.open)

See also
•
rednet.close
•
rednet.isOpen
close([modem])Source
Close a modem with the given peripheral name, meaning it can no longer send and receive rednet
messages.
Parameters
1. modem? string The side the modem exists on. If not given, all open modems will be closed.
Throws
•
If there is no such modem with the given name
See also
•
rednet.open
isOpen([modem])Source
Determine if rednet is currently open.
Parameters
1. modem? string Which modem to check. If not given, all connected modems will be checked.
Returns
1. boolean If the given modem is open.
See also
•
rednet.open
Changes
•
New in version 1.31
send(recipient, message [, protocol])Source
Allows a computer or turtle with an attached modem to send a message intended for a computer with a
specific ID. At least one such modem must first be opened before sending is possible.
Assuming the target was in range and also had a correctly opened modem, the target computer may
then use rednet.receive to collect the message.
Parameters
1. recipient number The ID of the receiving computer.

2. message The message to send. Like with modem.transmit, this can contain any primitive
type (numbers, booleans and strings) as well as tables. Other types (like functions), as well as
metatables, will not be transmitted.
3. protocol? string The "protocol" to send this message under. When using
rednet.receive one can filter to only receive messages sent under a particular protocol.
Returns
1. boolean If this message was successfully sent (i.e. if rednet is currently open). Note, this does
not guarantee the message was actually received.
Usage
•
Send a message to computer #2.
rednet.send(2, "Hello from rednet!")
See also
•
rednet.receive
Changes
•
Changed in version 1.6: Added protocol parameter.
•
Changed in version 1.82.0: Now returns whether the message was successfully sent.
broadcast(message [, protocol])Source
Broadcasts a string message over the predefined CHANNEL_BROADCAST channel. The message will be
received by every device listening to rednet.
Parameters
1. message The message to send. This should not contain coroutines or functions, as they will be
converted to nil.
2. protocol? string The "protocol" to send this message under. When using
rednet.receive one can filter to only receive messages sent under a particular protocol.
Usage
•
Broadcast the words "Hello, world!" to every computer using rednet.
rednet.broadcast("Hello, world!")
See also
•
rednet.receive
Changes
•
Changed in version 1.6: Added protocol parameter.
receive([protocol_filter [, timeout]])Source

Wait for a rednet message to be received, or until nTimeout seconds have elapsed.
Parameters
1. protocol_filter? string The protocol the received message must be sent with. If
specified, any messages not sent under this protocol will be discarded.
2. timeout? number The number of seconds to wait if no message is received.
Returns
1. number The computer which sent this message
2. The received message
3. string
| nil The protocol this message was sent under.
Or
1. nil If the timeout elapsed and no message was received.
Usage
•
Receive a rednet message.
local id, message = rednet.receive()
print(("Computer %d sent message %s"):format(id, message))
•
Receive a message, stopping after 5 seconds if no message was received.
local id, message = rednet.receive(nil, 5)
if not id then
printError("No message received")
else
print(("Computer %d sent message %s"):format(id, message))
end
•
Receive a message from computer #2.
local id, message
repeat
id, message = rednet.receive()
until id == 2
print(message)
See also
•
rednet.broadcast
•
rednet.send
Changes
•
Changed in version 1.6: Added protocol filter parameter.
host(protocol, hostname)Source

Register the system as "hosting" the desired protocol under the specified name. If a rednet lookup is
performed for that protocol (and maybe name) on the same network, the registered system will
automatically respond via a background process, hence providing the system performing the lookup
with its ID number.
Multiple computers may not register themselves on the same network as having the same names
against the same protocols, and the title localhost is specifically reserved. They may, however, share
names as long as their hosted protocols are different, or if they only join a given network after
"registering" themselves before doing so (eg while offline or part of a different network).
Parameters
1. protocol string The protocol this computer provides.
2. hostname string The name this computer exposes for the given protocol.
Throws
•
If trying to register a hostname which is reserved, or currently in use.
See also
•
rednet.unhost
•
rednet.lookup
Changes
•
New in version 1.6
unhost(protocol)Source
Stop hosting a specific protocol, meaning it will no longer respond to rednet.lookup requests.
Parameters
1. protocol string The protocol to unregister your self from.
Changes
•
New in version 1.6
lookup(protocol [, hostname])Source
Search the local rednet network for systems hosting the desired protocol and returns any computer IDs
that respond as "registered" against it.
If a hostname is specified, only one ID will be returned (assuming an exact match is found).
Parameters
1. protocol string The protocol to search for.
2. hostname? string The hostname to search for.

Returns
1. number... A list of computer IDs hosting the given protocol.
Or
1. number | nil The computer ID with the provided hostname and protocol, or nil if none
exists.
Usage
•
Find all computers which are hosting the "chat" protocol.
local computers = {rednet.lookup("chat")}
print(#computers .. " computers available to chat")
for _, computer in pairs(computers) do
print("Computer #" .. computer)
end
•
Find a computer hosting the "chat" protocol with a hostname of "my_host".
local id = rednet.lookup("chat", "my_host")
if id then
print("Found my_host at computer #" .. id)
else
printError("Cannot find my_host")
end
Changes
•
New in version 1.6
run()Source
Listen for modem messages and converts them into rednet messages, which may then be received.
This is automatically started in the background on computer startup, and should not be called manually.
Last updated on 2024-11-19

☰
Contents
•
equipBack
•
unequipBack
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
pocket
Control the current pocket computer, adding or removing upgrades.
This API is only available on pocket computers. As such, you may use its presence to determine what kind of
computer you are using:
if pocket then
print("On a pocket computer")
else
print("On something else")
end
Recipes
Pocket Computer

Advanced Pocket Computer

equipBack()
Search the player's inventory for another upgrade, replacing the existing one with that
item if found.
unequipBack() Remove the pocket computer's current upgrade.
equipBack()Source
Search the player's inventory for another upgrade, replacing the existing one with that item if found.
This inventory search starts from the player's currently selected slot, allowing you to prioritise
upgrades.
Returns
1. boolean If an item was equipped.
2. string
| nil The reason an item was not equipped.
unequipBack()Source
Remove the pocket computer's current upgrade.
Returns
1. boolean If the upgrade was unequipped.
2. string
| nil The reason an upgrade was not unequipped.
Last updated on 2024-11-19

☰
Contents
•
getNames
•
isPresent
•
getType
•
hasType
•
getMethods
•
getName
•
call
•
wrap
•
find
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
peripheral
Find and control peripherals attached to this computer.
Peripherals are blocks (or turtle and pocket computer upgrades) which can be controlled by a computer. For
instance, the speaker peripheral allows a computer to play music and the monitor peripheral allows you to
display text in the world.

Referencing peripherals
Computers can interact with adjacent peripherals. Each peripheral is given a name based on which direction
it is in. For instance, a disk drive below your computer will be called "bottom" in your Lua code, one to the
left called "left" , and so on for all 6 directions ("bottom", "top", "left", "right", "front",
"back").
You can list the names of all peripherals with the peripherals program, or the peripheral.getNames
function.
It's also possible to use peripherals which are further away from your computer through the use of Wired
Modems. Place one modem against your computer (you may need to sneak and right click), run Networking
Cable to your peripheral, and then place another modem against that block. You can then right click the
modem to use (or attach) the peripheral. This will print a peripheral name to chat, which can then be used
just like a direction name to access the peripheral. You can click on the message to copy the name to your
clipboard.
Using peripherals
Once you have the name of a peripheral, you can call functions on it using the peripheral.call function.
This takes the name of our peripheral, the name of the function we want to call, and then its arguments.
🛈 info
Some bits of the peripheral API call peripheral functions methods instead (for example, the
peripheral.getMethods function). Don't worry, they're the same thing!
Let's say we have a monitor above our computer (and so "top") and want to write some text to it. We'd write
the following:
peripheral.call("top", "write", "This is displayed on a monitor!")
Once you start calling making a couple of peripheral calls this can get very repetitive, and so we can wrap a
peripheral. This builds a table of all the peripheral's functions so you can use it like an API or module.
For instance, we could have written the above example as follows:
local my_monitor = peripheral.wrap("top")
my_monitor.write("This is displayed on a monitor!")
Finding peripherals
Sometimes when you're writing a program you don't care what a peripheral is called, you just need to know
it's there. For instance, if you're writing a music player, you just need a speaker - it doesn't matter if it's above
or below the computer.
Thankfully there's a quick way to do this: peripheral.find. This takes a peripheral type and returns all
the attached peripherals which are of this type.
What is a peripheral type though? This is a string which describes what a peripheral is, and so what functions
are available on it. For instance, speakers are just called "speaker", and monitors "monitor". Some
peripherals might have more than one type - a Minecraft chest is both a "minecraft:chest" and
"inventory".

You can get all the types a peripheral has with peripheral.getType, and check a peripheral is a specific
type with peripheral.hasType.
To return to our original example, let's use peripheral.find to find an attached speaker:
local speaker = peripheral.find("speaker")
speaker.playNote("harp")
See also
•
peripheral
This event is fired whenever a new peripheral is attached.
•
peripheral_detach
This event is fired whenever a peripheral is detached.
Changes
•
New in version 1.3
•
Changed in version 1.51: Add support for wired modems.
•
Changed in version 1.99: Peripherals can have multiple types.
getNames()
Provides a list of all peripherals available.
isPresent(name)
Determines if a peripheral is present with the given name.
getType(peripheral)
Get the types of a named or wrapped peripheral.
hasType(peripheral,
peripheral_type)
Check if a peripheral is of a particular type.
getMethods(name)
Get all available methods for the peripheral with the given name.
getName(peripheral)
Get the name of a peripheral wrapped with peripheral.wrap.
call(name, method, ...)
Call a method on the peripheral with the given name.
wrap(name)
Get a table containing all functions available on a peripheral.
find(ty [, filter])
Find all peripherals of a specific type, and return the wrapped
peripherals.
getNames()Source
Provides a list of all peripherals available.
If a device is located directly next to the system, then its name will be listed as the side it is attached to.
If a device is attached via a Wired Modem, then it'll be reported according to its name on the wired
network.
Returns
1. { string... } A list of the names of all attached peripherals.
Changes
•
New in version 1.51
isPresent(name)Source
Determines if a peripheral is present with the given name.

Parameters
1. name string The side or network name that you want to check.
Returns
1. boolean If a peripheral is present with the given name.
Usage
•
peripheral.isPresent
("top")
•
peripheral.isPresent
("monitor_0")
getType(peripheral)Source
Get the types of a named or wrapped peripheral.
Parameters
1. peripheral string | table The name of the peripheral to find, or a wrapped peripheral
instance.
Returns
1. string
... The peripheral's types, or nil if it is not present.
Usage
•
Get the type of a peripheral above this computer.
peripheral.getType("top")
Changes
•
Changed in version 1.88.0: Accepts a wrapped peripheral as an argument.
•
Changed in version 1.99: Now returns multiple types.
hasType(peripheral, peripheral_type)Source
Check if a peripheral is of a particular type.
Parameters
1. peripheral string | table The name of the peripheral or a wrapped peripheral instance.
2. peripheral_type string The type to check.
Returns
1. boolean | nil If a peripheral has a particular type, or nil if it is not present.

Changes
•
New in version 1.99
getMethods(name)Source
Get all available methods for the peripheral with the given name.
Parameters
1. name string The name of the peripheral to find.
Returns
1. { string... } | nil A list of methods provided by this peripheral, or nil if it is not
present.
getName(peripheral)Source
Get the name of a peripheral wrapped with peripheral.wrap.
Parameters
1. peripheral table The peripheral to get the name of.
Returns
1. string
The name of the given peripheral.
Changes
•
New in version 1.88.0
call(name, method, ...)Source
Call a method on the peripheral with the given name.
Parameters
1. name string The name of the peripheral to invoke the method on.
2. method string The name of the method
3. ... Additional arguments to pass to the method
Returns
1. The return values of the peripheral method.
Usage
•
Open the modem on the top of this computer.
peripheral.call("top", "open", 1)
wrap(name)Source

Get a table containing all functions available on a peripheral. These can then be called instead of using
peripheral.call every time.
Parameters
1. name string The name of the peripheral to wrap.
Returns
1. table
| nil The table containing the peripheral's methods, or nil if there is no peripheral
present with the given name.
Usage
•
Open the modem on the top of this computer.
local modem = peripheral.wrap("top")
modem.open(1)
find(ty [, filter])Source
Find all peripherals of a specific type, and return the wrapped peripherals.
Parameters
1. ty string The type of peripheral to look for.
2. filter? function(name: string, wrapped: table):boolean A filter function,
which takes the peripheral's name and wrapped table and returns if it should be included in the
result.
Returns
1. table
... 0 or more wrapped peripherals matching the given filters.
Usage
•
Find all monitors and store them in a table, writing "Hello" on each one.
local monitors = { peripheral.find("monitor") }
for _, monitor in pairs(monitors) do
monitor.write("Hello")
end
•
Find all wireless modems connected to this computer.
local modems = { peripheral.find("modem", function(name, modem)
return modem.isWireless() -- Check this modem is wireless.
end) }
•
This abuses the filter argument to call rednet.open on every modem.
peripheral.find("modem", rednet.open)

Changes
•
New in version 1.6
Last updated on 2024-11-19

☰
Contents
•
waitForAny
•
waitForAll
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
parallel
A simple way to run several functions at once.
Functions are not actually executed simultaneously, but rather this API will automatically switch between
them whenever they yield (e.g. whenever they call coroutine.yield, or functions that call that - such as
os.pullEvent - or functions that call that, etc - basically, anything that causes the function to "pause").
Each function executed in "parallel" gets its own copy of the event queue, and so "event consuming"
functions (again, mostly anything that causes the script to pause - eg os.sleep, rednet.receive, most of
the turtle API, etc) can safely be used in one without affecting the event queue accessed by the other.
⚠ warning
When using this API, be careful to pass the functions you want to run in parallel, and not the result of calling
those functions.
For instance, the following is correct:
local function do_sleep() sleep(1) end
parallel.waitForAny(do_sleep, rednet.receive)

but the following is NOT:
local function do_sleep() sleep(1) end
parallel.waitForAny(do_sleep(), rednet.receive)
Changes
•
New in version 1.2
waitForAny(...) Switches between execution of the functions, until any of them finishes.
waitForAll(...) Switches between execution of the functions, until all of them are finished.
waitForAny(...)Source
Switches between execution of the functions, until any of them finishes. If any of the functions errors,
the message is propagated upwards from the parallel.waitForAny call.
Parameters
1. ... function The functions this task will run
Usage
•
Print a message every second until the q key is pressed.
local function tick()
while true do
os.sleep(1)
print("Tick")
end
end
local function wait_for_q()
repeat
local _, key = os.pullEvent("key")
until key == keys.q
print("Q was pressed!")
end
parallel.waitForAny(tick, wait_for_q)
print("Everything done!")
waitForAll(...)Source
Switches between execution of the functions, until all of them are finished. If any of the functions
errors, the message is propagated upwards from the parallel.waitForAll call.
Parameters
1. ... function The functions this task will run
Usage
•
Start off two timers and wait for them both to run.
local function a()
os.sleep(1)

 print("A is done")
end
local function b()
os.sleep(3)
print("B is done")
end
parallel.waitForAll(a, b)
print("Everything done!")
Last updated on 2024-11-19

☰
Contents
•
parseImage
•
loadImage
•
drawPixel
•
drawLine
•
drawBox
•
drawFilledBox
•
drawImage
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
paintutils
Utilities for drawing more complex graphics, such as pixels, lines and images.
Changes
•
New in version 1.45
parseImage(image)
Parses an image from a multi-line string
loadImage(path)
Loads an image from a file.
drawPixel(xPos, yPos [,
colour])
Draws a single pixel to the current term at the specified position.
drawLine(startX, startY, endX, Draws a straight line from the start to end position.

endY [, colour])
drawBox(startX, startY, endX,
endY [, colour])
Draws the outline of a box on the current term from the specified
start position to the specified end position.
drawFilledBox(startX, startY,
endX, endY [, colour])
Draws a filled box on the current term from the specified start
position to the specified end position.
drawImage(image, xPos, yPos)
Draw an image loaded by paintutils.parseImage or
paintutils.loadImage.
parseImage(image)Source
Parses an image from a multi-line string
Parameters
1. image string The string containing the raw-image data.
Returns
1. table
The parsed image data, suitable for use with paintutils.drawImage.
Changes
•
New in version 1.80pr1
loadImage(path)Source
Loads an image from a file.
You can create a file suitable for being loaded using the paint program.
Parameters
1. path string The file to load.
Returns
1. table
| nil The parsed image data, suitable for use with paintutils.drawImage, or nil
if the file does not exist.
Usage
•
Load an image and draw it.
local image = paintutils.loadImage("data/example.nfp")
paintutils.drawImage(image, term.getCursorPos())
drawPixel(xPos, yPos [, colour])Source
Draws a single pixel to the current term at the specified position.
Be warned, this may change the position of the cursor and the current background colour. You should
not expect either to be preserved.

Parameters
1. xPos number The x position to draw at, where 1 is the far left.
2. yPos number The y position to draw at, where 1 is the very top.
3. colour? number The color of this pixel. This will be the current background colour if not
specified.
drawLine(startX, startY, endX, endY [, colour])Source
Draws a straight line from the start to end position.
Be warned, this may change the position of the cursor and the current background colour. You should
not expect either to be preserved.
Parameters
1. startX number The starting x position of the line.
2. startY number The starting y position of the line.
3. endX number The end x position of the line.
4. endY number The end y position of the line.
5. colour? number The color of this pixel. This will be the current background colour if not
specified.
Usage
•
paintutils.drawLine
(2, 3, 30, 7, colors.red)
drawBox(startX, startY, endX, endY [, colour])Source
Draws the outline of a box on the current term from the specified start position to the specified end
position.
Be warned, this may change the position of the cursor and the current background colour. You should
not expect either to be preserved.
Parameters
1. startX number The starting x position of the line.
2. startY number The starting y position of the line.
3. endX number The end x position of the line.
4. endY number The end y position of the line.
5. colour? number The color of this pixel. This will be the current background colour if not
specified.
Usage
•
paintutils.drawBox
(2, 3, 30, 7, colors.red)
drawFilledBox(startX, startY, endX, endY [, colour])Source
Draws a filled box on the current term from the specified start position to the specified end position.

Be warned, this may change the position of the cursor and the current background colour. You should
not expect either to be preserved.
Parameters
1. startX number The starting x position of the line.
2. startY number The starting y position of the line.
3. endX number The end x position of the line.
4. endY number The end y position of the line.
5. colour? number The color of this pixel. This will be the current background colour if not
specified.
Usage
•
paintutils.drawFilledBox
(2, 3, 30, 7, colors.red)
drawImage(image, xPos, yPos)Source
Draw an image loaded by paintutils.parseImage or paintutils.loadImage.
Parameters
1. image table The parsed image data.
2. xPos number The x position to start drawing at.
3. yPos number The y position to start drawing at.
Last updated on 2024-11-19

☰
Contents
•
loadAPI
•
unloadAPI
•
pullEvent
•
pullEventRaw
•
sleep
•
version
•
run
•
queueEvent
•
startTimer
•
cancelTimer
•
setAlarm
•
cancelAlarm
•
shutdown
•
reboot
•
getComputerID
•
computerID
•
getComputerLabel
•
computerLabel
•
setComputerLabel
•
clock
•
time
•
day
•
epoch
•
date
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys

•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm

•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked

os
The os API allows interacting with the current computer.
loadAPI(path)
Loads the given API into the global environment.
unloadAPI(name)
Unloads an API which was loaded by os.loadAPI.
pullEvent([filter])
Pause execution of the current thread and waits for any events matching
filter.
pullEventRaw([filter]) Pause execution of the current thread and waits for events, including the
terminate event.
sleep(time)
Pauses execution for the specified number of seconds, alias of _G.sleep.
version()
Get the current CraftOS version (for example, CraftOS 1.9).
run(env, path, ...)
Run the program at the given path with the specified environment and
arguments.
queueEvent(name, ...)
Adds an event to the event queue.
startTimer(time)
Starts a timer that will run for the specified number of seconds.
cancelTimer(token)
Cancels a timer previously started with startTimer.
setAlarm(time)
Sets an alarm that will fire at the specified in-game time.
cancelAlarm(token)
Cancels an alarm previously started with setAlarm.
shutdown()
Shuts down the computer immediately.
reboot()
Reboots the computer immediately.
getComputerID()
Returns the ID of the computer.
computerID()
Returns the ID of the computer.
getComputerLabel()
Returns the label of the computer, or nil if none is set.
computerLabel()
Returns the label of the computer, or nil if none is set.
setComputerLabel([label
])
Set the label of this computer.
clock()
Returns the number of seconds that the computer has been running.
time([locale])
Returns the current time depending on the string passed in.
day([args])
Returns the day depending on the locale specified.
epoch([args])
Returns the number of milliseconds since an epoch depending on the locale.
date([format [, time]]) Returns a date string (or table) using a specified format string and optional
time to format.
loadAPI(path)Source
🛈 Deprecated
When possible it's best to avoid using this function. It pollutes the global table and can mask errors.
require should be used to load libraries instead.
Loads the given API into the global environment.

This function loads and executes the file at the given path, and all global variables and functions
exported by it will by available through the use of myAPI.<function name>, where myAPI is the
base name of the API file.
Parameters
1. path string The path of the API to load.
Returns
1. boolean Whether or not the API was successfully loaded.
Changes
•
New in version 1.2
unloadAPI(name)Source
🛈 Deprecated
See os.loadAPI for why.
Unloads an API which was loaded by os.loadAPI.
This effectively removes the specified table from _G.
Parameters
1. name string The name of the API to unload.
Changes
•
New in version 1.2
pullEvent([filter])Source
Pause execution of the current thread and waits for any events matching filter.
This function yields the current process and waits for it to be resumed with a vararg list where the first
element matches filter. If no filter is supplied, this will match all events.
Unlike os.pullEventRaw, it will stop the application upon a "terminate" event, printing the error
"Terminated".
Parameters
1. filter? string Event to filter for.
Returns
1. string
event The name of the event that fired.
2. any param... Optional additional parameters of the event.

Usage
•
Listen for mouse_click events.
while true do
local event, button, x, y = os.pullEvent("mouse_click")
print("Button", button, "was clicked at", x, ",", y)
end
•
Listen for multiple events.
while true do
local eventData = {os.pullEvent()}
local event = eventData[1]
if event == "mouse_click" then
print("Button", eventData[2], "was clicked at", eventData[3], ",",
eventData[4])
elseif event == "key" then
print("Key code", eventData[2], "was pressed")
end
end
See also
•
os.pullEventRaw
To pull the terminate event.
Changes
•
Changed in version 1.3: Added filter argument.
pullEventRaw([filter])Source
Pause execution of the current thread and waits for events, including the terminate event.
This behaves almost the same as os.pullEvent, except it allows you to handle the terminate event
yourself - the program will not stop execution when Ctrl+T is pressed.
Parameters
1. filter? string Event to filter for.
Returns
1. string
event The name of the event that fired.
2. any param... Optional additional parameters of the event.
Usage
•
Listen for terminate events.
while true do
local event = os.pullEventRaw()
if event == "terminate" then
print("Caught terminate event!")
end

end
See also
•
os.pullEvent
To pull events normally.
sleep(time)Source
Pauses execution for the specified number of seconds, alias of _G.sleep.
Parameters
1. time number The number of seconds to sleep for, rounded up to the nearest multiple of 0.05.
version()Source
Get the current CraftOS version (for example, CraftOS 1.9).
This is defined by bios.lua. For the current version of CC:Tweaked, this should return CraftOS
1.9.
Returns
1. string
The current CraftOS version.
Usage
•
os.version
()
run(env, path, ...)Source
Run the program at the given path with the specified environment and arguments.
This function does not resolve program names like the shell does. This means that, for example,
os.run("edit") will not work. As well as this, it does not provide access to the shell API in the
environment. For this behaviour, use shell.run instead.
If the program cannot be found, or failed to run, it will print the error and return false. If you want to
handle this more gracefully, use an alternative such as loadfile.
Parameters
1. env table The environment to run the program with.
2. path string The exact path of the program to run.
3. ... The arguments to pass to the program.
Returns
1. boolean Whether or not the program ran successfully.
Usage
•
Run the default shell from within your program:

os.run({}, "/rom/programs/shell.lua")
See also
•
shell.run
•
loadfile
queueEvent(name, ...)Source
Adds an event to the event queue. This event can later be pulled with os.pullEvent.
Parameters
1. name string The name of the event to queue.
2. ... The parameters of the event. These can be any primitive type (boolean, number, string) as
well as tables. Other types (like functions), as well as metatables, will not be preserved.
See also
•
os.pullEvent
To pull the event queued
startTimer(time)Source
Starts a timer that will run for the specified number of seconds. Once the timer fires, a timer event
will be added to the queue with the ID returned from this function as the first parameter.
As with sleep, the time will automatically be rounded up to the nearest multiple of 0.05 seconds, as it
waits for a fixed amount of world ticks.
Parameters
1. time number The number of seconds until the timer fires.
Returns
1. number The ID of the new timer. This can be used to filter the timer event, or cancel the
timer.
Throws
•
If the time is below zero.
See also
•
cancelTimer
To cancel a timer.
cancelTimer(token)Source
Cancels a timer previously started with startTimer. This will stop the timer from firing.
Parameters
1. token number The ID of the timer to cancel.

See also
•
startTimer
To start a timer.
Changes
•
New in version 1.6
setAlarm(time)Source
Sets an alarm that will fire at the specified in-game time. When it fires, an alarm event will be added
to the event queue with the ID returned from this function as the first parameter.
Parameters
1. time number The time at which to fire the alarm, in the range [0.0, 24.0).
Returns
1. number The ID of the new alarm. This can be used to filter the alarm event, or cancel the
alarm.
Throws
•
If the time is out of range.
See also
•
cancelAlarm
To cancel an alarm.
Changes
•
New in version 1.2
cancelAlarm(token)Source
Cancels an alarm previously started with setAlarm. This will stop the alarm from firing.
Parameters
1. token number The ID of the alarm to cancel.
See also
•
setAlarm
To set an alarm.
Changes
•
New in version 1.6
shutdown()Source
Shuts down the computer immediately.

reboot()Source
Reboots the computer immediately.
getComputerID()Source
Returns the ID of the computer.
Returns
1. number The ID of the computer.
computerID()Source
Returns the ID of the computer.
Returns
1. number The ID of the computer.
getComputerLabel()Source
Returns the label of the computer, or nil if none is set.
Returns
1. string
| nil The label of the computer.
Changes
•
New in version 1.3
computerLabel()Source
Returns the label of the computer, or nil if none is set.
Returns
1. string
| nil The label of the computer.
Changes
•
New in version 1.3
setComputerLabel([label])Source
Set the label of this computer.
Parameters
1. label? string The new label. May be nil in order to clear it.
Changes
•
New in version 1.3

clock()Source
Returns the number of seconds that the computer has been running.
Returns
1. number The computer's uptime.
Changes
•
New in version 1.2
time([locale])Source
Returns the current time depending on the string passed in. This will always be in the range [0.0, 24.0).
•
If called with ingame, the current world time will be returned. This is the default if nothing is
passed.
•
If called with utc, returns the hour of the day in UTC time.
•
If called with local, returns the hour of the day in the timezone the server is located in.
This function can also be called with a table returned from date, which will convert the date fields into
a UNIX timestamp (number of seconds since 1 January 1970).
Parameters
1. locale? string | table The locale of the time, or a table filled by os.date("*t") to
decode. Defaults to ingame locale if not specified.
Returns
1. any The hour of the selected locale, or a UNIX timestamp from the table, depending on the
argument passed in.
Throws
•
If an invalid locale is passed.
Usage
•
Print the current in-game time.
textutils.formatTime(os.time())
See also
•
textutils.formatTime
To convert times into a user-readable string.
•
date
To get a date table that can be converted with this function.
Changes
•
New in version 1.2

•
Changed in version 1.80pr1: Add support for getting the local and UTC time.
•
Changed in version 1.82.0: Arguments are now case insensitive.
•
Changed in version 1.83.0: time now accepts table arguments and converts them to UNIX
timestamps.
day([args])Source
Returns the day depending on the locale specified.
•
If called with ingame, returns the number of days since the world was created. This is the
default.
•
If called with utc, returns the number of days since 1 January 1970 in the UTC timezone.
•
If called with local, returns the number of days since 1 January 1970 in the server's local
timezone.
Parameters
1. args? string The locale to get the day for. Defaults to ingame if not set.
Returns
1. number The day depending on the selected locale.
Throws
•
If an invalid locale is passed.
Changes
•
New in version 1.48
•
Changed in version 1.82.0: Arguments are now case insensitive.
epoch([args])Source
Returns the number of milliseconds since an epoch depending on the locale.
•
If called with ingame, returns the number of in-game milliseconds since the world was created.
This is the default.
•
If called with utc, returns the number of milliseconds since 1 January 1970 in the UTC
timezone.
•
If called with local, returns the number of milliseconds since 1 January 1970 in the server's
local timezone.
🛈 info
The ingame time zone assumes that one Minecraft day consists of 86,400,000 milliseconds. Since one
in-game day is much faster than a real day (20 minutes), this will change quicker than real time - one
real second is equal to 72000 in-game milliseconds. If you wish to convert this value to real time,
divide by 72000; to convert to ticks (where a day is 24000 ticks), divide by 3600.
Parameters
1. args? string The locale to get the milliseconds for. Defaults to ingame if not set.

Returns
1. number The milliseconds since the epoch depending on the selected locale.
Throws
•
If an invalid locale is passed.
Usage
•
Get the current time and use date to convert it to a table.
-- Dividing by 1000 converts it from milliseconds to seconds.
local time = os.epoch("local") / 1000
local time_table = os.date("*t", time)
print(textutils.serialize(time_table))
Changes
•
New in version 1.80pr1
date([format [, time]])Source
Returns a date string (or table) using a specified format string and optional time to format.
The format string takes the same formats as C's strftime function. The format string can also be
prefixed with an exclamation mark (!) to use UTC time instead of the server's local timezone.
If the format is exactly "*t" (or "!*t" ), a table representation of the timestamp will be returned
instead. This table has fields for the year, month, day, hour, minute, second, day of the week, day of the
year, and whether Daylight Savings Time is in effect. This table can be converted back to a timestamp
with time.
Parameters
1. format? string The format of the string to return. This defaults to %c, which expands to a
string similar to "Sat Dec 24 16:58:00 2011".
2. time? number The timestamp to convert to a string. This defaults to the current time.
Returns
1. any The resulting formated string, or table.
Throws
•
If an invalid format is passed.
Usage
•
Print the current date in a user-friendly string.
os.date("%A %d %B %Y") -- See the reference above!
•
Convert a timestamp to a table.

os.date("!*t", 1242534247)
--[=[ {
-- Date
year = 2009,
month = 5,
day = 17,
yday = 137,
wday = 1,
-- Time
hour = 4,
min = 24,
sec = 7,
isdst = false,
} ]=]
Changes
•
New in version 1.83.0
Last updated on 2024-11-19

☰
Contents
•
getFocus
•
setFocus
•
getTitle
•
setTitle
•
getCurrent
•
launch
•
getCount
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
multishell
Multishell allows multiple programs to be run at the same time.
When multiple programs are running, it displays a tab bar at the top of the screen, which allows you to switch
between programs. New programs can be launched using the fg or bg programs, or using the
shell.openTab and multishell.launch functions.
Each process is identified by its ID, which corresponds to its position in the tab list. As tabs may be opened
and closed, this ID is not constant over a program's run. As such, be careful not to use stale IDs.

As with shell, multishell is not a "true" API. Instead, it is a standard program, which launches a shell
and injects its API into the shell's environment. This API is not available in the global environment, and so is
not available to APIs.
Changes
•
New in version 1.6
getFocus()
Get the currently visible process.
setFocus(n)
Change the currently visible process.
getTitle(n)
Get the title of the given tab.
setTitle(n, title)
Set the title of the given process.
getCurrent()
Get the index of the currently running process.
launch(tProgramEnv,
sProgramPath, ...)
Start a new process, with the given environment, program and
arguments.
getCount()
Get the number of processes within this multishell.
getFocus()Source
Get the currently visible process. This will be the one selected on the tab bar.
Note, this is different to getCurrent, which returns the process which is currently executing.
Returns
1. number The currently visible process's index.
See also
•
setFocus
setFocus(n)Source
Change the currently visible process.
Parameters
1. n number The process index to switch to.
Returns
1. boolean If the process was changed successfully. This will return false if there is no process
with this id.
See also
•
getFocus
getTitle(n)Source
Get the title of the given tab.
This starts as the name of the program, but may be changed using multishell.setTitle.

Parameters
1. n number The process index.
Returns
1. string
| nil The current process title, or nil if the process doesn't exist.
setTitle(n, title)Source
Set the title of the given process.
Parameters
1. n number The process index.
2. title string The new process title.
Usage
•
Change the title of the current process
multishell.setTitle(multishell.getCurrent(), "Hello")
See also
•
getTitle
getCurrent()Source
Get the index of the currently running process.
Returns
1. number The currently running process.
launch(tProgramEnv, sProgramPath, ...)Source
Start a new process, with the given environment, program and arguments.
The returned process index is not constant over the program's run. It can be safely used immediately
after launching (for instance, to update the title or switch to that tab). However, after your program has
yielded, it may no longer be correct.
Parameters
1. tProgramEnv table The environment to load the path under.
2. sProgramPath string The path to the program to run.
3. ... Additional arguments to pass to the program.
Returns
1. number The index of the created process.

Usage
•
Run the "hello" program, and set its title to "Hello!"
local id = multishell.launch({}, "/rom/programs/fun/hello.lua")
multishell.setTitle(id, "Hello!")
See also
•
os.run
getCount()Source
Get the number of processes within this multishell.
Returns
1. number The number of processes.
Last updated on 2024-11-19

☰
Contents
•
getName
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty

•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty

•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
keys
Constants for all keyboard "key codes", as queued by the key event.
These values are not guaranteed to remain the same between versions. It is recommended that you use the
constants provided by this file, rather than the underlying numerical values.
Changes
•
New in version 1.4
getName(code) Translates a numerical key code to a human-readable name.
getName(code)Source
Translates a numerical key code to a human-readable name. The human-readable name is one of the
constants in the keys API.
Parameters
1. code number The key code to look up.

Returns
1. string
| nil The name of the key, or nil if not a valid key code.
Usage
•
keys.getName
(keys.enter)
Last updated on 2024-11-19

☰
Contents
•
stdin
•
stdout
•
stderr
•
close
•
flush
•
input
•
lines
•
open
•
output
•
read
•
type
•
write
Types
•
Handle
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone

•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success

•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
io
Emulates Lua's standard io library.

stdin
A file handle representing the "standard input".
stdout
A file handle representing the "standard output".
stderr
A file handle representing the "standard error" stream.
close([file])
Closes the provided file handle.
flush()
Flushes the current output file.
input([file])
Get or set the current input file.
lines([filename,
...])
Opens the given file name in read mode and returns an iterator that, each time it is
called, returns a new line from the file.
open(filename [,
mode])
Open a file with the given mode, either returning a new file handle or nil, plus an
error message.
output([file])
Get or set the current output file.
read(...)
Read from the currently opened input file.
type(obj)
Checks whether handle is a given file handle, and determine if it is open or not.
write(...)
Write to the currently opened output file.
stdinSource
A file handle representing the "standard input". Reading from this file will prompt the user for input.
stdoutSource
A file handle representing the "standard output". Writing to this file will display the written text to the
screen.
stderrSource
A file handle representing the "standard error" stream.
One may use this to display error messages, writing to it will display them on the terminal.
close([file])Source
Closes the provided file handle.
Parameters
1. file? Handle The file handle to close, defaults to the current output file.
See also
•
Handle:close
•
io.output
Changes
•
New in version 1.55
flush()Source
Flushes the current output file.

See also
•
Handle:flush
•
io.output
Changes
•
New in version 1.55
input([file])Source
Get or set the current input file.
Parameters
1. file? Handle | string The new input file, either as a file path or pre-existing handle.
Returns
1. Handle
The current input file.
Throws
•
If the provided filename cannot be opened for reading.
Changes
•
New in version 1.55
lines([filename, ...])Source
Opens the given file name in read mode and returns an iterator that, each time it is called, returns a new
line from the file.
This can be used in a for loop to iterate over all lines of a file
Once the end of the file has been reached, nil will be returned. The file is automatically closed.
If no file name is given, the current input will be used instead. In this case, the handle is not used.
Parameters
1. filename? string The name of the file to extract lines from
2. ... The argument to pass to Handle:read for each line.
Returns
1. function():string | nil The line iterator.
Throws
•
If the file cannot be opened for reading

Usage
•
Iterate over every line in a file and print it out.
for line in io.lines("/rom/help/intro.txt") do
print(line)
end
See also
•
Handle:lines
•
io.input
Changes
•
New in version 1.55
open(filename [, mode])Source
Open a file with the given mode, either returning a new file handle or nil, plus an error message.
The mode string can be any of the following:
•
"r": Read mode.
•
"w": Write mode.
•
"a": Append mode.
•
"r+": Update mode (allows reading and writing), all data is preserved.
•
"w+": Update mode, all data is erased.
The mode may also have a b at the end, which opens the file in "binary mode". This has no impact on
functionality.
Parameters
1. filename string The name of the file to open.
2. mode? string The mode to open the file with. This defaults to r.
Returns
1. Handle
The opened file.
Or
1. nil In case of an error.
2. string
The reason the file could not be opened.
Changes
•
Changed in version 1.111.0: Add support for r+ and w+.
output([file])Source
Get or set the current output file.

Parameters
1. file? Handle | string The new output file, either as a file path or pre-existing handle.
Returns
1. Handle
The current output file.
Throws
•
If the provided filename cannot be opened for writing.
Changes
•
New in version 1.55
read(...)Source
Read from the currently opened input file.
This is equivalent to io.input():read(...). See the documentation there for full details.
Parameters
1. ... string The formats to read, defaulting to a whole line.
Returns
1. string
| nil... The data read, or nil if nothing can be read.
type(obj)Source
Checks whether handle is a given file handle, and determine if it is open or not.
Parameters
1. obj The value to check
Returns
1. string
| nil "file" if this is an open file, "closed file" if it is a closed file handle, or
nil if not a file handle.
write(...)Source
Write to the currently opened output file.
This is equivalent to io.output():write(...). See the documentation there for full details.
Parameters
1. ... string The strings to write

Changes
•
Changed in version 1.81.0: Multiple arguments are now allowed.
Types
Handle
A file handle which can be read or written to.
Handle.close()Source
Close this file handle, freeing any resources it uses.
Returns
1. true If this handle was successfully closed.
Or
1. nil If this file handle could not be closed.
2. string
The reason it could not be closed.
Throws
•
If this handle was already closed.
Handle.flush()Source
Flush any buffered output, forcing it to be written to the file
Throws
•
If the handle has been closed
Handle.lines(...)Source
Returns an iterator that, each time it is called, returns a new line from the file.
This can be used in a for loop to iterate over all lines of a file
Once the end of the file has been reached, nil will be returned. The file is not automatically closed.
Parameters
1. ... The argument to pass to Handle:read for each line.
Returns
1. function():string | nil The line iterator.

Throws
•
If the file cannot be opened for reading
Usage
•
Iterate over every line in a file and print it out.
local file = io.open("/rom/help/intro.txt")
for line in file:lines() do
print(line)
end
file:close()
See also
•
io.lines
Changes
•
New in version 1.3
Handle.read(...)Source
Reads data from the file, using the specified formats. For each format provided, the function returns
either the data read, or nil if no data could be read.
The following formats are available:
•
l: Returns the next line (without a newline on the end).
•
L: Returns the next line (with a newline on the end).
•
a: Returns the entire rest of the file.
•
n: Returns a number (not implemented in CC).
These formats can be preceded by a * to make it compatible with Lua 5.1.
If no format is provided, l is assumed.
Parameters
1. ... The formats to use.
Returns
1. string
| nil... The data read from the file.
Handle.seek([whence [, offset]])Source
Seeks the file cursor to the specified position, and returns the new position.
whence controls where the seek operation starts, and is a string that may be one of these three values:
•
set: base position is 0 (beginning of the file)
•
cur: base is current position

•
end: base is end of file
The default value of whence is cur, and the default value of offset is 0. This means that
file:seek() without arguments returns the current position without moving.
Parameters
1. whence? string The place to set the cursor from.
2. offset? number The offset from the start to move to.
Returns
1. number The new location of the file cursor.
Handle.setvbuf(mode [, size])Source
🛈 Deprecated
This has no effect in CC.
Sets the buffering mode for an output file.
This has no effect under ComputerCraft, and exists with compatility with base Lua.
Parameters
1. mode string The buffering mode.
2. size? number The size of the buffer.
See also
•
file:setvbuf
Lua's documentation for setvbuf.
Handle.write(...)Source
Write one or more values to the file
Parameters
1. ... string | number The values to write.
Returns
1. Handle
The current file, allowing chained calls.
Or
1. nil If the file could not be written to.
2. string
The error message which occurred while writing.
Changes
•
Changed in version 1.81.0: Multiple arguments are now allowed.

Last updated on 2024-11-19

☰
Contents
•
get
•
post
•
request
•
checkURLAsync
•
checkURL
•
websocketAsync
•
websocket
Types
•
Response
•
Websocket
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils

•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize

•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
http
Make HTTP requests, sending and receiving data to a remote web server.
See also
•
Allowing access to local IPs
To allow accessing servers running on your local network.

Changes
•
New in version 1.1
get(...)
Make a HTTP GET request to the given url.
post(...)
Make a HTTP POST request to the given url.
request(...)
Asynchronously make a HTTP request to the given url.
checkURLAsync(url) Asynchronously determine whether a URL can be requested.
checkURL(url)
Determine whether a URL can be requested.
websocketAsync(...) Asynchronously open a websocket.
websocket(...)
Open a websocket.
get(...)Source
Make a HTTP GET request to the given url.
Parameters
1. url string The url to request
2. headers? { [string] = string } Additional headers to send as part of this request.
3. binary? boolean = false Whether the response handle should be opened in binary mode.
Or
1. request { url = string, headers? = { [string] = string }, binary? =
boolean, method? = string, redirect? = boolean, timeout? = number }
Options for the request. See http.request for details on how these options behave.
Returns
1. Response
The resulting http response, which can be read from.
Or
1. nil When the http request failed, such as in the event of a 404 error or connection timeout.
2. string
A message detailing why the request failed.
3. Response
| nil The failing http response, if available.
Usage
•
Make a request to example.tweaked.cc, and print the returned page.
local request = http.get("https://example.tweaked.cc")
print(request.readAll())
-- => HTTP is working!
request.close()
Changes
•
Changed in version 1.63: Added argument for headers.
•
Changed in version 1.80pr1: Response handles are now returned on error if available.
•
Changed in version 1.80pr1: Added argument for binary handles.
•
Changed in version 1.80pr1.6: Added support for table argument.

•
Changed in version 1.86.0: Added PATCH and TRACE methods.
•
Changed in version 1.105.0: Added support for custom timeouts.
•
Changed in version 1.109.0: The returned response now reads the body as raw bytes, rather
than decoding from UTF-8.
post(...)Source
Make a HTTP POST request to the given url.
Parameters
1. url string The url to request
2. body string The body of the POST request.
3. headers? { [string] = string } Additional headers to send as part of this request.
4. binary? boolean = false Whether the response handle should be opened in binary mode.
Or
1. request { url = string, body? = string, headers? = { [string] = string
}, binary? = boolean, method? = string, redirect? = boolean, timeout?
= number } Options for the request. See http.request for details on how these options
behave.
Returns
1. Response
The resulting http response, which can be read from.
Or
1. nil When the http request failed, such as in the event of a 404 error or connection timeout.
2. string
A message detailing why the request failed.
3. Response
| nil The failing http response, if available.
Changes
•
New in version 1.31
•
Changed in version 1.63: Added argument for headers.
•
Changed in version 1.80pr1: Response handles are now returned on error if available.
•
Changed in version 1.80pr1: Added argument for binary handles.
•
Changed in version 1.80pr1.6: Added support for table argument.
•
Changed in version 1.86.0: Added PATCH and TRACE methods.
•
Changed in version 1.105.0: Added support for custom timeouts.
•
Changed in version 1.109.0: The returned response now reads the body as raw bytes, rather
than decoding from UTF-8.
request(...)Source
Asynchronously make a HTTP request to the given url.
This returns immediately, a http_success or http_failure will be queued once the request has
completed.

Parameters
1. url string The url to request
2. body? string An optional string containing the body of the request. If specified, a POST
request will be made instead.
3. headers? { [string] = string } Additional headers to send as part of this request.
4. binary? boolean = false Whether the response handle should be opened in binary mode.
Or
1. request { url = string, body? = string, headers? = { [string] = string
}, binary? = boolean, method? = string, redirect? = boolean, timeout?
= number }
Options for the request.
This table form is an expanded version of the previous syntax. All arguments from above are
passed in as fields instead (for instance, http.request("https://example.com")
becomes http.request { url = "https://example.com" }). This table also accepts
several additional options:
•
method: Which HTTP method to use, for instance "PATCH" or "DELETE".
•
redirect: Whether to follow HTTP redirects. Defaults to true.
•
timeout: The connection timeout, in seconds.
See also
•
http.get
For a synchronous way to make GET requests.
•
http.post
For a synchronous way to make POST requests.
Changes
•
Changed in version 1.63: Added argument for headers.
•
Changed in version 1.80pr1: Added argument for binary handles.
•
Changed in version 1.80pr1.6: Added support for table argument.
•
Changed in version 1.86.0: Added PATCH and TRACE methods.
•
Changed in version 1.105.0: Added support for custom timeouts.
•
Changed in version 1.109.0: The returned response now reads the body as raw bytes, rather
than decoding from UTF-8.
checkURLAsync(url)Source
Asynchronously determine whether a URL can be requested.
If this returns true, one should also listen for http_check which will container further information
about whether the URL is allowed or not.
Parameters
1. url string The URL to check.

Returns
1. true When this url is not invalid. This does not imply that it is allowed - see the comment
above.
Or
1. false When this url is invalid.
2. string
A reason why this URL is not valid (for instance, if it is malformed, or blocked).
See also
•
http.checkURL
For a synchronous version.
checkURL(url)Source
Determine whether a URL can be requested.
If this returns true, one should also listen for http_check which will container further information
about whether the URL is allowed or not.
Parameters
1. url string The URL to check.
Returns
1. true When this url is valid and can be requested via http.request.
Or
1. false When this url is invalid.
2. string
A reason why this URL is not valid (for instance, if it is malformed, or blocked).
Usage
•
print(http.checkURL("https://example.tweaked.cc/"))
-- => true
print(http.checkURL("http://localhost/"))
-- => false Domain not permitted
print(http.checkURL("not a url"))
-- => false URL malformed
See also
•
http.checkURLAsync
For an asynchronous version.
websocketAsync(...)Source
Asynchronously open a websocket.
This returns immediately, a websocket_success or websocket_failure will be queued once the
request has completed.

Parameters
1. url string The websocket url to connect to. This should have the ws:// or wss:// protocol.
2. headers? { [string] = string } Additional headers to send as part of the initial
websocket connection.
Or
1. request { url = string, headers? = { [string] = string }, timeout? =
number } Options for the websocket. See http.websocket for details on how these options
behave.
See also
•
websocket_success
•
websocket_failure
Changes
•
New in version 1.80pr1.3
•
Changed in version 1.95.3: Added User-Agent to default headers.
•
Changed in version 1.105.0: Added support for table argument and custom timeout.
•
Changed in version 1.109.0: Non-binary websocket messages now use the raw bytes rather
than using UTF-8.
websocket(...)Source
Open a websocket.
Parameters
1. url string The websocket url to connect to. This should have the ws:// or wss:// protocol.
2. headers? { [string] = string } Additional headers to send as part of the initial
websocket connection.
Or
1. request { url = string, headers? = { [string] = string }, timeout? =
number }
Options for the websocket.
This table form is an expanded version of the previous syntax. All arguments from above are
passed in as fields instead (for instance, http.websocket("https://example.com")
becomes http.websocket { url = "https://example.com" }). This table also
accepts the following additional options:
•
timeout: The connection timeout, in seconds.
Returns
1. Websocket
The websocket connection.

Or
1. false If the websocket connection failed.
2. string
An error message describing why the connection failed.
Usage
•
Connect to an echo websocket and send a message.
local ws = assert(http.websocket("wss://example.tweaked.cc/echo"))
ws.send("Hello!") -- Send a message
print(ws.receive()) -- And receive the reply
ws.close()
Changes
•
New in version 1.80pr1.1
•
Changed in version 1.80pr1.3: No longer asynchronous.
•
Changed in version 1.95.3: Added User-Agent to default headers.
•
Changed in version 1.105.0: Added support for table argument and custom timeout.
•
Changed in version 1.109.0: Non-binary websocket messages now use the raw bytes rather
than using UTF-8.
Types
Response
A http response. This provides the same methods as a file, though provides several request specific methods.
See also
•
http.request
On how to make a http request.
Response.getResponseCode()Source
Returns the response code and response message returned by the server.
Returns
1. number The response code (i.e. 200)
2. string
The response message (i.e. "OK")
Changes
•
Changed in version 1.80pr1.13: Added response message return value.
Response.getResponseHeaders()Source
Get a table containing the response's headers, in a format similar to that required by http.request. If
multiple headers are sent with the same name, they will be combined with a comma.
Returns
1. { [string] = string } The response's headers.

Usage
•
Make a request to example.tweaked.cc, and print the returned headers.
local request = http.get("https://example.tweaked.cc")
print(textutils.serialize(request.getResponseHeaders()))
-- => {
-- [ "Content-Type" ] = "text/plain; charset=utf8",
-- [ "content-length" ] = 17,
-- ...
-- }
request.close()
Websocket
A websocket, which can be used to send and receive messages with a web server.
See also
•
http.websocket
On how to open a websocket.
Websocket.receive([timeout])Source
Wait for a message from the server.
Parameters
1. timeout? number The number of seconds to wait if no message is received.
Returns
1. string
The received message.
2. boolean If this was a binary message.
Or
1. nil If the websocket was closed while waiting, or if we timed out.
Throws
•
If the websocket has been closed.
Changes
•
Changed in version 1.80pr1.13: Added return value indicating whether the message was
binary.
•
Changed in version 1.87.0: Added timeout argument.
Websocket.send(message [, binary])Source
Send a websocket message to the connected server.
Parameters
1. message string The message to send.

2. binary? boolean Whether this message should be treated as a
Throws
•
If the message is too large.
•
If the websocket has been closed.
Changes
•
Changed in version 1.81.0: Added argument for binary mode.
Websocket.close()Source
Close this websocket. This will terminate the connection, meaning messages can no longer be sent or
received along it.
Last updated on 2024-11-19

☰
Contents
•
path
•
setPath
•
lookup
•
topics
•
completeTopic
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm

•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral

•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
help
Find help files on the current computer.
Changes
•
New in version 1.2
path()
Returns a colon-separated list of directories where help files are searched for.
setPath(newPath)
Sets the colon-separated list of directories where help files are searched for to
newPath
lookup(topic)
Returns the location of the help file for the given topic.
topics()
Returns a list of topics that can be looked up and/or displayed.
completeTopic(prefix
)
Returns a list of topic endings that match the prefix.
path()Source

Returns a colon-separated list of directories where help files are searched for. All directories are
absolute.
Returns
1. string
The current help search path, separated by colons.
See also
•
help.setPath
setPath(newPath)Source
Sets the colon-separated list of directories where help files are searched for to newPath
Parameters
1. newPath string The new path to use.
Usage
•
help.setPath
( "/disk/help/" )
•
help.setPath
( help.path() .. ":/myfolder/help/" )
See also
•
help.path
lookup(topic)Source
Returns the location of the help file for the given topic.
Parameters
1. topic string The topic to find
Returns
1. string
| nil The path to the given topic's help file, or nil if it cannot be found.
Usage
•
help.lookup
("disk")
Changes
•
Changed in version 1.80pr1: Now supports finding .txt files.
•
Changed in version 1.97.0: Now supports finding Markdown files.
topics()Source
Returns a list of topics that can be looked up and/or displayed.

Returns
1. table
A list of topics in alphabetical order.
Usage
•
help.topics
()
completeTopic(prefix)Source
Returns a list of topic endings that match the prefix. Can be used with read to allow input of a help
topic.
Parameters
1. prefix string The prefix to match
Returns
1. table
A list of matching topics.
Changes
•
New in version 1.74
Last updated on 2024-11-19

☰
Contents
•
CHANNEL_GPS
•
locate
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
gps
Use modems to locate the position of the current turtle or computers.
It broadcasts a PING message over rednet and wait for responses. In order for this system to work, there
must be at least 4 computers used as gps hosts which will respond and allow trilateration. Three of these
hosts should be in a plane, and the fourth should be either above or below the other three. The three in a
plane should not be in a line with each other. You can set up hosts using the gps program.
🛈 note
When entering in the coordinates for the host you need to put in the x, y, and z coordinates of the block that
the modem is connected to, not the modem. All modem distances are measured from the block that the
modem is placed on.
Also note that you may choose which axes x, y, or z refers to - so long as your systems have the same
definition as any GPS servers that're in range, it works just the same. For example, you might build a GPS
cluster according to this tutorial, using z to account for height, or you might use y to account for height in the
way that Minecraft's debug screen displays.

See also
•
Setting up GPS
For more detailed instructions on setting up GPS
Changes
•
New in version 1.31
CHANNEL_GPS = 65534
The channel which GPS requests and responses are broadcast
on.
locate([timeout=2 [,
debug=false]])
Tries to retrieve the computer or turtles own location.
CHANNEL_GPS = 65534Source
The channel which GPS requests and responses are broadcast on.
locate([timeout=2 [, debug=false]])Source
Tries to retrieve the computer or turtles own location.
Parameters
1. timeout? number = 2 The maximum time in seconds taken to establish our position.
2. debug? boolean = false Print debugging messages
Returns
1. number This computer's x position.
2. number This computer's y position.
3. number This computer's z position.
Or
1. nil If the position could not be established.
Last updated on 2024-11-19

☰
Contents
•
complete
•
find
•
isDriveRoot
•
list
•
combine
•
getName
•
getDir
•
getSize
•
exists
•
isDir
•
isReadOnly
•
makeDir
•
move
•
copy
•
delete
•
open
•
getDrive
•
getFreeSpace
•
getCapacity
•
attributes
Types
•
ReadWriteHandle
•
WriteHandle
•
ReadHandle
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http

•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory

Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command

•
Lua 5.2/5.3 features in CC: Tweaked
fs
Interact with the computer's files and filesystem, allowing you to manipulate files, directories and paths. This
includes:
•
Reading and writing files: Call open to obtain a file "handle", which can be used to read from or
write to a file.
•
Path manipulation: combine, getName and getDir allow you to manipulate file paths, joining
them together or extracting components.
•
Querying paths: For instance, checking if a file exists, or whether it's a directory. See getSize,
exists, isDir, isReadOnly and attributes.
•
File and directory manipulation: For instance, moving or copying files. See makeDir, move, copy
and delete.
🛈 note
All functions in the API work on absolute paths, and do not take the current directory into account. You can
use shell.resolve to convert a relative path into an absolute one.
Mounts
While a computer can only have one hard drive and filesystem, other filesystems may be "mounted" inside it.
For instance, the drive peripheral mounts its disk's contents at "disk/", "disk1/", etc...
You can see which mount a path belongs to with the getDrive function. This returns "hdd" for the
computer's main filesystem ("/"), "rom" for the rom ("rom/").
Most filesystems have a limited capacity, operations which would cause that capacity to be reached (such as
writing an incredibly large file) will fail. You can see a mount's capacity with getCapacity and the
remaining space with getFreeSpace.
complete(...)
Provides completion for a file or directory name, suitable for use with _G.read.
find(path)
Searches for files matching a string with wildcards.
isDriveRoot(path) Returns true if a path is mounted to the parent filesystem.
list(path)
Returns a list of files in a directory.
combine(path, ...) Combines several parts of a path into one full path, adding separators as needed.
getName(path)
Returns the file name portion of a path.
getDir(path)
Returns the parent directory portion of a path.
getSize(path)
Returns the size of the specified file.
exists(path)
Returns whether the specified path exists.
isDir(path)
Returns whether the specified path is a directory.
isReadOnly(path)
Returns whether a path is read-only.

makeDir(path)
Creates a directory, and any missing parents, at the specified path.
move(path, dest)
Moves a file or directory from one path to another.
copy(path, dest)
Copies a file or directory to a new path.
delete(path)
Deletes a file or directory.
open(path, mode)
Opens a file for reading or writing at a path.
getDrive(path)
Returns the name of the mount that the specified path is located on.
getFreeSpace(path) Returns the amount of free space available on the drive the path is located on.
getCapacity(path) Returns the capacity of the drive the path is located on.
attributes(path)
Get attributes about a specific file or folder.
complete(...)Source
Provides completion for a file or directory name, suitable for use with _G.read.
When a directory is a possible candidate for completion, two entries are included - one with a trailing
slash (indicating that entries within this directory exist) and one without it (meaning this entry is an
immediate completion candidate). include_dirs can be set to false to only include those with a
trailing slash.
Parameters
1. path string The path to complete.
2. location string The location where paths are resolved from.
3. include_files? boolean = true When false, only directories will be included in the
returned list.
4. include_dirs? boolean = true When false, "raw" directories will not be included in the
returned list.
Or
1. path string The path to complete.
2. location string The location where paths are resolved from.
3. options { include_dirs? = boolean, include_files? = boolean,
include_hidden? = boolean }
This table form is an expanded version of the previous syntax. The include_files and
include_dirs arguments from above are passed in as fields.
This table also accepts the following options:
•
include_hidden: Whether to include hidden files (those starting with .) by default.
They will still be shown when typing a ..
Returns
1. { string... } A list of possible completion candidates.
Usage
•
Complete files in the root directory.

read(nil, nil, function(str)
return fs.complete(str, "", true, false)
end)
•
Complete files in the root directory, hiding hidden files by default.
read(nil, nil, function(str)
return fs.complete(str, "", {
include_files = true,
include_dirs = false,
include_hidden = false,
})
end)
Changes
•
New in version 1.74
•
Changed in version 1.101.0
find(path)Source
Searches for files matching a string with wildcards.
This string looks like a normal path string, but can include wildcards, which can match multiple paths:
•
"?" matches any single character in a file name.
•
"*" matches any number of characters.
For example, rom/*/command* will look for any path starting with command inside any subdirectory
of /rom.
Note that these wildcards match a single segment of the path. For instance rom/*.lua will include
rom/startup.lua but not include rom/programs/list.lua.
Parameters
1. path string The wildcard-qualified path to search for.
Returns
1. { string... } A list of paths that match the search string.
Throws
•
If the supplied path was invalid.
Usage
•
List all Markdown files in the help folder
fs.find("rom/help/*.md")

Changes
•
New in version 1.6
•
Changed in version 1.106.0: Added support for the ? wildcard.
isDriveRoot(path)Source
Returns true if a path is mounted to the parent filesystem.
The root filesystem "/" is considered a mount, along with disk folders and the rom folder. Other
programs (such as network shares) can exstend this to make other mount types by correctly assigning
their return value for getDrive.
Parameters
1. path string The path to check.
Returns
1. boolean If the path is mounted, rather than a normal file/folder.
Throws
•
If the path does not exist.
See also
•
getDrive
Changes
•
New in version 1.87.0
list(path)Source
Returns a list of files in a directory.
Parameters
1. path string The path to list.
Returns
1. { string... } A table with a list of files in the directory.
Throws
•
If the path doesn't exist.
Usage
•
List all files under /rom/
local files = fs.list("/rom/")

for i = 1, #files do
print(files[i])
end
combine(path, ...)Source
Combines several parts of a path into one full path, adding separators as needed.
Parameters
1. path string The first part of the path. For example, a parent directory path.
2. ... string Additional parts of the path to combine.
Returns
1. string
The new path, with separators added between parts as needed.
Throws
•
On argument errors.
Usage
•
Combine several file paths together
fs.combine("/rom/programs", "../apis", "parallel.lua")
-- => rom/apis/parallel.lua
Changes
•
Changed in version 1.95.0: Now supports multiple arguments.
getName(path)Source
Returns the file name portion of a path.
Parameters
1. path string The path to get the name from.
Returns
1. string
The final part of the path (the file name).
Usage
•
Get the file name of rom/startup.lua
fs.getName("rom/startup.lua")
-- => startup.lua

Changes
•
New in version 1.2
getDir(path)Source
Returns the parent directory portion of a path.
Parameters
1. path string The path to get the directory from.
Returns
1. string
The path with the final part removed (the parent directory).
Usage
•
Get the directory name of rom/startup.lua
fs.getDir("rom/startup.lua")
-- => rom
Changes
•
New in version 1.63
getSize(path)Source
Returns the size of the specified file.
Parameters
1. path string The file to get the file size of.
Returns
1. number The size of the file, in bytes.
Throws
•
If the path doesn't exist.
Changes
•
New in version 1.3
exists(path)Source
Returns whether the specified path exists.
Parameters
1. path string The path to check the existence of.

Returns
1. boolean Whether the path exists.
isDir(path)Source
Returns whether the specified path is a directory.
Parameters
1. path string The path to check.
Returns
1. boolean Whether the path is a directory.
isReadOnly(path)Source
Returns whether a path is read-only.
Parameters
1. path string The path to check.
Returns
1. boolean Whether the path cannot be written to.
makeDir(path)Source
Creates a directory, and any missing parents, at the specified path.
Parameters
1. path string The path to the directory to create.
Throws
•
If the directory couldn't be created.
move(path, dest)Source
Moves a file or directory from one path to another.
Any parent directories are created as needed.
Parameters
1. path string The current file or directory to move from.
2. dest string The destination path for the file or directory.
Throws
•
If the file or directory couldn't be moved.

copy(path, dest)Source
Copies a file or directory to a new path.
Any parent directories are created as needed.
Parameters
1. path string The file or directory to copy.
2. dest string The path to the destination file or directory.
Throws
•
If the file or directory couldn't be copied.
delete(path)Source
Deletes a file or directory.
If the path points to a directory, all of the enclosed files and subdirectories are also deleted.
Parameters
1. path string The path to the file or directory to delete.
Throws
•
If the file or directory couldn't be deleted.
open(path, mode)Source
Opens a file for reading or writing at a path.
The mode string can be any of the following:
•
"r": Read mode.
•
"w": Write mode.
•
"a": Append mode.
•
"r+": Update mode (allows reading and writing), all data is preserved.
•
"w+": Update mode, all data is erased.
The mode may also have a "b" at the end, which opens the file in "binary mode". This changes
fs.ReadHandle.read and fs.WriteHandle.write to read/write single bytes as numbers rather
than strings.
Parameters
1. path string The path to the file to open.
2. mode string The mode to open the file with.

Returns
1. table
A file handle object for the file.
Or
1. nil If the file does not exist, or cannot be opened.
2. string
| nil A message explaining why the file cannot be opened.
Throws
•
If an invalid mode was specified.
Usage
•
Read the contents of a file.
local file = fs.open("/rom/help/intro.txt", "r")
local contents = file.readAll()
file.close()
print(contents)
•
Open a file and read all lines into a table. io.lines offers an alternative way to do this.
local file = fs.open("/rom/motd.txt", "r")
local lines = {}
while true do
local line = file.readLine()
-- If line is nil then we've reached the end of the file and should stop
if not line then break end
lines[#lines + 1] = line
end
file.close()
print(lines[math.random(#lines)]) -- Pick a random line and print it.
•
Open a file and write some text to it. You can run edit out.txt to see the written text.
local file = fs.open("out.txt", "w")
file.write("Just testing some code")
file.close() -- Remember to call close, otherwise changes may not be written!
Changes
•
Changed in version 1.109.0: Add support for update modes (r+ and w+).
•
Changed in version 1.109.0: Opening a file in non-binary mode now uses the raw bytes of the
file rather than encoding to UTF-8.
getDrive(path)Source
Returns the name of the mount that the specified path is located on.

Parameters
1. path string The path to get the drive of.
Returns
1. string
| nil The name of the drive that the file is on; e.g. hdd for local files, or rom for
ROM files.
Throws
•
If the path doesn't exist.
Usage
•
Print the drives of a couple of mounts:
print("/: " .. fs.getDrive("/"))
print("/rom/: " .. fs.getDrive("rom"))
getFreeSpace(path)Source
Returns the amount of free space available on the drive the path is located on.
Parameters
1. path string The path to check the free space for.
Returns
1. number | "unlimited" The amount of free space available, in bytes, or "unlimited".
Throws
•
If the path doesn't exist.
See also
•
getCapacity
To get the capacity of this drive.
Changes
•
New in version 1.4
getCapacity(path)Source
Returns the capacity of the drive the path is located on.
Parameters
1. path string The path of the drive to get.

Returns
1. number | nil This drive's capacity. This will be nil for "read-only" drives, such as the ROM
or treasure disks.
Throws
•
If the capacity cannot be determined.
See also
•
getFreeSpace
To get the free space available on this drive.
Changes
•
New in version 1.87.0
attributes(path)Source
Get attributes about a specific file or folder.
The returned attributes table contains information about the size of the file, whether it is a directory,
when it was created and last modified, and whether it is read only.
The creation and modification times are given as the number of milliseconds since the UNIX epoch.
This may be given to os.date in order to convert it to more usable form.
Parameters
1. path string The path to get attributes for.
Returns
1. { size = number, isDir = boolean, isReadOnly = boolean, created =
number, modified = number } The resulting attributes.
Throws
•
If the path does not exist.
See also
•
getSize
If you only care about the file's size.
•
isDir
If you only care whether a path is a directory or not.
Changes
•
New in version 1.87.0
•
Changed in version 1.91.0: Renamed modification field to modified.
•
Changed in version 1.95.2: Added isReadOnly to attributes.

Types
ReadWriteHandle
A file handle opened for reading and writing with fs.open.
ReadWriteHandle.read([count])Source
Read a number of bytes from this file.
Parameters
1. count? number The number of bytes to read. This may be 0 to determine we are at the end of
the file. When absent, a single byte will be read.
Returns
1. nil If we are at the end of the file.
Or
1. number The value of the byte read. This is returned if the file is opened in binary mode and
count is absent
Or
1. string
The bytes read as a string. This is returned when the count is given.
Throws
•
When trying to read a negative number of bytes.
•
If the file has been closed.
Changes
•
Changed in version 1.80pr1: Now accepts an integer argument to read multiple bytes,
returning a string instead of a number.
ReadWriteHandle.readAll()Source
Read the remainder of the file.
Returns
1. string
| nil The remaining contents of the file, or nil in the event of an error.
Throws
•
If the file has been closed.

Changes
•
New in version 1.80pr1
ReadWriteHandle.readLine([withTrailing])Source
Read a line from the file.
Parameters
1. withTrailing? boolean Whether to include the newline characters with the returned string.
Defaults to false.
Returns
1. string
| nil The read line or nil if at the end of the file.
Throws
•
If the file has been closed.
Changes
•
New in version 1.80pr1.9
•
Changed in version 1.81.0: \r is now stripped.
ReadWriteHandle.seek([whence [, offset]])Source
Seek to a new position within the file, changing where bytes are written to. The new position is an
offset given by offset, relative to a start position determined by whence:
•
"set": offset is relative to the beginning of the file.
•
"cur": Relative to the current position. This is the default.
•
"end": Relative to the end of the file.
In case of success, seek returns the new file position from the beginning of the file.
Parameters
1. whence? string Where the offset is relative to.
2. offset? number The offset to seek to.
Returns
1. number The new position.
Or
1. nil If seeking failed.
2. string
The reason seeking failed.
Throws
•
If the file has been closed.

Changes
•
New in version 1.80pr1.9
ReadWriteHandle.write(...)Source
Write a string or byte to the file.
Parameters
1. contents string The string to write.
Or
1. charcode number The byte to write, if the file was opened in binary mode.
Throws
•
If the file has been closed.
Changes
•
Changed in version 1.80pr1: Now accepts a string to write multiple bytes.
ReadWriteHandle.writeLine(text)Source
Write a string of characters to the file, following them with a new line character.
Parameters
1. text string The text to write to the file.
Throws
•
If the file has been closed.
ReadWriteHandle.flush()Source
Save the current file without closing it.
Throws
•
If the file has been closed.
ReadWriteHandle.close()Source
Close this file, freeing any resources it uses.
Once a file is closed it may no longer be read or written to.
Throws
•
If the file has already been closed.

WriteHandle
A file handle opened for writing by fs.open.
WriteHandle.write(...)Source
Write a string or byte to the file.
Parameters
1. contents string The string to write.
Or
1. charcode number The byte to write, if the file was opened in binary mode.
Throws
•
If the file has been closed.
Changes
•
Changed in version 1.80pr1: Now accepts a string to write multiple bytes.
WriteHandle.writeLine(text)Source
Write a string of characters to the file, following them with a new line character.
Parameters
1. text string The text to write to the file.
Throws
•
If the file has been closed.
WriteHandle.flush()Source
Save the current file without closing it.
Throws
•
If the file has been closed.
WriteHandle.seek([whence [, offset]])Source
Seek to a new position within the file, changing where bytes are written to. The new position is an
offset given by offset, relative to a start position determined by whence:
•
"set": offset is relative to the beginning of the file.
•
"cur": Relative to the current position. This is the default.
•
"end": Relative to the end of the file.

In case of success, seek returns the new file position from the beginning of the file.
Parameters
1. whence? string Where the offset is relative to.
2. offset? number The offset to seek to.
Returns
1. number The new position.
Or
1. nil If seeking failed.
2. string
The reason seeking failed.
Throws
•
If the file has been closed.
Changes
•
New in version 1.80pr1.9
WriteHandle.close()Source
Close this file, freeing any resources it uses.
Once a file is closed it may no longer be read or written to.
Throws
•
If the file has already been closed.
ReadHandle
A file handle opened for reading with fs.open.
ReadHandle.read([count])Source
Read a number of bytes from this file.
Parameters
1. count? number The number of bytes to read. This may be 0 to determine we are at the end of
the file. When absent, a single byte will be read.
Returns
1. nil If we are at the end of the file.

Or
1. number The value of the byte read. This is returned if the file is opened in binary mode and
count is absent
Or
1. string
The bytes read as a string. This is returned when the count is given.
Throws
•
When trying to read a negative number of bytes.
•
If the file has been closed.
Changes
•
Changed in version 1.80pr1: Now accepts an integer argument to read multiple bytes,
returning a string instead of a number.
ReadHandle.readAll()Source
Read the remainder of the file.
Returns
1. string
| nil The remaining contents of the file, or nil in the event of an error.
Throws
•
If the file has been closed.
Changes
•
New in version 1.80pr1
ReadHandle.readLine([withTrailing])Source
Read a line from the file.
Parameters
1. withTrailing? boolean Whether to include the newline characters with the returned string.
Defaults to false.
Returns
1. string
| nil The read line or nil if at the end of the file.
Throws
•
If the file has been closed.

Changes
•
New in version 1.80pr1.9
•
Changed in version 1.81.0: \r is now stripped.
ReadHandle.seek([whence [, offset]])Source
Seek to a new position within the file, changing where bytes are written to. The new position is an
offset given by offset, relative to a start position determined by whence:
•
"set": offset is relative to the beginning of the file.
•
"cur": Relative to the current position. This is the default.
•
"end": Relative to the end of the file.
In case of success, seek returns the new file position from the beginning of the file.
Parameters
1. whence? string Where the offset is relative to.
2. offset? number The offset to seek to.
Returns
1. number The new position.
Or
1. nil If seeking failed.
2. string
The reason seeking failed.
Throws
•
If the file has been closed.
Changes
•
New in version 1.80pr1.9
ReadHandle.close()Source
Close this file, freeing any resources it uses.
Once a file is closed it may no longer be read or written to.
Throws
•
If the file has already been closed.
Last updated on 2024-11-19

☰
Contents
•
isPresent
•
getLabel
•
setLabel
•
hasData
•
getMountPath
•
hasAudio
•
getAudioTitle
•
playAudio
•
stopAudio
•
eject
•
getID
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle

•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch

•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
disk
Interact with disk drives.
These functions can operate on locally attached or remote disk drives. To use a locally attached drive, specify
“side” as one of the six sides (e.g. left); to use a remote disk drive, specify its name as printed when
enabling its modem (e.g. drive_0).

tip
All computers (except command computers), turtles and pocket computers can be placed within a disk drive
to access it's internal storage like a disk.
Changes
•
New in version 1.2
isPresent(name)
Checks whether any item at all is in the disk drive
getLabel(name)
Get the label of the floppy disk, record, or other media within the given disk drive.
setLabel(name,
label)
Set the label of the floppy disk or other media
hasData(name)
Check whether the current disk provides a mount.
getMountPath(name) Find the directory name on the local computer where the contents of the current
floppy disk (or other mount) can be found.
hasAudio(name)
Whether the current disk is a music disk as opposed to a floppy disk or other item.
getAudioTitle(name
)
Get the title of the audio track from the music record in the drive.
playAudio(name)
Starts playing the music record in the drive.
stopAudio(name)
Stops the music record in the drive from playing, if it was started with
disk.playAudio.
eject(name)
Ejects any item currently in the drive, spilling it into the world as a loose item.
getID(name)
Returns a number which uniquely identifies the disk in the drive.
isPresent(name)Source
Checks whether any item at all is in the disk drive
Parameters
1. name string The name of the disk drive.
Returns
1. boolean If something is in the disk drive.
Usage
•
disk.isPresent
("top")
getLabel(name)Source
Get the label of the floppy disk, record, or other media within the given disk drive.
If there is a computer or turtle within the drive, this will set the label as read by
os.getComputerLabel.
Parameters
1. name string The name of the disk drive.

Returns
1. string
| nil The name of the current media, or nil if the drive is not present or empty.
See also
•
disk.setLabel
setLabel(name, label)Source
Set the label of the floppy disk or other media
Parameters
1. name string The name of the disk drive.
2. label string | nil The new label of the disk
hasData(name)Source
Check whether the current disk provides a mount.
This will return true for disks and computers, but not records.
Parameters
1. name string The name of the disk drive.
Returns
1. boolean If the disk is present and provides a mount.
See also
•
disk.getMountPath
getMountPath(name)Source
Find the directory name on the local computer where the contents of the current floppy disk (or other
mount) can be found.
Parameters
1. name string The name of the disk drive.
Returns
1. string
| nil The mount's directory, or nil if the drive does not contain a floppy or
computer.
See also
•
disk.hasData
hasAudio(name)Source

Whether the current disk is a music disk as opposed to a floppy disk or other item.
If this returns true, you will can play the record.
Parameters
1. name string The name of the disk drive.
Returns
1. boolean If the disk is present and has audio saved on it.
getAudioTitle(name)Source
Get the title of the audio track from the music record in the drive.
This generally returns the same as disk.getLabel for records.
Parameters
1. name string The name of the disk drive.
Returns
1. string
| false | nil The track title, false if there is not a music record in the drive or
nil if no drive is present.
playAudio(name)Source
Starts playing the music record in the drive.
If any record is already playing on any disk drive, it stops before the target drive starts playing. The
record stops when it reaches the end of the track, when it is removed from the drive, when
disk.stopAudio is called, or when another record is started.
Parameters
1. name string The name of the disk drive.
Usage
•
disk.playAudio
("bottom")
stopAudio(name)Source
Stops the music record in the drive from playing, if it was started with disk.playAudio.
Parameters
1. name string The name o the disk drive.
eject(name)Source
Ejects any item currently in the drive, spilling it into the world as a loose item.

Parameters
1. name string The name of the disk drive.
Usage
•
disk.eject
("bottom")
getID(name)Source
Returns a number which uniquely identifies the disk in the drive.
Note, unlike disk.getLabel, this does not return anything for other media, such as computers or
turtles.
Parameters
1. name string The name of the disk drive.
Returns
1. string
| nil The disk ID, or nil if the drive does not contain a floppy disk.
Changes
•
New in version 1.4
Last updated on 2024-11-19

☰
Contents
•
exec
•
execAsync
•
list
•
getBlockPosition
•
getBlockInfos
•
getBlockInfo
•
native
•
async
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
commands
Execute Minecraft commands and gather data from the results from a command computer.
🛈 note
This API is only available on Command computers. It is not accessible to normal players.
While one may use commands.exec directly to execute a command, the commands API also provides
helper methods to execute every command. For instance, commands.say("Hi!") is equivalent to
commands.exec("say Hi!").
commands.async provides a similar interface to execute asynchronous commands.
commands.async.say("Hi!") is equivalent to commands.execAsync("say Hi!").

Usage
•
Set the block above this computer to stone:
commands.setblock("~", "~1", "~", "minecraft:stone")
Changes
•
New in version 1.7
exec(command)
Execute a specific command.
execAsync(command)
Asynchronously execute a command.
list(...)
List all available commands which the computer has
permission to execute.
getBlockPosition()
Get the position of the current command computer.
getBlockInfos(minX, minY, minZ, maxX,
maxY, maxZ [, dimension])
Get information about a range of blocks.
getBlockInfo(x, y, z [, dimension])
Get some basic information about a block.
native
The builtin commands API, without any generated
command helper functions
async
A table containing asynchronous wrappers for all
commands.
exec(command)Source
Execute a specific command.
Parameters
1. command string The command to execute.
Returns
1. boolean Whether the command executed successfully.
2. { string... } The output of this command, as a list of lines.
3. number | nil The number of "affected" objects, or nil if the command failed. The definition
of this varies from command to command.
Usage
•
Set the block above the command computer to stone.
commands.exec("setblock ~ ~1 ~ minecraft:stone")
Changes
•
Changed in version 1.71: Added return value with command output.
•
Changed in version 1.85.0: Added return value with the number of affected objects.
execAsync(command)Source
Asynchronously execute a command.

Unlike exec, this will immediately return, instead of waiting for the command to execute. This allows
you to run multiple commands at the same time.
When this command has finished executing, it will queue a task_complete event containing the
result of executing this command (what exec would return).
Parameters
1. command string The command to execute.
Returns
1. number The "task id". When this command has been executed, it will queue a
task_complete event with a matching id.
Usage
•
Asynchronously sets the block above the computer to stone.
commands.execAsync("setblock ~ ~1 ~ minecraft:stone")
See also
•
parallel
One may also use the parallel API to run multiple commands at once.
list(...)Source
List all available commands which the computer has permission to execute.
Parameters
1. ... string The sub-command to complete.
Returns
1. { string... } A list of all available commands
getBlockPosition()Source
Get the position of the current command computer.
Returns
1. number This computer's x position.
2. number This computer's y position.
3. number This computer's z position.
See also
•
gps.locate
To get the position of a non-command computer.
getBlockInfos(minX, minY, minZ, maxX, maxY, maxZ [, dimension])Source
Get information about a range of blocks.

This returns the same information as getBlockInfo, just for multiple blocks at once.
Blocks are traversed by ascending y level, followed by z and x - the returned table may be indexed
using x + z*width + y*width*depth + 1.
Parameters
1. minX number The start x coordinate of the range to query.
2. minY number The start y coordinate of the range to query.
3. minZ number The start z coordinate of the range to query.
4. maxX number The end x coordinate of the range to query.
5. maxY number The end y coordinate of the range to query.
6. maxZ number The end z coordinate of the range to query.
7. dimension? string The dimension to query (e.g. "minecraft:overworld"). Defaults to the
current dimension.
Returns
1. { table... } A list of information about each block.
Throws
•
If the coordinates are not within the world.
•
If trying to get information about more than 4096 blocks.
Usage
•
Print out all blocks in a cube around the computer.
-- Get a 3x3x3 cube around the computer
local x, y, z = commands.getBlockPosition()
local min_x, min_y, min_z, max_x, max_y, max_z = x - 1, y - 1, z - 1, x + 1, y + 1,
z + 1
local blocks = commands.getBlockInfos(min_x, min_y, min_z, max_x, max_y, max_z)
-- Then loop over all blocks and print them out.
local width, height, depth = max_x - min_x + 1, max_y - min_y + 1, max_z - min_z + 1
for x = min_x, max_x do
for y = min_y, max_y do
for z = min_z, max_z do
print(("%d, %d %d => %s"):format(x, y, z, blocks[(x - min_x) + (z - min_z) *
width + (y - min_y) * width * depth + 1].name))
end
end
end
Changes
•
New in version 1.76
•
Changed in version 1.99: Added dimension argument.
getBlockInfo(x, y, z [, dimension])Source
Get some basic information about a block.

The returned table contains the current name, metadata and block state (as with turtle.inspect). If
there is a block entity for that block, its NBT will also be returned.
Parameters
1. x number The x position of the block to query.
2. y number The y position of the block to query.
3. z number The z position of the block to query.
4. dimension? string The dimension to query (e.g. "minecraft:overworld"). Defaults to the
current dimension.
Returns
1. table
The given block's information.
Throws
•
If the coordinates are not within the world, or are not currently loaded.
Changes
•
Changed in version 1.76: Added block state info to return value
•
Changed in version 1.99: Added dimension argument.
nativeSource
The builtin commands API, without any generated command helper functions
This may be useful if a built-in function (such as commands.list) has been overwritten by a
command.
asyncSource
A table containing asynchronous wrappers for all commands.
As with commands.execAsync, this returns the "task id" of the enqueued command.
Usage
•
Asynchronously sets the block above the computer to stone.
commands.async.setblock("~", "~1", "~", "minecraft:stone")
See also
•
execAsync
Last updated on 2024-11-19

☰
Contents
•
grey
•
lightGrey
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft

•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone

•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
colours
An alternative version of colors for lovers of British spelling.
See also
•
colors
Changes
•
New in version 1.2
grey
Grey.
lightGrey Light grey.
greySource
Grey. Written as 7 in paint files and term.blit, has a default terminal colour of #4C4C4C.

See also
•
colors.gray
lightGreySource
Light grey. Written as 8 in paint files and term.blit, has a default terminal colour of #999999.
See also
•
colors.lightGray
Last updated on 2024-11-19

☰
Contents
•
white
•
orange
•
magenta
•
lightBlue
•
yellow
•
lime
•
pink
•
gray
•
lightGray
•
cyan
•
purple
•
blue
•
brown
•
green
•
red
•
black
•
combine
•
subtract
•
test
•
packRGB
•
unpackRGB
•
rgb8
•
toBlit
•
fromBlit
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys

•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm

•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked

colors
Constants and functions for colour values, suitable for working with term and redstone.
This is useful in conjunction with Bundled Cables from mods like Project Red, and colors on Advanced
Computers and Advanced Monitors.
For the non-American English version just replace colors with colours. This alternative API is exactly
the same, except the colours use British English (e.g. colors.gray is spelt colours.grey).
On basic terminals (such as the Computer and Monitor), all the colors are converted to grayscale. This means
you can still use all 16 colors on the screen, but they will appear as the nearest tint of gray. You can check if a
terminal supports color by using the function term.isColor.
Grayscale colors are calculated by taking the average of the three components, i.e. (red + green +
blue) / 3.
Default Colors
Color
Value
Default Palette Color
Dec
Hex
Paint/Blit Preview
Hex
RGB
Grayscale
colors.white
1
0x1
0
#F0F0F0
240, 240, 240
colors.orange
2
0x2
1
#F2B233
242, 178, 51
colors.magenta
4
0x4
2
#E57FD8 229, 127, 216
colors.lightBlue
8
0x8
3
#99B2F2
153, 178, 242
colors.yellow
16
0x10
4
#DEDE6C 222, 222, 108
colors.lime
32
0x20
5
#7FCC19 127, 204, 25
colors.pink
64
0x40
6
#F2B2CC 242, 178, 204
colors.gray
128
0x80
7
#4C4C4C 76, 76, 76
colors.lightGray
256
0x100
8
#999999
153, 153, 153
colors.cyan
512
0x200
9
#4C99B2 76, 153, 178
colors.purple
1024
0x400
a
#B266E5
178, 102, 229
colors.blue
2048
0x800
b
#3366CC 51, 102, 204
colors.brown
4096 0x1000
c
#7F664C
127, 102, 76
colors.green
8192 0x2000
d
#57A64E 87, 166, 78
colors.red
16384 0x4000
e
#CC4C4C 204, 76, 76
colors.black
32768 0x8000
f
#111111
17, 17, 17
See also
•
colours
white = 0x1
White: Written as 0 in paint files and term.blit, has a default terminal colour of
#F0F0F0.
orange = 0x2
Orange: Written as 1 in paint files and term.blit, has a default terminal colour of
#F2B233.

magenta = 0x4
Magenta: Written as 2 in paint files and term.blit, has a default terminal colour
of #E57FD8.
lightBlue = 0x8
Light blue: Written as 3 in paint files and term.blit, has a default terminal
colour of #99B2F2.
yellow = 0x10
Yellow: Written as 4 in paint files and term.blit, has a default terminal colour of
#DEDE6C.
lime = 0x20
Lime: Written as 5 in paint files and term.blit, has a default terminal colour of
#7FCC19.
pink = 0x40
Pink: Written as 6 in paint files and term.blit, has a default terminal colour of
#F2B2CC.
gray = 0x80
Gray: Written as 7 in paint files and term.blit, has a default terminal colour of
#4C4C4C.
lightGray = 0x100 Light gray: Written as 8 in paint files and term.blit, has a default terminal
colour of #999999.
cyan = 0x200
Cyan: Written as 9 in paint files and term.blit, has a default terminal colour of
#4C99B2.
purple = 0x400
Purple: Written as a in paint files and term.blit, has a default terminal colour of
#B266E5.
blue = 0x800
Blue: Written as b in paint files and term.blit, has a default terminal colour of
#3366CC.
brown = 0x1000
Brown: Written as c in paint files and term.blit, has a default terminal colour of
#7F664C.
green = 0x2000
Green: Written as d in paint files and term.blit, has a default terminal colour of
#57A64E.
red = 0x4000
Red: Written as e in paint files and term.blit, has a default terminal colour of
#CC4C4C.
black = 0x8000
Black: Written as f in paint files and term.blit, has a default terminal colour of
#111111.
combine(...)
Combines a set of colors (or sets of colors) into a larger set.
subtract(colors, .
..)
Removes one or more colors (or sets of colors) from an initial set.
test(colors,
color)
Tests whether color is contained within colors.
packRGB(r, g, b) Combine a three-colour RGB value into one hexadecimal representation.
unpackRGB(rgb)
Separate a hexadecimal RGB colour into its three constituent channels.
rgb8(...)
Either calls colors.packRGB or colors.unpackRGB, depending on how many
arguments it receives.
toBlit(color)
Converts the given color to a paint/blit hex character (0-9a-f).
fromBlit(hex)
Converts the given paint/blit hex character (0-9a-f) to a color.
white = 0x1Source
White: Written as 0 in paint files and term.blit, has a default terminal colour of #F0F0F0.
orange = 0x2Source
Orange: Written as 1 in paint files and term.blit, has a default terminal colour of #F2B233.

magenta = 0x4Source
Magenta: Written as 2 in paint files and term.blit, has a default terminal colour of #E57FD8.
lightBlue = 0x8Source
Light blue: Written as 3 in paint files and term.blit, has a default terminal colour of #99B2F2.
yellow = 0x10Source
Yellow: Written as 4 in paint files and term.blit, has a default terminal colour of #DEDE6C.
lime = 0x20Source
Lime: Written as 5 in paint files and term.blit, has a default terminal colour of #7FCC19.
pink = 0x40Source
Pink: Written as 6 in paint files and term.blit, has a default terminal colour of #F2B2CC.
gray = 0x80Source
Gray: Written as 7 in paint files and term.blit, has a default terminal colour of #4C4C4C.
lightGray = 0x100Source
Light gray: Written as 8 in paint files and term.blit, has a default terminal colour of #999999.
cyan = 0x200Source
Cyan: Written as 9 in paint files and term.blit, has a default terminal colour of #4C99B2.
purple = 0x400Source
Purple: Written as a in paint files and term.blit, has a default terminal colour of #B266E5.
blue = 0x800Source
Blue: Written as b in paint files and term.blit, has a default terminal colour of #3366CC.
brown = 0x1000Source
Brown: Written as c in paint files and term.blit, has a default terminal colour of #7F664C.
green = 0x2000Source
Green: Written as d in paint files and term.blit, has a default terminal colour of #57A64E.
red = 0x4000Source
Red: Written as e in paint files and term.blit, has a default terminal colour of #CC4C4C.

black = 0x8000Source
Black: Written as f in paint files and term.blit, has a default terminal colour of #111111.
combine(...)Source
Combines a set of colors (or sets of colors) into a larger set. Useful for Bundled Cables.
Parameters
1. ... number The colors to combine.
Returns
1. number The union of the color sets given in ...
Usage
•
colors.combine
(colors.white, colors.magenta, colours.lightBlue)
-- => 13
Changes
•
New in version 1.2
subtract(colors, ...)Source
Removes one or more colors (or sets of colors) from an initial set. Useful for Bundled Cables.
Each parameter beyond the first may be a single color or may be a set of colors (in the latter case, all
colors in the set are removed from the original set).
Parameters
1. colors number The color from which to subtract.
2. ... number The colors to subtract.
Returns
1. number The resulting color.
Usage
•
colours
.subtract(colours.lime, colours.orange, colours.white)
-- => 32
Changes
•
New in version 1.2
test(colors, color)Source
Tests whether color is contained within colors. Useful for Bundled Cables.

Parameters
1. colors number A color, or color set
2. color number A color or set of colors that colors should contain.
Returns
1. boolean If colors contains all colors within color.
Usage
•
colors.test
(colors.combine(colors.white, colors.magenta, colours.lightBlue),
colors.lightBlue)
-- => true
Changes
•
New in version 1.2
packRGB(r, g, b)Source
Combine a three-colour RGB value into one hexadecimal representation.
Parameters
1. r number The red channel, should be between 0 and 1.
2. g number The green channel, should be between 0 and 1.
3. b number The blue channel, should be between 0 and 1.
Returns
1. number The combined hexadecimal colour.
Usage
•
colors.packRGB
(0.7, 0.2, 0.6)
-- => 0xb23399
Changes
•
New in version 1.81.0
unpackRGB(rgb)Source
Separate a hexadecimal RGB colour into its three constituent channels.
Parameters
1. rgb number The combined hexadecimal colour.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.

3. number The blue channel, will be between 0 and 1.
Usage
•
colors.unpackRGB
(0xb23399)
-- => 0.7, 0.2, 0.6
See also
•
colors.packRGB
Changes
•
New in version 1.81.0
rgb8(...)Source
🛈 Deprecated
Use packRGB or unpackRGB directly.
Either calls colors.packRGB or colors.unpackRGB, depending on how many arguments it
receives.
Parameters
1. r number The red channel, as an argument to colors.packRGB.
2. g number The green channel, as an argument to colors.packRGB.
3. b number The blue channel, as an argument to colors.packRGB.
Or
1. rgb number The combined hexadecimal color, as an argument to colors.unpackRGB.
Returns
1. number The combined hexadecimal colour, as returned by colors.packRGB.
Or
1. number The red channel, as returned by colors.unpackRGB
2. number The green channel, as returned by colors.unpackRGB
3. number The blue channel, as returned by colors.unpackRGB
Usage
•
colors.rgb8
(0xb23399)
-- => 0.7, 0.2, 0.6
•
colors.rgb8
(0.7, 0.2, 0.6)
-- => 0xb23399

Changes
•
New in version 1.80pr1
•
Changed in version 1.81.0: Deprecated in favor of colors.(un)packRGB.
toBlit(color)Source
Converts the given color to a paint/blit hex character (0-9a-f).
This is equivalent to converting floor(log_2(color)) to hexadecimal. Values outside the range of
a valid colour will error.
Parameters
1. color number The color to convert.
Returns
1. string
The blit hex code of the color.
Usage
•
colors.toBlit
(colors.red)
-- => "c"
See also
•
colors.fromBlit
Changes
•
New in version 1.94.0
fromBlit(hex)Source
Converts the given paint/blit hex character (0-9a-f) to a color.
This is equivalent to converting the hex character to a number and then 2 ^ decimal
Parameters
1. hex string The paint/blit hex character to convert
Returns
1. number The color
Usage
•
colors.fromBlit
("e")
-- => 16384

See also
•
colors.toBlit
Changes
•
New in version 1.105.0
Last updated on 2024-11-19

☰
Contents
•
sleep
•
write
•
print
•
printError
•
read
•
_HOST
•
_CC_DEFAULT_SETTINGS
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
_G
Functions in the global environment, defined in bios.lua. This does not include standard Lua functions.
sleep(time)
Pauses execution for the specified number of seconds.
write(text)
Writes a line of text to the screen without a newline at
the end, wrapping text if necessary.
print(...)
Prints the specified values to the screen separated by
spaces, wrapping if necessary.
printError(...)
Prints the specified values to the screen in red,
separated by spaces, wrapping if necessary.
read([replaceChar [, history [,
Reads user input from the terminal.

completeFn [, default]]]])
_HOST
Stores the current ComputerCraft and Minecraft
versions.
_CC_DEFAULT_SETTINGS
The default computer settings as defined in the
ComputerCraft configuration.
sleep(time)Source
Pauses execution for the specified number of seconds.
As it waits for a fixed amount of world ticks, time will automatically be rounded up to the nearest
multiple of 0.05 seconds. If you are using coroutines or the parallel API, it will only pause execution of
the current thread, not the whole program.
tip
Because sleep internally uses timers, it is a function that yields. This means that you can use it to
prevent "Too long without yielding" errors. However, as the minimum sleep time is 0.05 seconds, it
will slow your program down.
⚠ warning
Internally, this function queues and waits for a timer event (using os.startTimer), however it does
not listen for any other events. This means that any event that occurs while sleeping will be entirely
discarded. If you need to receive events while sleeping, consider using timers, or the parallel API.
Parameters
1. time number The number of seconds to sleep for, rounded up to the nearest multiple of 0.05.
Usage
•
Sleep for three seconds.
print("Sleeping for three seconds")
sleep(3)
print("Done!")
See also
•
os.startTimer
write(text)Source
Writes a line of text to the screen without a newline at the end, wrapping text if necessary.
Parameters
1. text string The text to write to the string
Returns
1. number The number of lines written

Usage
•
write("Hello, world")
See also
•
print
A wrapper around write that adds a newline and accepts multiple arguments
print(...)Source
Prints the specified values to the screen separated by spaces, wrapping if necessary. After printing, the
cursor is moved to the next line.
Parameters
1. ... The values to print on the screen
Returns
1. number The number of lines written
Usage
•
print("Hello, world!")
printError(...)Source
Prints the specified values to the screen in red, separated by spaces, wrapping if necessary. After
printing, the cursor is moved to the next line.
Parameters
1. ... The values to print on the screen
Usage
•
printError("Something went wrong!")
read([replaceChar [, history [, completeFn [, default]]]])Source
Reads user input from the terminal. This automatically handles arrow keys, pasting, character
replacement, history scrollback, auto-completion, and default values.
Parameters
1. replaceChar? string A character to replace each typed character with. This can be used for
hiding passwords, for example.
2. history? table A table holding history items that can be scrolled back to with the up/down
arrow keys. The oldest item is at index 1, while the newest item is at the highest index.
3. completeFn? function(partial: string):{ string... } | nil A function to be
used for completion. This function should take the partial text typed so far, and returns a list of
possible completion options.
4. default? string Default text which should already be entered into the prompt.

Returns
1. string
The text typed in.
Usage
•
Read a string and echo it back to the user
write("> ")
local msg = read()
print(msg)
•
Prompt a user for a password.
while true do
write("Password> ")
local pwd = read("*")
if pwd == "let me in" then break end
print("Incorrect password, try again.")
end
print("Logged in!")
•
A complete example with completion, history and a default value.
local completion = require "cc.completion"
local history = { "potato", "orange", "apple" }
local choices = { "apple", "orange", "banana", "strawberry" }
write("> ")
local msg = read(nil, history, function(text) return completion.choice(text,
choices) end, "app")
print(msg)
See also
•
cc.completion
For functions to help with completion.
Changes
•
Changed in version 1.74: Added completeFn parameter.
•
Changed in version 1.80pr1: Added default parameter.
_HOSTSource
Stores the current ComputerCraft and Minecraft versions.
Outside of Minecraft (for instance, in an emulator) _HOST will contain the emulator's version instead.
For example, ComputerCraft 1.93.0 (Minecraft 1.15.2).
Usage
•
Print the current computer's environment.
print(_HOST)

Changes
•
New in version 1.76
_CC_DEFAULT_SETTINGSSource
The default computer settings as defined in the ComputerCraft configuration.
This is a comma-separated list of settings pairs defined by the mod configuration or server owner. By
default, it is empty.
An example value to disable autocompletion:
shell.autocomplete=false,lua.autocomplete=false,edit.autocomplete=false
Usage
•
_CC_DEFAULT_SETTINGS
Changes
•
New in version 1.77
Last updated on 2024-11-19

☰
Contents
•
playNote
•
playSound
•
playAudio
•
stop
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion

•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach

•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
speaker
The speaker peripheral allows your computer to play notes and other sounds.
The speaker can play three kinds of sound, in increasing orders of complexity:
•
playNote
allows you to play noteblock note.
•
playSound
plays any built-in Minecraft sound, such as block sounds or mob noises.
•
playAudio
can play arbitrary audio.
Recipe
Speaker

Changes
•
New in version 1.80pr1
playNote(instrument [, volume [,
pitch]])
Plays a note block note through the speaker.
playSound(name [, volume [, pitch]])
Plays a Minecraft sound through the speaker.
playAudio(audio [, volume])
Attempt to stream some audio data to the speaker.
stop()
Stop all audio being played by this speaker.
playNote(instrument [, volume [, pitch]])Source
Plays a note block note through the speaker.
This takes the name of a note to play, as well as optionally the volume and pitch to play the note at.
The pitch argument uses semitones as the unit. This directly maps to the number of clicks on a note
block. For reference, 0, 12, and 24 map to F#, and 6 and 18 map to C.
A maximum of 8 notes can be played in a single tick. If this limit is hit, this function will return false.

Valid instruments
The speaker supports all of Minecraft's noteblock instruments. These are:
"harp", "basedrum", "snare", "hat", "bass", "flute", "bell", "guitar", "chime",
"xylophone", "iron_xylophone", "cow_bell", "didgeridoo", "bit", "banjo" and
"pling".
Parameters
1. instrument string The instrument to use to play this note.
2. volume? number The volume to play the note at, from 0.0 to 3.0. Defaults to 1.0.
3. pitch? number The pitch to play the note at in semitones, from 0 to 24. Defaults to 12.
Returns
1. boolean Whether the note could be played as the limit was reached.
Throws
•
If the instrument doesn't exist.
playSound(name [, volume [, pitch]])Source
Plays a Minecraft sound through the speaker.
This takes the name of a Minecraft sound, such as "minecraft:block.note_block.harp", as
well as an optional volume and pitch.
Only one sound can be played at once. This function will return false if another sound was started
this tick, or if some audio is still playing.
Parameters
1. name string The name of the sound to play.
2. volume? number The volume to play the sound at, from 0.0 to 3.0. Defaults to 1.0.
3. pitch? number The speed to play the sound at, from 0.5 to 2.0. Defaults to 1.0.
Returns
1. boolean Whether the sound could be played.
Throws
•
If the sound name was invalid.
Usage
•
Play a creeper hiss with the speaker.
local speaker = peripheral.find("speaker")
speaker.playSound("entity.creeper.primed")

playAudio(audio [, volume])Source
Attempt to stream some audio data to the speaker.
This accepts a list of audio samples as amplitudes between -128 and 127. These are stored in an
internal buffer and played back at 48kHz. If this buffer is full, this function will return false.
Programs should wait for a speaker_audio_empty event before trying to play audio again.
The speaker only buffers a single call to playAudio at once. This means if you try to play a small
number of samples, you'll have a lot of stutter. You should try to play as many samples in one call as
possible (up to 128×1024), as this reduces the chances of audio stuttering or halting, especially when
the server or computer is lagging.
While the speaker accepts 8-bit PCM audio, the audio stream is re-encoded before being played. This
means that the supplied samples may not be played out exactly.
Playing audio with speakers provides a more complete guide to using speakers.
Parameters
1. audio { number... } A list of amplitudes.
2. volume? number The volume to play this audio at. If not given, defaults to the previous
volume given to playAudio.
Returns
1. boolean If there was room to accept this audio data.
Throws
•
If the audio data is malformed.
Usage
•
Read an audio file, decode it using cc.audio.dfpwm, and play it using the speaker.
local dfpwm = require("cc.audio.dfpwm")
local speaker = peripheral.find("speaker")
local decoder = dfpwm.make_decoder()
for chunk in io.lines("data/example.dfpwm", 16 * 1024) do
local buffer = decoder(chunk)
while not speaker.playAudio(buffer) do
os.pullEvent("speaker_audio_empty")
end
end
See also
•
cc.audio.dfpwm
Provides utilities for decoding DFPWM audio files into a format which can
be played by the speaker.

•
Playing audio with speakers
For a more complete introduction to the playAudio
function.
Changes
•
New in version 1.100
stop()Source
Stop all audio being played by this speaker.
This clears any audio that playAudio had queued and stops the latest sound played by playSound.
Changes
•
New in version 1.100
Last updated on 2024-11-19

☰
Contents
•
setOutput
•
getOutput
•
getInput
•
setAnalogOutput
•
setAnalogueOutput
•
getAnalogOutput
•
getAnalogueOutput
•
getAnalogInput
•
getAnalogueInput
•
setBundledOutput
•
getBundledOutput
•
getBundledInput
•
testBundledInput
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term

•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message

•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
redstone_relay
The redstone relay is a peripheral that allows reading and outputting redstone signals. While this is not very
useful on its own (as computers have the same functionality built-in), this can be used with wired modems to
interact with multiple redstone signals from the same computer.

The peripheral provides largely identical methods to a computer's built-in redstone API, allowing setting
signals on all six sides of the block ("top", "bottom", "left", "right", "front" and "back").
Recipe
Redstone Relay
Usage
•
Toggle the redstone signal above the computer every 0.5 seconds.
local relay = peripheral.find("redstone_relay")
while true do
relay.setOutput("top", not relay.getOutput("top"))
sleep(0.5)
end

Changes
•
New in version 1.114.0
setOutput(side, on)
Turn the redstone signal of a specific side on or off.
getOutput(side)
Get the current redstone output of a specific side.
getInput(side)
Get the current redstone input of a specific side.
setAnalogOutput(side, value) Set the redstone signal strength for a specific side.
setAnalogueOutput(side,
value)
Set the redstone signal strength for a specific side.
getAnalogOutput(side)
Get the redstone output signal strength for a specific side.
getAnalogueOutput(side)
Get the redstone output signal strength for a specific side.
getAnalogInput(side)
Get the redstone input signal strength for a specific side.
getAnalogueInput(side)
Get the redstone input signal strength for a specific side.
setBundledOutput(side,
output)
Set the bundled cable output for a specific side.
getBundledOutput(side)
Get the bundled cable output for a specific side.
getBundledInput(side)
Get the bundled cable input for a specific side.
testBundledInput(side, mask) Determine if a specific combination of colours are on for the given
side.
setOutput(side, on)Source
Turn the redstone signal of a specific side on or off.
Parameters
1. side string The side to set.
2. on boolean Whether the redstone signal should be on or off. When on, a signal strength of 15
is emitted.
getOutput(side)Source
Get the current redstone output of a specific side.
Parameters
1. side string The side to get.
Returns
1. boolean Whether the redstone output is on or off.
See also
•
setOutput
getInput(side)Source
Get the current redstone input of a specific side.

Parameters
1. side string The side to get.
Returns
1. boolean Whether the redstone input is on or off.
setAnalogOutput(side, value)Source
Set the redstone signal strength for a specific side.
Parameters
1. side string The side to set.
2. value number The signal strength between 0 and 15.
Throws
•
If value is not between 0 and 15.
Changes
•
New in version 1.51
setAnalogueOutput(side, value)Source
Set the redstone signal strength for a specific side.
Parameters
1. side string The side to set.
2. value number The signal strength between 0 and 15.
Throws
•
If value is not between 0 and 15.
Changes
•
New in version 1.51
getAnalogOutput(side)Source
Get the redstone output signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The output signal strength, between 0 and 15.

See also
•
setAnalogOutput
Changes
•
New in version 1.51
getAnalogueOutput(side)Source
Get the redstone output signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The output signal strength, between 0 and 15.
See also
•
setAnalogOutput
Changes
•
New in version 1.51
getAnalogInput(side)Source
Get the redstone input signal strength for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The input signal strength, between 0 and 15.
Changes
•
New in version 1.51
getAnalogueInput(side)Source
Get the redstone input signal strength for a specific side.
Parameters
1. side string The side to get.

Returns
1. number The input signal strength, between 0 and 15.
Changes
•
New in version 1.51
setBundledOutput(side, output)Source
Set the bundled cable output for a specific side.
Parameters
1. side string The side to set.
2. output number The colour bitmask to set.
See also
•
colors.subtract
For removing a colour from the bitmask.
•
colors.combine
For adding a color to the bitmask.
getBundledOutput(side)Source
Get the bundled cable output for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The bundle cable's output.
getBundledInput(side)Source
Get the bundled cable input for a specific side.
Parameters
1. side string The side to get.
Returns
1. number The bundle cable's input.
See also
•
testBundledInput
To determine if a specific colour is set.
testBundledInput(side, mask)Source
Determine if a specific combination of colours are on for the given side.

Parameters
1. side string The side to test.
2. mask number The mask to test.
Returns
1. boolean If the colours are on.
Usage
•
Check if colors.white and colors.black are on above this block.
print(redstone.testBundledInput("top", colors.combine(colors.white, colors.black)))
See also
•
getBundledInput
Last updated on 2024-11-19

☰
Contents
•
write
•
getCursorPos
•
setCursorPos
•
getPageSize
•
newPage
•
endPage
•
setPageTitle
•
getInkLevel
•
getPaperLevel
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
printer
The printer peripheral allows printing text onto pages. These pages can then be crafted together into printed
pages or books.
Printers require ink (one of the coloured dyes) and paper in order to function. Once loaded, a new page can
be started with newPage. Then the printer can be used similarly to a normal terminal; text can be written, and
the cursor moved. Once all text has been printed, endPage should be called to finally print the page.
Recipes
Printer

Printed Pages
Printed Book

Usage
•
Print a page titled "Hello" with a small message on it.
local printer = peripheral.find("printer")
-- Start a new page, or print an error.
if not printer.newPage() then
error("Cannot start a new page. Do you have ink and paper?")
end
-- Write to the page
printer.setPageTitle("Hello")
printer.write("This is my first page")
printer.setCursorPos(1, 3)
printer.write("This is two lines below.")
-- And finally print the page!
if not printer.endPage() then
error("Cannot end the page. Is there enough space?")
end
See also
•
cc.strings.wrap
To wrap text before printing it.
write(text)
Writes text to the current page.
getCursorPos()
Returns the current position of the cursor on the page.
setCursorPos(x, y)
Sets the position of the cursor on the page.
getPageSize()
Returns the size of the current page.
newPage()
Starts printing a new page.
endPage()
Finalizes printing of the current page and outputs it to the tray.
setPageTitle([title]) Sets the title of the current page.
getInkLevel()
Returns the amount of ink left in the printer.
getPaperLevel()
Returns the amount of paper left in the printer.
write(text)Source
Writes text to the current page.

Parameters
1. text string The value to write to the page.
Throws
•
If any values couldn't be converted to a string, or if no page is started.
getCursorPos()Source
Returns the current position of the cursor on the page.
Returns
1. number The X position of the cursor.
2. number The Y position of the cursor.
Throws
•
If a page isn't being printed.
setCursorPos(x, y)Source
Sets the position of the cursor on the page.
Parameters
1. x number The X coordinate to set the cursor at.
2. y number The Y coordinate to set the cursor at.
Throws
•
If a page isn't being printed.
getPageSize()Source
Returns the size of the current page.
Returns
1. number The width of the page.
2. number The height of the page.
Throws
•
If a page isn't being printed.
newPage()Source
Starts printing a new page.

Returns
1. boolean Whether a new page could be started.
endPage()Source
Finalizes printing of the current page and outputs it to the tray.
Returns
1. boolean Whether the page could be successfully finished.
Throws
•
If a page isn't being printed.
setPageTitle([title])Source
Sets the title of the current page.
Parameters
1. title? string The title to set for the page.
Throws
•
If a page isn't being printed.
getInkLevel()Source
Returns the amount of ink left in the printer.
Returns
1. number The amount of ink available to print with.
getPaperLevel()Source
Returns the amount of paper left in the printer.
Returns
1. number The amount of paper available to print with.
Last updated on 2024-11-19

☰
Contents
•
setTextScale
•
getTextScale
•
write
•
scroll
•
getCursorPos
•
setCursorPos
•
getCursorBlink
•
setCursorBlink
•
getSize
•
clear
•
clearLine
•
getTextColour
•
getTextColor
•
setTextColour
•
setTextColor
•
getBackgroundColour
•
getBackgroundColor
•
setBackgroundColour
•
setBackgroundColor
•
isColour
•
isColor
•
blit
•
setPaletteColour
•
setPaletteColor
•
getPaletteColour
•
getPaletteColor
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http

•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory

Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command

•
Lua 5.2/5.3 features in CC: Tweaked
monitor
Monitors are a block which act as a terminal, displaying information on one side. This allows them to be read
and interacted with in-world without opening a GUI.
Monitors act as terminal redirects and so expose the same methods, as well as several additional ones, which
are documented below.
Like computers, monitors come in both normal (no colour) and advanced (colour) varieties.
Recipes
Monitor

Advanced Monitor
4
Usage
•
Write "Hello, world!" to an adjacent monitor:
local monitor = peripheral.find("monitor")
monitor.setCursorPos(1, 1)
monitor.write("Hello, world!")

setTextScale(scale)
Set the scale of this monitor.
getTextScale()
Get the monitor's current text scale.
write(text)
Write text at the current cursor position, moving the cursor to
the end of the text.
scroll(y)
Move all positions up (or down) by y pixels.
getCursorPos()
Get the position of the cursor.
setCursorPos(x, y)
Set the position of the cursor.
getCursorBlink()
Checks if the cursor is currently blinking.
setCursorBlink(blink)
Sets whether the cursor should be visible (and blinking) at the
current cursor position.
getSize()
Get the size of the terminal.
clear()
Clears the terminal, filling it with the current background
colour.
clearLine()
Clears the line the cursor is currently on, filling it with the
current background colour.
getTextColour()
Return the colour that new text will be written as.
getTextColor()
Return the colour that new text will be written as.
setTextColour(colour)
Set the colour that new text will be written as.
setTextColor(colour)
Set the colour that new text will be written as.
getBackgroundColour()
Return the current background colour.
getBackgroundColor()
Return the current background colour.
setBackgroundColour(colour)
Set the current background colour.
setBackgroundColor(colour)
Set the current background colour.
isColour()
Determine if this terminal supports colour.
isColor()
Determine if this terminal supports colour.
blit(text, textColour,
backgroundColour)
Writes text to the terminal with the specific foreground and
background colours.
setPaletteColour(...)
Set the palette for a specific colour.
setPaletteColor(...)
Set the palette for a specific colour.
getPaletteColour(colour)
Get the current palette for a specific colour.
getPaletteColor(colour)
Get the current palette for a specific colour.
setTextScale(scale)Source
Set the scale of this monitor. A larger scale will result in the monitor having a lower resolution, but
display text much larger.
Parameters
1. scale number The monitor's scale. This must be a multiple of 0.5 between 0.5 and 5.
Throws
•
If the scale is out of range.
See also
•
getTextScale

getTextScale()Source
Get the monitor's current text scale.
Returns
1. number The monitor's current scale.
Throws
•
If the monitor cannot be found.
Changes
•
New in version 1.81.0
write(text)Source
Write text at the current cursor position, moving the cursor to the end of the text.
Unlike functions like write and print, this does not wrap the text - it simply copies the text to the
current terminal line.
Parameters
1. text string The text to write.
scroll(y)Source
Move all positions up (or down) by y pixels.
Every pixel in the terminal will be replaced by the line y pixels below it. If y is negative, it will copy
pixels from above instead.
Parameters
1. y number The number of lines to move up by. This may be a negative number.
getCursorPos()Source
Get the position of the cursor.
Returns
1. number The x position of the cursor.
2. number The y position of the cursor.
setCursorPos(x, y)Source
Set the position of the cursor. terminal writes will begin from this position.
Parameters
1. x number The new x position of the cursor.
2. y number The new y position of the cursor.

getCursorBlink()Source
Checks if the cursor is currently blinking.
Returns
1. boolean If the cursor is blinking.
Changes
•
New in version 1.80pr1.9
setCursorBlink(blink)Source
Sets whether the cursor should be visible (and blinking) at the current cursor position.
Parameters
1. blink boolean Whether the cursor should blink.
getSize()Source
Get the size of the terminal.
Returns
1. number The terminal's width.
2. number The terminal's height.
clear()Source
Clears the terminal, filling it with the current background colour.
clearLine()Source
Clears the line the cursor is currently on, filling it with the current background colour.
getTextColour()Source
Return the colour that new text will be written as.
Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
getTextColor()Source

Return the colour that new text will be written as.
Returns
1. number The current text colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
setTextColour(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setTextColor(colour)Source
Set the colour that new text will be written as.
Parameters
1. colour number The new text colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
getBackgroundColour()Source
Return the current background colour. This is used when writing text and clearing the terminal.

Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
getBackgroundColor()Source
Return the current background colour. This is used when writing text and clearing the terminal.
Returns
1. number The current background colour.
See also
•
colors
For a list of colour constants, returned by this function.
Changes
•
New in version 1.74
setBackgroundColour(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.
See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setBackgroundColor(colour)Source
Set the current background colour. This is used when writing text and clearing the terminal.
Parameters
1. colour number The new background colour.

See also
•
colors
For a list of colour constants.
Changes
•
New in version 1.45
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
isColour()Source
Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
isColor()Source
Determine if this terminal supports colour.
Terminals which do not support colour will still allow writing coloured text/backgrounds, but it will be
displayed in greyscale.
Returns
1. boolean Whether this terminal supports colour.
Changes
•
New in version 1.45
blit(text, textColour, backgroundColour)Source
Writes text to the terminal with the specific foreground and background colours.
As with write, the text will be written at the current cursor location, with the cursor moving to the end
of the text.
textColour and backgroundColour must both be strings the same length as text. All characters
represent a single hexadecimal digit, which is converted to one of CC's colours. For instance, "a"
corresponds to purple.
Parameters
1. text string The text to write.
2. textColour string The corresponding text colours.

3. backgroundColour string The corresponding background colours.
Throws
•
If the three inputs are not the same length.
Usage
•
Prints "Hello, world!" in rainbow text.
term.blit("Hello, world!","01234456789ab","0000000000000")
See also
•
colors
For a list of colour constants, and their hexadecimal values.
Changes
•
New in version 1.74
•
Changed in version 1.80pr1: Standard computers can now use all 16 colors, being changed to
grayscale on screen.
setPaletteColour(...)Source
Set the palette for a specific colour.
ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.
2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.
2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)
term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.

term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.
Changes
•
New in version 1.80pr1
setPaletteColor(...)Source
Set the palette for a specific colour.
ComputerCraft's palette system allows you to change how a specific colour should be displayed. For
instance, you can make colors.red more red by setting its palette to #FF0000. This does now allow
you to draw more colours - you are still limited to 16 on the screen at one time - but you can change
which colours are used.
Parameters
1. index number The colour whose palette should be changed.
2. colour number A 24-bit integer representing the RGB value of the colour. For instance the
integer 0xFF0000 corresponds to the colour #FF0000.
Or
1. index number The colour whose palette should be changed.
2. r number The intensity of the red channel, between 0 and 1.
3. g number The intensity of the green channel, between 0 and 1.
4. b number The intensity of the blue channel, between 0 and 1.
Usage
•
Change the red colour from the default #CC4C4C to #FF0000.
term.setPaletteColour(colors.red, 0xFF0000)
term.setTextColour(colors.red)
print("Hello, world!")
•
As above, but specifying each colour channel separately.
term.setPaletteColour(colors.red, 1, 0, 0)
term.setTextColour(colors.red)
print("Hello, world!")
See also
•
colors.unpackRGB
To convert from the 24-bit format to three separate channels.
•
colors.packRGB
To convert from three separate channels to the 24-bit format.

Changes
•
New in version 1.80pr1
getPaletteColour(colour)Source
Get the current palette for a specific colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1
getPaletteColor(colour)Source
Get the current palette for a specific colour.
Parameters
1. colour number The colour whose palette should be fetched.
Returns
1. number The red channel, will be between 0 and 1.
2. number The green channel, will be between 0 and 1.
3. number The blue channel, will be between 0 and 1.
Changes
•
New in version 1.80pr1
Last updated on 2024-11-19

☰
Contents
•
open
•
isOpen
•
close
•
closeAll
•
transmit
•
isWireless
•
getNamesRemote
•
isPresentRemote
•
getTypeRemote
•
hasTypeRemote
•
getMethodsRemote
•
callRemote
•
getNameLocal
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term

•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message

•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
modem
Modems allow you to send messages between computers over long distances.
tip
Modems provide a fairly basic set of methods, which makes them very flexible but often hard to work with.
The rednet API is built on top of modems, and provides a more user-friendly interface.

Sending and receiving messages
Modems operate on a series of channels, a bit like frequencies on a radio. Any modem can send a message on
a particular channel, but only those which have opened the channel and are "listening in" can receive
messages.
Channels are represented as an integer between 0 and 65535 inclusive. These channels don't have any defined
meaning, though some APIs or programs will assign a meaning to them. For instance, the gps module sends
all its messages on channel 65534 (gps.CHANNEL_GPS), while rednet uses channels equal to the
computer's ID.
•
Sending messages is done with the transmit message.
•
Receiving messages is done by listening to the modem_message event.
Types of modem
CC: Tweaked comes with three kinds of modem, with different capabilities.
•
Wireless modems: Wireless modems can send messages to any other wireless modem. They can be
placed next to a computer, or equipped as a pocket computer or turtle upgrade.
Wireless modems have a limited range, only sending messages to modems within 64 blocks. This
range increases linearly once the modem is above y=96, to a maximum of 384 at world height.
•
Ender modems: These are upgraded versions of normal wireless modems. They do not have a
distance limit, and can send messages between dimensions.
•
Wired modems: These send messages to other any other wired modems connected to the same
network (using Networking Cable). They also can be used to attach additional peripherals to a
computer.
Recipes
Wireless Modem

Ender Modem

Wired Modem
Networking Cable

6
Wired Modem
Usage
•
Wrap a modem and a message on channel 15, requesting a response on channel 43. Then wait for a
message to arrive on channel 43 and print it.
local modem = peripheral.find("modem") or error("No modem attached", 0)
modem.open(43) -- Open 43 so we can receive replies
-- Send our message
modem.transmit(15, 43, "Hello, world!")
-- And wait for a reply
local event, side, channel, replyChannel, message, distance
repeat
event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
until channel == 43
print("Received a reply: " .. tostring(message))
See also
•
modem_message
Queued when a modem receives a message on an open channel.
•
rednet
A networking API built on top of the modem peripheral.
open(channel)
Open a channel on a modem.
isOpen(channel)
Check if a channel is open.
close(channel)
Close an open channel, meaning it will no longer receive
messages.
closeAll()
Close all open channels.
transmit(channel, replyChannel,
payload)
Sends a modem message on a certain channel.
isWireless()
Determine if this is a wired or wireless modem.
getNamesRemote()
List all remote peripherals on the wired network.

isPresentRemote(name)
Determine if a peripheral is available on this wired network.
getTypeRemote(name)
Get the type of a peripheral is available on this wired
network.
hasTypeRemote(name, type)
Check a peripheral is of a particular type.
getMethodsRemote(name)
Get all available methods for the remote peripheral with the
given name.
callRemote(remoteName,
method, ...)
Call a method on a peripheral on this wired network.
getNameLocal()
Returns the network name of the current computer, if the
modem is on.
open(channel)Source
Open a channel on a modem. A channel must be open in order to receive messages. Modems can have
up to 128 channels open at one time.
Parameters
1. channel number The channel to open. This must be a number between 0 and 65535.
Throws
•
If the channel is out of range.
•
If there are too many open channels.
isOpen(channel)Source
Check if a channel is open.
Parameters
1. channel number The channel to check.
Returns
1. boolean Whether the channel is open.
Throws
•
If the channel is out of range.
close(channel)Source
Close an open channel, meaning it will no longer receive messages.
Parameters
1. channel number The channel to close.

Throws
•
If the channel is out of range.
closeAll()Source
Close all open channels.
transmit(channel, replyChannel, payload)Source
Sends a modem message on a certain channel. Modems listening on the channel will queue a
modem_message event on adjacent computers.
🛈 note
The channel does not need be open to send a message.
Parameters
1. channel number The channel to send messages on.
2. replyChannel number The channel that responses to this message should be sent on. This
can be the same as channel or entirely different. The channel must have been opened on the
sending computer in order to receive the replies.
3. payload any The object to send. This can be any primitive type (boolean, number, string) as
well as tables. Other types (like functions), as well as metatables, will not be transmitted.
Throws
•
If the channel is out of range.
Usage
•
Wrap a modem and a message on channel 15, requesting a response on channel 43.
local modem = peripheral.find("modem") or error("No modem attached", 0)
modem.transmit(15, 43, "Hello, world!")
isWireless()Source
Determine if this is a wired or wireless modem.
Some methods (namely those dealing with wired networks and remote peripherals) are only available
on wired modems.
Returns
1. boolean true if this is a wireless modem.
getNamesRemote()Source
List all remote peripherals on the wired network.
If this computer is attached to the network, it will not be included in this list.

🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Returns
1. { string... } Remote peripheral names on the network.
isPresentRemote(name)Source
Determine if a peripheral is available on this wired network.
🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Parameters
1. name string The peripheral's name.
Returns
1. boolean boolean If a peripheral is present with the given name.
See also
•
peripheral.isPresent
getTypeRemote(name)Source
Get the type of a peripheral is available on this wired network.
🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Parameters
1. name string The peripheral's name.
Returns
1. string
| nil The peripheral's type, or nil if it is not present.
See also
•
peripheral.getType
Changes
•
Changed in version 1.99: Peripherals can have multiple types - this function returns multiple
values.
hasTypeRemote(name, type)Source
Check a peripheral is of a particular type.

🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Parameters
1. name string The peripheral's name.
2. type string The type to check.
Returns
1. boolean | nil If a peripheral has a particular type, or nil if it is not present.
See also
•
peripheral.getType
Changes
•
New in version 1.99
getMethodsRemote(name)Source
Get all available methods for the remote peripheral with the given name.
🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Parameters
1. name string The peripheral's name.
Returns
1. { string... } | nil A list of methods provided by this peripheral, or nil if it is not
present.
See also
•
peripheral.getMethods
callRemote(remoteName, method, ...)Source
Call a method on a peripheral on this wired network.
🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Parameters
1. remoteName string The name of the peripheral to invoke the method on.
2. method string The name of the method
3. ... Additional arguments to pass to the method

Returns
1. string
The return values of the peripheral method.
See also
•
peripheral.call
getNameLocal()Source
Returns the network name of the current computer, if the modem is on. This may be used by other
computers on the network to wrap this computer as a peripheral.
🛈 note
This function only appears on wired modems. Check isWireless returns false before calling it.
Returns
1. string
| nil The current computer's name on the wired network.
Changes
•
New in version 1.80pr1.7
Last updated on 2024-11-19

☰
Contents
•
isDiskPresent
•
getDiskLabel
•
setDiskLabel
•
hasData
•
getMountPath
•
hasAudio
•
getAudioTitle
•
playAudio
•
stopAudio
•
ejectDisk
•
getDiskID
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle

•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch

•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
drive
Disk drives are a peripheral which allow you to read and write to floppy disks and other "mountable media"
(such as computers or turtles). They also allow you to play records.
When a disk drive attaches some mount (such as a floppy disk or computer), it attaches a folder called disk,
disk2, etc... to the root directory of the computer. This folder can be used to interact with the files on that
disk.

When a disk is inserted, a disk event is fired, with the side peripheral is on. Likewise, when the disk is
detached, a disk_eject event is fired.
Recipe
Disk Drive
isDiskPresent()
Returns whether a disk is currently inserted in the drive.
getDiskLabel()
Returns the label of the disk in the drive if available.
setDiskLabel([label]) Sets or clears the label for a disk.
hasData()
Returns whether a disk with data is inserted.
getMountPath()
Returns the mount path for the inserted disk.
hasAudio()
Returns whether a disk with audio is inserted.
getAudioTitle()
Returns the title of the inserted audio disk.
playAudio()
Plays the audio in the inserted disk, if available.

stopAudio()
Stops any audio that may be playing.
ejectDisk()
Ejects any disk that may be in the drive.
getDiskID()
Returns the ID of the disk inserted in the drive.
isDiskPresent()Source
Returns whether a disk is currently inserted in the drive.
Returns
1. boolean Whether a disk is currently inserted in the drive.
getDiskLabel()Source
Returns the label of the disk in the drive if available.
Returns
1. string
| nil The label of the disk, or nil if either no disk is inserted or the disk doesn't
have a label.
setDiskLabel([label])Source
Sets or clears the label for a disk.
If no label or nil is passed, the label will be cleared.
If the inserted disk's label can't be changed (for example, a record), an error will be thrown.
Parameters
1. label? string The new label of the disk, or nil to clear.
Throws
•
If the disk's label can't be changed.
hasData()Source
Returns whether a disk with data is inserted.
Returns
1. boolean Whether a disk with data is inserted.
getMountPath()Source
Returns the mount path for the inserted disk.
Returns
1. string
| nil The mount path for the disk, or nil if no data disk is inserted.
hasAudio()Source
Returns whether a disk with audio is inserted.

Returns
1. boolean Whether a disk with audio is inserted.
getAudioTitle()Source
Returns the title of the inserted audio disk.
Returns
1. string
| nil | false The title of the audio, false if no disk is inserted, or nil if the
disk has no audio.
playAudio()Source
Plays the audio in the inserted disk, if available.
stopAudio()Source
Stops any audio that may be playing.
See also
•
playAudio
ejectDisk()Source
Ejects any disk that may be in the drive.
getDiskID()Source
Returns the ID of the disk inserted in the drive.
Returns
1. number | nil The ID of the disk in the drive, or nil if no disk with an ID is inserted.
Changes
•
New in version 1.4
Last updated on 2024-11-19

☰
Contents
•
turnOn
•
shutdown
•
reboot
•
getID
•
isOn
•
getLabel
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window

Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll

•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
computer
A computer or turtle wrapped as a peripheral.
This allows for basic interaction with adjacent computers. Computers wrapped as peripherals will have the
type computer while turtles will be turtle.
turnOn()
Turn the other computer on.
shutdown() Shutdown the other computer.
reboot()
Reboot or turn on the other computer.
getID()
Get the other computer's ID.
isOn()
Determine if the other computer is on.

getLabel() Get the other computer's label.
turnOn()Source
Turn the other computer on.
shutdown()Source
Shutdown the other computer.
reboot()Source
Reboot or turn on the other computer.
getID()Source
Get the other computer's ID.
Returns
1. number The computer's ID.
See also
•
os.getComputerID
To get your computer's ID.
isOn()Source
Determine if the other computer is on.
Returns
1. boolean If the computer is on.
getLabel()Source
Get the other computer's label.
Returns
1. string
| nil The computer's label.
See also
•
os.getComputerLabel
To get your label.
Last updated on 2024-11-19

☰
Contents
•
getCommand
•
setCommand
•
runCommand
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect

•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings
Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message

•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer
•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
command
This peripheral allows you to interact with command blocks.
Command blocks are only wrapped as peripherals if the enable_command_block option is true within the
config.
This API is not the same as the commands API, which is exposed on command computers.
getCommand()
Get the command this command block will run.
setCommand(command) Set the command block's command.
runCommand()
Execute the command block once.
getCommand()Source
Get the command this command block will run.
Returns
1. string
The current command.

setCommand(command)Source
Set the command block's command.
Parameters
1. command string The new command.
runCommand()Source
Execute the command block once.
Returns
1. boolean If the command completed successfully.
2. string
| nil A failure message.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Lua 5.2/5.3 features in CC: Tweaked
CC: Tweaked is based off of the Cobalt Lua runtime, which uses Lua 5.2. However, Cobalt and CC:T
implement additional features from Lua 5.2 and 5.3 (as well as some deprecated 5.0 and 5.1 features). This
page lists all of the compatibility for these newer versions.
Lua 5.2
Feature
Supported?
Notes
goto/labels
✔
_ENV
✔
\z escape
✔
\xNN escape
✔
Hex literal fractional/exponent parts
✔
Empty statements
✔
__len metamethod
✔
__ipairs metamethod
❌
Deprecated in Lua 5.3. ipairs uses
__len/__index instead.
__pairs metamethod
✔
bit32 library
✔
collectgarbage isrunning, generational,
incremental options
❌
collectgarbage does not exist in CC:T.

New load syntax
✔
loadfile mode parameter
✔
Supports both 5.1 and 5.2+ syntax.
Removed loadstring
❌
Removed getfenv, setfenv
🔶
Only supports closures with an _ENV
upvalue.
rawlen function
✔
Negative index to select
✔
Removed unpack
❌
Arguments to xpcall
✔
Second return value from
coroutine.running
✔
Removed module
✔
package.loaders -> package.searchers
❌
Second argument to loader functions
✔
package.config
✔
package.searchpath
✔
Removed package.seeall
✔
string.dump on functions with upvalues
(blanks them out)
❌
string.dump is not supported
string.rep separator
✔
%g match group
❌
Removal of %z match group
❌
Removed table.maxn
❌
table.pack/table.unpack
✔
math.log base argument
✔
Removed math.log10
❌
*L mode to file:read
✔
os.execute exit type + return value
❌
os.execute does not exist in CC:T.
os.exit close argument
❌
os.exit does not exist in CC:T.
istailcall field in debug.getinfo
❌
nparams field in debug.getinfo
✔
isvararg field in debug.getinfo
✔
debug.getlocal negative indices for varargs
❌
debug.getuservalue/
debug.setuservalue
❌
Userdata are rarely used in CC:T, so this is
not necessary.
debug.upvalueid
✔
debug.upvaluejoin
✔
Tail call hooks
❌
= prefix for chunks
✔
Yield across C boundary
✔
Removal of ambiguity error
✔
Identifiers may no longer use locale-dependent
letters
✔
Ephemeron tables
❌

Identical functions may be reused
❌
Removed in Lua 5.4
Generational garbage collector
❌
Cobalt uses the built-in Java garbage
collector.
Lua 5.3
Feature
Supported?
Notes
Integer subtype
❌
Bitwise operators/floor division
❌
\u{XXX} escape sequence
✔
utf8 library
✔
removed __ipairs metamethod
✔
coroutine.isyieldable
✔
string.dump strip argument
✔
string.pack/string.unpack/string.packsize
✔
table.move
✔
math.atan2 -> math.atan
🔶
math.atan supports its two
argument form.
Removed math.frexp, math.ldexp, math.pow,
math.cosh, math.sinh, math.tanh
❌
math.maxinteger/math.mininteger
❌
math.tointeger
❌
math.type
❌
math.ult
❌
Removed bit32 library
❌
Remove * from file:read modes
✔
Metamethods respected in table.*, ipairs
✔
Lua 5.0
Feature
Supported?
Notes
arg table
🔶
Only set in the shell - not used in functions.
string.gfind
✔
Equal to string.gmatch.
table.getn
✔
Equal to #tbl.
table.setn
❌
math.mod
✔
Equal to math.fmod.
table.foreach/table.foreachi ✔
gcinfo
❌
Cobalt uses the built-in Java garbage collector.
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
The /computercraft command
CC: Tweaked provides a /computercraft command for server owners to manage running computers on a
server.
Permissions
As the /computercraft command is mostly intended for debugging and administrative purposes, its sub-
commands typically require you to have op (or similar).
•
All players have access to the queue sub-command.
•
On a multi-player server, all other commands require op.
•
On a single-player world, the player can run the dump, turn-on/shutdown, and track sub-
commands, even when cheats are not enabled. The tp and view commands require cheats.
If a permission mod such as LuckPerms is installed1, you can configure access to the individual sub-
commands. Each sub-command creates a computercraft.command.NAME permission node to control
which players can execute it.
Computer selectors
Some commands (such as tp or turn-on) target a specific computer, or a list of computers. To specify
which computers to operate on, you must use "computer selectors".

Computer selectors are similar to Minecraft's entity target selectors, but targeting computers instead. They
allow you to select one or more computers, based on a set of predicates.
The following predicates are supported:
•
id=<id>: Select computer(s) with a specific id.
•
instance=<id>: Select the computer with the given instance id.
•
family=<normal|advanced|command>: Select computers based on their type.
•
label=<label>: Select computers with the given label.
•
distance=<distance>: Select computers within a specific distance of the player executing the
command. This uses Minecraft's float range syntax.
#<id> may also be used as a shorthand for @c[id=<id>], to select computer(s) with a specific id.
Examples:
•
/computercraft turn-on #12: Turn on the computer(s) with an id of 12.
•
/computercraft shutdown @c[distance=..100]: Shut down all computers with 100 blocks
of the player.
Commands
/computercraft dump
/computercraft dump prints a table of currently loaded computers, including their id, position, and
whether they're running. It can also be run with a single computer argument to dump more detailed
information about a computer.

Next to the computer id, there are several buttons to either teleport to the computer, or open its terminal .
Computers are sorted by distance to the player, so nearby computers will appear earlier.
/computercraft turn-on [computers...]
Turn on one or more computers or, if no run with no arguments, all loaded computers.
Examples
•
/computercraft turn-on #0 #2: Turn on computers with id 0 and 2.
•
/computercraft turn-on @c[family=command]: Turn on all command computers.
/computercraft shutdown [computers...]
Shutdown one or more computers or, if no run with no arguments, all loaded computers.
This is sometimes useful when dealing with lag, as a way to ensure that ComputerCraft is not causing
problems.
Examples
•
/computercraft shutdown: Shut down all loaded computers.
•
/computercraft shutdown @c[distance=..10]: Shut down all computers in a block radius.

/computercraft tp [computer]
Teleport to the given computer.
This is normally used from via the dump command interface rather than being invoked directly.
/computercraft view [computer]
Open a terminal for the specified computer. This allows remotely viewing computers without having to
interact with the block.
This is normally used from via the dump command interface rather than being invoked directly.
/computercraft track
The /computercraft track command allows you to enable profiling of computers. When a computer
runs code, or interacts with the Minecraft world, we time how long that takes. This timing information may
then be queried, and used to find computers which may be causing lag.
To enable the profiler, run /computercraft track start. Computers will then start recording metrics.
Once enough data has been gathered, run /computercraft track stop to stop profiling and display the
recorded data.
The table by default shows the number of times each computer has run, and how long it ran for (in total, and
on average). In the above screenshot, we can see one computer was particularly badly behaved, and ran for 7
seconds. The buttons may be used to teleport to the computer, or open its terminal , and inspect it further.

/computercraft track dump can be used to display this table at any point (including while profiling is
still running).
Computers also record other information, such as how much server-thread time they consume, or their HTTP
bandwidth usage. The dump subcommand accepts a list of other fields to display, instead of the default
timings.
Examples
•
/computercraft track dump server_tasks_count server_tasks: Print the number of
server-thread tasks each computer executed, and how long they took in total.
•
/computercraft track dump http_upload http_download: Print the number of bytes
uploaded and downloaded by each computer.
/computercraft queue
The queue subcommand allows non-operator players to queue a computer_command event on command
computers.
This has a similar purpose to vanilla's /trigger command. Command computers may choose to listen to
this event, and then perform some action.
1. This supports any mod which uses Forge's permission API or fabric-permission-api. ↩︎︎�
Last updated on 2024-11-19

☰
Globals
•
_G
•
colors
•
colours
•
commands
•
disk
•
fs
•
gps
•
help
•
http
•
io
•
keys
•
multishell
•
os
•
paintutils
•
parallel
•
peripheral
•
pocket
•
rednet
•
redstone
•
settings
•
shell
•
term
•
textutils
•
turtle
•
vector
•
window
Modules
•
cc.audio.dfpwm
•
cc.completion
•
cc.expect
•
cc.image.nft
•
cc.pretty
•
cc.require
•
cc.shell.completion
•
cc.strings

Peripherals
•
command
•
computer
•
drive
•
modem
•
monitor
•
printer
•
redstone_relay
•
speaker
Generic Peripherals
•
energy_storage
•
fluid_storage
•
inventory
Events
•
alarm
•
char
•
computer_command
•
disk
•
disk_eject
•
file_transfer
•
http_check
•
http_failure
•
http_success
•
key
•
key_up
•
modem_message
•
monitor_resize
•
monitor_touch
•
mouse_click
•
mouse_drag
•
mouse_scroll
•
mouse_up
•
paste
•
peripheral
•
peripheral_detach
•
rednet_message
•
redstone
•
speaker_audio_empty
•
task_complete
•
term_resize
•
terminate
•
timer

•
turtle_inventory
•
websocket_closed
•
websocket_failure
•
websocket_message
•
websocket_success
Guides
•
Setting up GPS
•
Allowing access to local IPs
•
Playing audio with speakers
•
Reusing code with require
Reference
•
Incompatibilities between versions
•
The /computercraft command
•
Lua 5.2/5.3 features in CC: Tweaked
Incompatibilities between versions
CC: Tweaked tries to remain as compatible between versions as possible, meaning most programs written for
older version of the mod should run fine on later versions.
⚠ External peripherals
While CC: Tweaked is relatively stable across versions, this may not be true for other mods which add their
own peripherals. Older programs which interact with external blocks may not work on newer versions of the
game.
However, some changes to the underlying game, or CC: Tweaked's own internals may break some programs.
This page serves as documentation for breaking changes and "gotchas" one should look out for between
versions.
CC: Tweaked 1.109.0 to 1.109.3
•
Update to Lua 5.2:
•
Support for Lua 5.0's pseudo-argument arg has been removed. You should always use ... for
varargs.
•
Environments are no longer baked into the runtime, and instead use the _ENV local or upvalue.
getfenv/setfenv now only work on Lua functions with an _ENV upvalue. getfenv will
return the global environment when called with other functions, and setfenv will have no
effect.

•
load
/loadstring defaults to using the global environment (_G) rather than the current
coroutine's environment.
•
Support for dumping functions (string.dump) and loading binary chunks has been removed.
•
math.random
now uses Lua 5.4's random number generator.
•
File handles, HTTP requests and websockets now always use the original bytes rather than
encoding/decoding to UTF-8.
Minecraft 1.13
•
The "key code" for key and key_up events has changed, due to Minecraft updating to LWJGL 3.
Make sure you're using the constants provided by the keys API, rather than hard-coding numerical
values.
Related to this change, the numpad enter key now has a different key code to the enter key. You may
need to adjust your programs to handle both. (Note, the keys.numpadEnter constant was defined in
pre-1.13 versions of CC, but the keys.enter constant was queued when the key was pressed)
•
Minecraft 1.13 removed the concept of item damage and block metadata (see "The Flattening"). As a
result turtle.inspect no longer provides block metadata, and turtle.getItemDetail no
longer provides damage.

•
Block states (turtle.inspect().state) should provide all the same information as block
metadata, but in a much more understandable format.
•
Item and block names now represent a unique item type. For instance, wool is split into 16
separate items (minecraft:white_wool, etc...) rather than a single minecraft:wool with
each meta/damage value specifying the colour.
•
Custom ROMs are now provided using data packs rather than resource packs. This should mostly be a
matter of renaming the "assets" folder to "data", and placing it in "datapacks", but there are a couple
of other gotchas to look out for:
•
Data packs impose some restrictions on file names. As a result, your programs and directories
must all be lower case.
•
Due to how data packs are read by CC: Tweaked, you may need to use the /reload command
to see changes to your pack show up on the computer.
See the example datapack for how to get started.
•
Turtles can now be waterlogged and move "through" water sources rather than breaking them.
CC: Tweaked 1.88.0
•
Unlabelled computers and turtles now keep their ID when broken, meaning that unlabelled
computers/items do not stack.
ComputerCraft 1.80pr1
•
Programs run via shell.run are now started in their own isolated environment. This means globals
set by programs will not be accessible outside of this program.
•
Programs containing / are looked up in the current directory and are no longer looked up on the path.
For instance, you can no longer type turtle/excavate to run
/rom/programs/turtle/excavate.lua.
Last updated on 2024-11-19
